{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/EventCard/EventCard.js\";\nimport React from \"react\";\nimport classes from \"./EventCard.module.css\";\nexport default function ClassCard(props) {\n  //adds extra digit(zeros) for numbers upon rendering\n  const padToTwo = number => number <= 9 ? \"0\".concat(number) : number; //function that calculates the class start or class end\n\n\n  const classElapseHandler = (classDate, classStartHour, classStartMinute, classDuration, classModal) => {\n    const clDuration = classDuration.split(\"\").slice(0, 2).join(\"\");\n\n    const classHourToMilliseconds = hour => 3600000 * hour;\n\n    const classMinutesInMilliseconds = minutes => 60000 * minutes;\n\n    const classStart = classDate + classHourToMilliseconds(classStartHour) + classMinutesInMilliseconds(classStartMinute);\n    const classEnd = \"\".concat(padToTwo(new Date(classStart + classMinutesInMilliseconds(clDuration)).getHours()), \":\").concat(padToTwo(new Date(classStart + classMinutesInMilliseconds(clDuration)).getMinutes()));\n\n    if (classModal === \"class start\") {\n      return classStart;\n    }\n\n    if (classModal === \"class end\") {\n      return classEnd;\n    }\n  }; //taking in consideration a global consensus that 1px = 1min below I calculate the position on the card\n  //according to the scheduled time\n\n\n  const calculateCardTopPositioning = (props.classTime.hour - props.classInitialAvailableHour) * 60 + props.classTime.minutes;\n  const calculateCardWidthPositioning = props.classDuration.split(\"\").slice(0, 2).join(\"\");\n  let cardPosition = {\n    top: calculateCardTopPositioning + \"px\",\n    height: calculateCardWidthPositioning + \"px\"\n  }; //If I click on the event card I wanna make it stand out the backdrop\n\n  props.zIndexIFClicked === props.currDay ? Object.assign(cardPosition, {\n    zIndex: \"100\"\n  }) : Object.assign(cardPosition, {\n    zIndex: \"97\"\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, props.classDate === props.currDay ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => props.displayFullEventCard(props.currDay, calculateCardTopPositioning, calculateCardWidthPositioning),\n    className: classes.EventCard,\n    style: cardPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"Start: \", padToTwo(props.classTime.hour), \":\", padToTwo(props.classTime.minutes), \" - End:\", \" \", classElapseHandler(props.classDate, props.classTime.hour, props.classTime.minutes, props.classDuration, \"class end\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, props.classTitle, \" @ \", props.classLocation))) : null);\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/EventCard/EventCard.js"],"names":["React","classes","ClassCard","props","padToTwo","number","classElapseHandler","classDate","classStartHour","classStartMinute","classDuration","classModal","clDuration","split","slice","join","classHourToMilliseconds","hour","classMinutesInMilliseconds","minutes","classStart","classEnd","Date","getHours","getMinutes","calculateCardTopPositioning","classTime","classInitialAvailableHour","calculateCardWidthPositioning","cardPosition","top","height","zIndexIFClicked","currDay","Object","assign","zIndex","displayFullEventCard","EventCard","classTitle","classLocation"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classes from \"./EventCard.module.css\";\n\nexport default function ClassCard(props) {\n  //adds extra digit(zeros) for numbers upon rendering\n  const padToTwo = number => (number <= 9 ? `0${number}` : number);\n  //function that calculates the class start or class end\n  const classElapseHandler = (\n      classDate,\n      classStartHour,\n      classStartMinute,\n      classDuration,\n      classModal\n  ) => {\n    const clDuration = classDuration\n        .split(\"\")\n        .slice(0, 2)\n        .join(\"\");\n    const classHourToMilliseconds = hour => 3600000 * hour;\n    const classMinutesInMilliseconds = minutes => 60000 * minutes;\n    const classStart =\n        classDate +\n        classHourToMilliseconds(classStartHour) +\n        classMinutesInMilliseconds(classStartMinute);\n    const classEnd = `${padToTwo(\n        new Date(classStart + classMinutesInMilliseconds(clDuration)).getHours()\n    )}:${padToTwo(\n        new Date(classStart + classMinutesInMilliseconds(clDuration)).getMinutes()\n    )}`;\n\n    if (classModal === \"class start\") {\n      return classStart;\n    }\n    if (classModal === \"class end\") {\n      return classEnd;\n    }\n  };\n\n  //taking in consideration a global consensus that 1px = 1min below I calculate the position on the card\n  //according to the scheduled time\n  const calculateCardTopPositioning =\n      (props.classTime.hour - props.classInitialAvailableHour) * 60 +\n      props.classTime.minutes;\n  const calculateCardWidthPositioning = props.classDuration\n      .split(\"\")\n      .slice(0, 2)\n      .join(\"\");\n  let cardPosition = {\n    top: calculateCardTopPositioning + \"px\",\n    height: calculateCardWidthPositioning + \"px\"\n  };\n  //If I click on the event card I wanna make it stand out the backdrop\n  props.zIndexIFClicked === props.currDay\n      ? Object.assign(cardPosition, { zIndex: \"100\" })\n      : Object.assign(cardPosition, { zIndex: \"97\" });\n\n  return (\n\n      <div>\n        {props.classDate === props.currDay ?\n            <div\n                onClick={() => props.displayFullEventCard(props.currDay, calculateCardTopPositioning, calculateCardWidthPositioning)}\n                className={classes.EventCard}\n                style={cardPosition}\n            >\n              <div>\n                <div>\n                  Start: {padToTwo(props.classTime.hour)}:\n                  {padToTwo(props.classTime.minutes)} - End:{\" \"}\n                  {classElapseHandler(\n                      props.classDate,\n                      props.classTime.hour,\n                      props.classTime.minutes,\n                      props.classDuration,\n                      \"class end\"\n                  )}\n                </div>\n                <hr />\n                <div>{props.classTitle} @ {props.classLocation}</div>\n              </div>\n            </div> : null\n        }\n      </div>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}