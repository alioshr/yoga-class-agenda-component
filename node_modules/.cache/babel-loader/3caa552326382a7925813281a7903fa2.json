{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const ref = useRef();\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        dims = _useState2[0],\n        setDims = _useState2[1];\n\n  const updateDims = () => {\n    setDims(ref.current.getBoundingClientRect());\n  };\n\n  useLayoutEffect(() => {\n    updateDims();\n    window.addEventListener(\"resize\", updateDims);\n    return () => {\n      window.removeEventListener(\"resize\", updateDims);\n    };\n  }, []);\n  console.log(dims);\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if (props.appViewMode === \"WeekMode\") todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0, 0, 0, 0).valueOf());\n  if (props.appViewMode === \"DayMode\") todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0, 0, 0, 0).valueOf() === props.currAgendaData;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.EmptyTableWrapper,\n    style: props.outerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the column that displays the hours\n    let displaySingleHour;\n    if (props.style !== undefined) displaySingleHour = \"\".concat(singleHour, \":00\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: singleHour,\n      ref: ref,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js"],"names":["React","useLayoutEffect","useRef","useState","CurrentTime","classes","EmptyTables","props","ref","dims","setDims","updateDims","current","getBoundingClientRect","window","addEventListener","removeEventListener","console","log","calculateCurrentTime","Date","getHours","agendaInitialAvailableHour","getMinutes","showCurrentTime","agendaLastAvailableHour","todayIsPresentInScreenToRenderCurrentHour","appViewMode","currAgendaData","includes","setHours","valueOf","EmptyTableWrapper","outerStyle","style","undefined","dayCardContainerWidth","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","singleHour","displaySingleHour","EmptyTable"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect, useRef, useState} from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const ref = useRef();\n  const [dims, setDims] = useState();\n  const updateDims = () => {\n    setDims(ref.current.getBoundingClientRect())\n  }\n  useLayoutEffect(() => {\n    updateDims();\n    window.addEventListener(\"resize\", updateDims);\n    return () => {\n      window.removeEventListener(\"resize\", updateDims)\n    }\n  }, []);\n  console.log(dims)\n\n\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if(props.appViewMode === \"WeekMode\")\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0,0,0,0).valueOf());\n  if(props.appViewMode === \"DayMode\")\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0,0,0,0).valueOf() === props.currAgendaData;\n  return (\n      <div className={classes.EmptyTableWrapper} style={props.outerStyle}>\n        {props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour?\n            <CurrentTime currentTime={calculateCurrentTime}\n                         dayCardContainerWidth={props.dayCardContainerWidth}\n                         appViewMode={props.appViewMode}\n                         classInitialAvailableHour={props.classInitialAvailableHour}\n                         classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined) displaySingleHour = `${singleHour}:00`;\n          return (\n              <div key={singleHour}\n                   ref={ref}\n                   className={classes.EmptyTable}\n                   style={props.style}>\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}