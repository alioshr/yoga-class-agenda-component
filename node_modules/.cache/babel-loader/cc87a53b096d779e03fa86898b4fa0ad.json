{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js\";\nimport React, { useEffect, useState } from \"react\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentDay = _useState2[0],\n        setCurrentDay = _useState2[1];\n\n  useEffect(() => {\n    setInterval(() => {\n      setCurrentDay(new Date());\n    }, 1000);\n  }, []); //ensure that there only content in the div for the column that displays the hours\n\n  let renderSingleHour;\n\n  if (props.style) {\n    let style = {\n      boxShadow: \"none\",\n      borderRadius: \"0\"\n    };\n    Object.assign(props.style, style);\n    renderSingleHour = true;\n  } //1 px per minute\n\n\n  const padToTwo = number => number <= 9 ? \"0\".concat(number) : number;\n\n  const calculateCurrentTime = (new Date().getHours() - props.classInitialAvailableHour) * 60 + new Date().getMinutes();\n  const currentTimeTopPositioning = {\n    top: calculateCurrentTime + \"px\"\n  };\n  let currentTimeLineWidth = {\n    width: props.dayCardContainerWidth * 7 + 5 + \"px\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: props.backdropDisplayHandler,\n    className: classes.EmptyTableWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, renderSingleHour ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.CurrentTime,\n    style: currentTimeTopPositioning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"\".concat(padToTwo(currentDay.getHours()), \":\").concat(padToTwo(currentDay.getMinutes())), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.CurrentTimeLine,\n    style: currentTimeLineWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  })) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the\n    // column that displays the hours\n    let displaySingleHour;\n\n    if (renderSingleHour) {\n      displaySingleHour = \"\".concat(singleHour, \":00\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js"],"names":["React","useEffect","useState","classes","EmptyTables","props","Date","currentDay","setCurrentDay","setInterval","renderSingleHour","style","boxShadow","borderRadius","Object","assign","padToTwo","number","calculateCurrentTime","getHours","classInitialAvailableHour","getMinutes","currentTimeTopPositioning","top","currentTimeLineWidth","width","dayCardContainerWidth","backdropDisplayHandler","EmptyTableWrapper","CurrentTime","CurrentTimeLine","tableOfAvailableHours","map","singleHour","displaySingleHour","EmptyTable"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,oBACLH,QAAQ,CAAC,IAAII,IAAJ,EAAD,CADH;AAAA;AAAA,QAClCC,UADkC;AAAA,QACtBC,aADsB;;AAGzCP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAAC,MAAM;AAChBD,MAAAA,aAAa,CAAE,IAAIF,IAAJ,EAAF,CAAb;AACD,KAFU,EAER,IAFQ,CAAX;AAGD,GAJQ,EAIN,EAJM,CAAT,CAHyC,CASzC;;AACA,MAAII,gBAAJ;;AAEA,MAAIL,KAAK,CAACM,KAAV,EAAiB;AACf,QAAIA,KAAK,GAAG;AACVC,MAAAA,SAAS,EAAE,MADD;AAEVC,MAAAA,YAAY,EAAE;AAFJ,KAAZ;AAIAC,IAAAA,MAAM,CAACC,MAAP,CAAcV,KAAK,CAACM,KAApB,EAA2BA,KAA3B;AACAD,IAAAA,gBAAgB,GAAG,IAAnB;AACD,GAnBwC,CAoB3C;;;AACE,QAAMM,QAAQ,GAAGC,MAAM,IAAKA,MAAM,IAAI,CAAV,cAAkBA,MAAlB,IAA6BA,MAAzD;;AACA,QAAMC,oBAAoB,GAAG,CAAC,IAAIZ,IAAJ,GAAWa,QAAX,KAAwBd,KAAK,CAACe,yBAA/B,IAA4D,EAA5D,GAAiE,IAAId,IAAJ,GAAWe,UAAX,EAA9F;AACA,QAAMC,yBAAyB,GAAG;AAACC,IAAAA,GAAG,EAAEL,oBAAoB,GAAG;AAA7B,GAAlC;AACA,MAAIM,oBAAoB,GAAG;AAACC,IAAAA,KAAK,EAAEpB,KAAK,CAACqB,qBAAN,GAA8B,CAA9B,GAAkC,CAAlC,GAAsC;AAA9C,GAA3B;AACA,sBACE;AAAK,IAAA,OAAO,EAAErB,KAAK,CAACsB,sBAApB;AAA4C,IAAA,SAAS,EAAExB,OAAO,CAACyB,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,gBAAgB,gBACb;AAAK,IAAA,SAAS,EAAEP,OAAO,CAAC0B,WAAxB;AAAqC,IAAA,KAAK,EAAEP,yBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACMN,QAAQ,CAACT,UAAU,CAACY,QAAX,EAAD,CADd,cACyCH,QAAQ,CAACT,UAAU,CAACc,UAAX,EAAD,CADjD,gBAEE;AAAK,IAAA,SAAS,EAAElB,OAAO,CAAC2B,eAAxB;AAAyC,IAAA,KAAK,EAAEN,oBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADa,GAKjB,IANF,EAOGnB,KAAK,CAAC0B,qBAAN,CAA4BC,GAA5B,CAAgCC,UAAU,IAAI;AAC7C;AACA;AACA,QAAIC,iBAAJ;;AACA,QAAIxB,gBAAJ,EAAsB;AACpBwB,MAAAA,iBAAiB,aAAMD,UAAN,QAAjB;AACD;;AACD,wBACE;AACE,MAAA,GAAG,EAAEA,UADP;AAEE,MAAA,SAAS,EAAE9B,OAAO,CAACgC,UAFrB;AAGE,MAAA,KAAK,EAAE9B,KAAK,CAACM,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGuB,iBALH,CADF;AASD,GAhBA,CAPH,CADF;AA2BD","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const [currentDay, setCurrentDay] = useState(new Date());\n\n  useEffect(() => {\n    setInterval(() => {\n      setCurrentDay( new Date()   )\n    }, 1000)\n  }, []);\n\n  //ensure that there only content in the div for the column that displays the hours\n  let renderSingleHour;\n\n  if (props.style) {\n    let style = {\n      boxShadow: \"none\",\n      borderRadius: \"0\"\n    };\n    Object.assign(props.style, style);\n    renderSingleHour = true;\n  }\n//1 px per minute\n  const padToTwo = number => (number <= 9 ? `0${number}` : number);\n  const calculateCurrentTime = (new Date().getHours() - props.classInitialAvailableHour) * 60 + new Date().getMinutes();\n  const currentTimeTopPositioning = {top: calculateCurrentTime + \"px\"};\n  let currentTimeLineWidth = {width: props.dayCardContainerWidth * 7 + 5 + \"px\"};\n  return (\n    <div onClick={props.backdropDisplayHandler} className={classes.EmptyTableWrapper}>\n      {renderSingleHour ?\n          <div className={classes.CurrentTime} style={currentTimeTopPositioning}>\n            {`${padToTwo(currentDay.getHours())}:${padToTwo(currentDay.getMinutes())}`}\n            <div className={classes.CurrentTimeLine} style={currentTimeLineWidth}/>\n          </div> :\n      null}\n      {props.tableOfAvailableHours.map(singleHour => {\n        //ensure that there only content in the div for the\n        // column that displays the hours\n        let displaySingleHour;\n        if (renderSingleHour) {\n          displaySingleHour = `${singleHour}:00`;\n        }\n        return (\n          <div\n            key={singleHour}\n            className={classes.EmptyTable}\n            style={props.style}\n          >\n            {displaySingleHour}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}