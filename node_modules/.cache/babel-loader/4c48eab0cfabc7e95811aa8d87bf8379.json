{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js\";\nimport React, { useState, useLayoutEffect, useEffect, useRef } from \"react\";\nimport CurrentTime from \"../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n\n  if (props.appViewMode === \"WeekMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0, 0, 0, 0).valueOf());\n  }\n\n  if (props.appViewMode === \"DayMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0, 0, 0, 0).valueOf() === props.currAgendaData;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: props.backdropDisplayHandler,\n    className: classes.EmptyTableWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the\n    // column that displays the hours\n    let displaySingleHour;\n\n    if (props.style !== undefined) {\n      displaySingleHour = \"\".concat(singleHour, \":00\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      /*must enter the ref here*/\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js"],"names":["React","useState","useLayoutEffect","useEffect","useRef","CurrentTime","classes","EmptyTables","props","calculateCurrentTime","Date","getHours","agendaInitialAvailableHour","getMinutes","showCurrentTime","agendaLastAvailableHour","todayIsPresentInScreenToRenderCurrentHour","appViewMode","currAgendaData","includes","setHours","valueOf","backdropDisplayHandler","EmptyTableWrapper","style","undefined","dayCardContainerWidth","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","singleHour","displaySingleHour","EmptyTable"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,eAAzB,EAA0CC,SAA1C,EAAqDC,MAArD,QAAkE,OAAlE;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACzC,QAAMC,oBAAoB,GAAG,CAAC,IAAIC,IAAJ,GAAWC,QAAX,KAAwBH,KAAK,CAACI,0BAA/B,IAA6D,EAA7D,GAAkE,IAAIF,IAAJ,GAAWG,UAAX,EAA/F;AACA,QAAMC,eAAe,GAAG,CAACN,KAAK,CAACO,uBAAN,GAAgCP,KAAK,CAACI,0BAAvC,IAAqE,EAArE,GAA0E,EAA1E,GAA+EH,oBAAvG;AACA,MAAIO,yCAAJ;;AACA,MAAGR,KAAK,CAACS,WAAN,KAAsB,UAAzB,EAAqC;AACnCD,IAAAA,yCAAyC,GAAGR,KAAK,CAACU,cAAN,CAAqBC,QAArB,CAA8B,IAAIT,IAAJ,GAAWU,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,EAA6BC,OAA7B,EAA9B,CAA5C;AACD;;AACD,MAAGb,KAAK,CAACS,WAAN,KAAsB,SAAzB,EAAoC;AAClCD,IAAAA,yCAAyC,GAAG,IAAIN,IAAJ,GAAWU,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,EAA6BC,OAA7B,OAA2Cb,KAAK,CAACU,cAA7F;AACD;;AACD,sBACI;AAAK,IAAA,OAAO,EAAEV,KAAK,CAACc,sBAApB;AAA4C,IAAA,SAAS,EAAEhB,OAAO,CAACiB,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,KAAK,CAACgB,KAAN,KAAgBC,SAAhB,IAA6BX,eAA7B,IAAgDE,yCAAhD,gBACG,oBAAC,WAAD;AACI,IAAA,WAAW,EAAEP,oBADjB;AAEI,IAAA,qBAAqB,EAAED,KAAK,CAACkB,qBAFjC;AAGI,IAAA,WAAW,EAAElB,KAAK,CAACS,WAHvB;AAII,IAAA,yBAAyB,EAAET,KAAK,CAACmB,yBAJrC;AAKI,IAAA,uBAAuB,EAAEnB,KAAK,CAACoB,sBALnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAOG,IARN,EASGpB,KAAK,CAACqB,qBAAN,CAA4BC,GAA5B,CAAgCC,UAAU,IAAI;AAC7C;AACA;AACA,QAAIC,iBAAJ;;AACA,QAAIxB,KAAK,CAACgB,KAAN,KAAgBC,SAApB,EAA+B;AAC7BO,MAAAA,iBAAiB,aAAMD,UAAN,QAAjB;AACD;;AACD,wBACI;AAAI;AACA,MAAA,GAAG,EAAEA,UADT;AAEI,MAAA,SAAS,EAAEzB,OAAO,CAAC2B,UAFvB;AAGI,MAAA,KAAK,EAAEzB,KAAK,CAACgB,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGQ,iBALH,CADJ;AASD,GAhBA,CATH,CADJ;AA6BD","sourcesContent":["import React, {useState, useLayoutEffect, useEffect, useRef} from \"react\";\nimport CurrentTime from \"../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if(props.appViewMode === \"WeekMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0,0,0,0).valueOf());\n  }\n  if(props.appViewMode === \"DayMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0,0,0,0).valueOf() === props.currAgendaData;\n  }\n  return (\n      <div onClick={props.backdropDisplayHandler} className={classes.EmptyTableWrapper}>\n        {props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour?\n            <CurrentTime\n                currentTime={calculateCurrentTime}\n                dayCardContainerWidth={props.dayCardContainerWidth}\n                appViewMode={props.appViewMode}\n                classInitialAvailableHour={props.classInitialAvailableHour}\n                classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the\n          // column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined) {\n            displaySingleHour = `${singleHour}:00`;\n          }\n          return (\n              <div/*must enter the ref here*/\n                  key={singleHour}\n                  className={classes.EmptyTable}\n                  style={props.style}\n              >\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}