{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/AgendaTitles/AgendaTitles.js\";\nimport React from 'react';\nimport classes from \"./AgendaTitles.module.css\";\nexport default function AgendaTitles(props) {\n  let agendaTitles = null;\n\n  switch (props.appViewMode) {\n    case \"DayMode\":\n      agendaTitles = \"\".concat(props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\"), \" \\n    \").concat(new Date(props.currentDay).getDate(), \", \").concat(props.currentYear);\n      break;\n\n    case \"WeekMode\" || \"CalendarMode\":\n      agendaTitles = \"\".concat(props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\"), \", \").concat(props.currentYear);\n      break;\n\n    case \"DayOfTheWeek\" && props.currentDay !== '':\n      agendaTitles = props.newDatesToVerboseHandler(new Date(props.currentDay).getDay(), \"renderWeekDay\");\n      break;\n\n    default:\n      agendaTitles = null;\n  }\n\n  const renderMonthDayAndYear = \"\".concat(props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\"), \" \\n    \").concat(new Date(props.currentDay).getDate(), \", \").concat(props.currentYear);\n  const renderMonthAndYear = \"\".concat(props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\"), \", \").concat(props.currentYear);\n  let renderDayOfTheWeek = null;\n  let dayOfTheWeekStyle;\n\n  if (props.titleMode === \"DayOfTheWeek\" && props.currentDay !== '') {\n    dayOfTheWeekStyle = {\n      fontSize: \"1.8rem\",\n      marginBottom: \"10px\"\n    };\n    renderDayOfTheWeek = props.newDatesToVerboseHandler(new Date(props.currentDay).getDay(), \"renderWeekDay\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.AgendaTitlesDisplay,\n    style: dayOfTheWeekStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, props.appViewMode === \"DayMode\" && props.titleMode === undefined ? renderMonthDayAndYear : null, props.appViewMode !== \"DayMode\" && props.titleMode === undefined ? renderMonthAndYear : null, props.appViewMode === \"DayMode\" && props.titleMode === 'DayOfTheWeek' ? renderDayOfTheWeek : null);\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/AgendaTitles/AgendaTitles.js"],"names":["React","classes","AgendaTitles","props","agendaTitles","appViewMode","newDatesToVerboseHandler","currentMonth","Date","currentDay","getDate","currentYear","getDay","renderMonthDayAndYear","renderMonthAndYear","renderDayOfTheWeek","dayOfTheWeekStyle","titleMode","fontSize","marginBottom","AgendaTitlesDisplay","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACxC,MAAIC,YAAY,GAAG,IAAnB;;AACA,UAAQD,KAAK,CAACE,WAAd;AACI,SAAK,SAAL;AACID,MAAAA,YAAY,aAAMD,KAAK,CAACG,wBAAN,CAA+BH,KAAK,CAACI,YAArC,EAAmD,aAAnD,CAAN,oBAClB,IAAIC,IAAJ,CAASL,KAAK,CAACM,UAAf,EAA2BC,OAA3B,EADkB,eACuBP,KAAK,CAACQ,WAD7B,CAAZ;AAEA;;AACJ,SAAK,cAAc,cAAnB;AACIP,MAAAA,YAAY,aAAMD,KAAK,CAACG,wBAAN,CAA+BH,KAAK,CAACI,YAArC,EAAmD,aAAnD,CAAN,eAA4EJ,KAAK,CAACQ,WAAlF,CAAZ;AACA;;AACJ,SAAK,kBAAkBR,KAAK,CAACM,UAAN,KAAqB,EAA5C;AACIL,MAAAA,YAAY,GAAGD,KAAK,CAACG,wBAAN,CAA+B,IAAIE,IAAJ,CAASL,KAAK,CAACM,UAAf,EAA2BG,MAA3B,EAA/B,EAAoE,eAApE,CAAf;AACA;;AACJ;AACIR,MAAAA,YAAY,GAAG,IAAf;AAZR;;AAgBA,QAAMS,qBAAqB,aAAMV,KAAK,CAACG,wBAAN,CAA+BH,KAAK,CAACI,YAArC,EAAmD,aAAnD,CAAN,oBACzB,IAAIC,IAAJ,CAASL,KAAK,CAACM,UAAf,EAA2BC,OAA3B,EADyB,eACgBP,KAAK,CAACQ,WADtB,CAA3B;AAEA,QAAMG,kBAAkB,aAAMX,KAAK,CAACG,wBAAN,CAA+BH,KAAK,CAACI,YAArC,EAAmD,aAAnD,CAAN,eAA4EJ,KAAK,CAACQ,WAAlF,CAAxB;AACA,MAAII,kBAAkB,GAAG,IAAzB;AACA,MAAIC,iBAAJ;;AACA,MAAGb,KAAK,CAACc,SAAN,KAAoB,cAApB,IAAsCd,KAAK,CAACM,UAAN,KAAqB,EAA9D,EAAkE;AAC9DO,IAAAA,iBAAiB,GAAG;AAACE,MAAAA,QAAQ,EAAE,QAAX;AAAqBC,MAAAA,YAAY,EAAE;AAAnC,KAApB;AACAJ,IAAAA,kBAAkB,GAAGZ,KAAK,CAACG,wBAAN,CAA+B,IAAIE,IAAJ,CAASL,KAAK,CAACM,UAAf,EAA2BG,MAA3B,EAA/B,EAAoE,eAApE,CAArB;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAEX,OAAO,CAACmB,mBAAxB;AAA6C,IAAA,KAAK,EAAEJ,iBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,KAAK,CAACE,WAAN,KAAsB,SAAtB,IAAmCF,KAAK,CAACc,SAAN,KAAoBI,SAAvD,GACGR,qBADH,GAC2B,IAFhC,EAGKV,KAAK,CAACE,WAAN,KAAsB,SAAtB,IAAmCF,KAAK,CAACc,SAAN,KAAoBI,SAAvD,GACGP,kBADH,GACwB,IAJ7B,EAKKX,KAAK,CAACE,WAAN,KAAsB,SAAtB,IAAmCF,KAAK,CAACc,SAAN,KAAoB,cAAvD,GACGF,kBADH,GACwB,IAN7B,CADJ;AAUH","sourcesContent":["import React from 'react';\nimport classes from \"./AgendaTitles.module.css\";\n\nexport default function AgendaTitles(props) {\n    let agendaTitles = null;\n    switch (props.appViewMode) {\n        case(\"DayMode\") :\n            agendaTitles = `${props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\")} \n    ${new Date(props.currentDay).getDate()}, ${props.currentYear}`;\n            break;\n        case(\"WeekMode\" || \"CalendarMode\") :\n            agendaTitles = `${props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\")}, ${props.currentYear}`;\n            break;\n        case(\"DayOfTheWeek\" && props.currentDay !== '') :\n            agendaTitles = props.newDatesToVerboseHandler(new Date(props.currentDay).getDay(), \"renderWeekDay\");\n            break;\n        default:\n            agendaTitles = null;\n    }\n\n\n    const renderMonthDayAndYear = `${props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\")} \n    ${new Date(props.currentDay).getDate()}, ${props.currentYear}`;\n    const renderMonthAndYear = `${props.newDatesToVerboseHandler(props.currentMonth, \"renderMonth\")}, ${props.currentYear}`;\n    let renderDayOfTheWeek = null;\n    let dayOfTheWeekStyle;\n    if(props.titleMode === \"DayOfTheWeek\" && props.currentDay !== '') {\n        dayOfTheWeekStyle = {fontSize: \"1.8rem\", marginBottom: \"10px\"};\n        renderDayOfTheWeek = props.newDatesToVerboseHandler(new Date(props.currentDay).getDay(), \"renderWeekDay\");\n    }\n    return (\n        <div className={classes.AgendaTitlesDisplay} style={dayOfTheWeekStyle}>\n            {props.appViewMode === \"DayMode\" && props.titleMode === undefined ?\n                renderMonthDayAndYear : null}\n            {props.appViewMode !== \"DayMode\" && props.titleMode === undefined ?\n                renderMonthAndYear : null}\n            {props.appViewMode === \"DayMode\" && props.titleMode === 'DayOfTheWeek' ?\n                renderDayOfTheWeek : null}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}