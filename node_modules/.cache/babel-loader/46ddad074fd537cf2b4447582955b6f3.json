{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js\";\nimport React, { useEffect, useState } from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        now = _useState2[0],\n        setNow = _useState2[1];\n\n  const hourToMilliseconds = hour => 3600000 * hour;\n\n  const minutesInMilliseconds = minutes => 60000 * minutes;\n\n  const currentTimeCloseToTabHours = singleHour => {\n    const tableHourBiggerThanCurrTime = hourToMilliseconds(singleHour) - (hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes()));\n    const currTimeBiggerThanTableHour = hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes()) - hourToMilliseconds(singleHour);\n    return currTimeBiggerThanTableHour < minutesInMilliseconds(15) && currTimeBiggerThanTableHour > 0 || tableHourBiggerThanCurrTime < minutesInMilliseconds(15) && tableHourBiggerThanCurrTime > 0;\n  };\n\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if (props.appViewMode === \"WeekMode\") todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0, 0, 0, 0));\n  if (props.appViewMode === \"DayMode\") todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0, 0, 0, 0) === props.currAgendaData;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.EmptyTableWrapper,\n    style: props.outerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the column that displays the hours\n    let displaySingleHour;\n    if (props.style !== undefined && !currentTimeCloseToTabHours(singleHour)) displaySingleHour = \"\".concat(singleHour, \":00\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js"],"names":["React","useEffect","useState","CurrentTime","classes","EmptyTables","props","Date","now","setNow","hourToMilliseconds","hour","minutesInMilliseconds","minutes","currentTimeCloseToTabHours","singleHour","tableHourBiggerThanCurrTime","getHours","getMinutes","currTimeBiggerThanTableHour","calculateCurrentTime","agendaInitialAvailableHour","showCurrentTime","agendaLastAvailableHour","todayIsPresentInScreenToRenderCurrentHour","appViewMode","currAgendaData","includes","setHours","EmptyTableWrapper","outerStyle","style","undefined","dayCardContainerWidth","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","displaySingleHour","EmptyTable"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const [now, setNow] = useState(new Date())\n  const hourToMilliseconds = hour => 3600000 * hour;\n  const minutesInMilliseconds = minutes => 60000 * minutes;\n\n\n\n  const currentTimeCloseToTabHours = singleHour => {\n    const tableHourBiggerThanCurrTime = hourToMilliseconds(singleHour) - (hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes()));\n    const currTimeBiggerThanTableHour = (hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes())) - hourToMilliseconds(singleHour);\n    return ((currTimeBiggerThanTableHour < minutesInMilliseconds(15) && currTimeBiggerThanTableHour > 0) || (tableHourBiggerThanCurrTime < minutesInMilliseconds(15) && tableHourBiggerThanCurrTime > 0))\n  };\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if(props.appViewMode === \"WeekMode\")\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0,0,0,0));\n  if(props.appViewMode === \"DayMode\")\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0,0,0,0) === props.currAgendaData;\n  return (\n      <div className={classes.EmptyTableWrapper} style={props.outerStyle}>\n        {props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour?\n            <CurrentTime currentTime={calculateCurrentTime}\n                         dayCardContainerWidth={props.dayCardContainerWidth}\n                         appViewMode={props.appViewMode}\n                         classInitialAvailableHour={props.classInitialAvailableHour}\n                         classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined && !currentTimeCloseToTabHours(singleHour)) displaySingleHour = `${singleHour}:00`;\n          return (\n              <div key={singleHour}\n                   className={classes.EmptyTable}\n                   style={props.style}>\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}