{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js\";\nimport React, { useEffect } from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const currentTimeHalfAnHourFromTableDayHour = singleHour => {\n    const hourToMilliseconds = hour => 3600000 * hour;\n\n    const minutesInMilliseconds = minutes => 60000 * minutes;\n\n    const tableHourBiggerThanCurrTime = hourToMilliseconds(singleHour) - (hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes()));\n    const currTimeBiggerThanTableHour = hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes()) - hourToMilliseconds(singleHour);\n    return currTimeBiggerThanTableHour < minutesInMilliseconds(15) && currTimeBiggerThanTableHour > 0 || tableHourBiggerThanCurrTime < minutesInMilliseconds(15) && tableHourBiggerThanCurrTime > 0;\n  };\n\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if (props.appViewMode === \"WeekMode\") todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0, 0, 0, 0).valueOf());\n  if (props.appViewMode === \"DayMode\") todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0, 0, 0, 0).valueOf() === props.currAgendaData;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.EmptyTableWrapper,\n    style: props.outerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the column that displays the hours\n    let displaySingleHour;\n    if (props.style !== undefined && !currentTimeHalfAnHourFromTableDayHour(singleHour)) displaySingleHour = \"\".concat(singleHour, \":00\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js"],"names":["React","useEffect","CurrentTime","classes","EmptyTables","props","currentTimeHalfAnHourFromTableDayHour","singleHour","hourToMilliseconds","hour","minutesInMilliseconds","minutes","tableHourBiggerThanCurrTime","Date","getHours","getMinutes","currTimeBiggerThanTableHour","calculateCurrentTime","agendaInitialAvailableHour","showCurrentTime","agendaLastAvailableHour","todayIsPresentInScreenToRenderCurrentHour","appViewMode","currAgendaData","includes","setHours","valueOf","EmptyTableWrapper","outerStyle","style","undefined","dayCardContainerWidth","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","displaySingleHour","EmptyTable"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const currentTimeHalfAnHourFromTableDayHour = singleHour => {\n    const hourToMilliseconds = hour => 3600000 * hour;\n    const minutesInMilliseconds = minutes => 60000 * minutes;\n    const tableHourBiggerThanCurrTime = hourToMilliseconds(singleHour) - (hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes()));\n    const currTimeBiggerThanTableHour = (hourToMilliseconds(new Date().getHours()) + minutesInMilliseconds(new Date().getMinutes())) - hourToMilliseconds(singleHour);\n    return ((currTimeBiggerThanTableHour < minutesInMilliseconds(15) && currTimeBiggerThanTableHour > 0) || (tableHourBiggerThanCurrTime < minutesInMilliseconds(15) && tableHourBiggerThanCurrTime > 0))\n  };\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if(props.appViewMode === \"WeekMode\")\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0,0,0,0).valueOf());\n  if(props.appViewMode === \"DayMode\")\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0,0,0,0).valueOf() === props.currAgendaData;\n  return (\n      <div className={classes.EmptyTableWrapper} style={props.outerStyle}>\n        {props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour?\n            <CurrentTime currentTime={calculateCurrentTime}\n                         dayCardContainerWidth={props.dayCardContainerWidth}\n                         appViewMode={props.appViewMode}\n                         classInitialAvailableHour={props.classInitialAvailableHour}\n                         classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined && !currentTimeHalfAnHourFromTableDayHour(singleHour)) displaySingleHour = `${singleHour}:00`;\n          return (\n              <div key={singleHour}\n                   className={classes.EmptyTable}\n                   style={props.style}>\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}