{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/FullScreenButton/FullScreenButton.js\";\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./FullScreenButton.module.css\";\nexport default function FullScreenButton(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        fullScreen = _useState2[0],\n        setFullScreen = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        boxLeftTop = _useState4[0],\n        setBoxLeftTop = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        boxLeftBottom = _useState6[0],\n        setBoxLeftBottom = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        boxRightTop = _useState8[0],\n        setBoxRightTop = _useState8[1];\n\n  const _useState9 = useState(),\n        _useState10 = _slicedToArray(_useState9, 2),\n        boxRightBottom = _useState10[0],\n        setBoxRightBottom = _useState10[1];\n\n  const fullScreenToggleHandler = () => {\n    setFullScreen(!fullScreen);\n    props.callbackFullScreen(!fullScreen);\n  };\n\n  useEffect(() => {\n    if (fullScreen) {\n      setBoxLeftTop(classes.BoxLeftTopOnFullScreen);\n      setBoxLeftBottom(classes.BoxLeftBottomOnFullScreen);\n      setBoxRightTop(classes.BoxRightTopOnFullScreen);\n      setBoxRightBottom(classes.BoxRightBottomOnFullScreen);\n    }\n\n    if (!fullScreen) {\n      setBoxLeftTop(classes.BoxLeftTopOffFullScreen);\n      setBoxLeftBottom(classes.BoxLeftBottomOffFullScreen);\n      setBoxRightTop(classes.BoxRightTopOffFullScreen);\n      setBoxRightBottom(classes.BoxRightBottomOffFullScreen);\n    }\n  }, [fullScreen]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ButtonWrapper,\n    onClick: fullScreenToggleHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: boxLeftTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: boxLeftBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: boxRightTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: boxRightBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/FullScreenButton/FullScreenButton.js"],"names":["React","useState","useEffect","classes","FullScreenButton","props","fullScreen","setFullScreen","boxLeftTop","setBoxLeftTop","boxLeftBottom","setBoxLeftBottom","boxRightTop","setBoxRightTop","boxRightBottom","setBoxRightBottom","fullScreenToggleHandler","callbackFullScreen","BoxLeftTopOnFullScreen","BoxLeftBottomOnFullScreen","BoxRightTopOnFullScreen","BoxRightBottomOnFullScreen","BoxLeftTopOffFullScreen","BoxLeftBottomOffFullScreen","BoxRightTopOffFullScreen","BoxRightBottomOffFullScreen","ButtonWrapper"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,+BAApB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,oBACRJ,QAAQ,CAAC,KAAD,CADA;AAAA;AAAA,QACrCK,UADqC;AAAA,QACzBC,aADyB;;AAAA,qBAERN,QAAQ,EAFA;AAAA;AAAA,QAErCO,UAFqC;AAAA,QAEzBC,aAFyB;;AAAA,qBAGFR,QAAQ,EAHN;AAAA;AAAA,QAGrCS,aAHqC;AAAA,QAGtBC,gBAHsB;;AAAA,qBAINV,QAAQ,EAJF;AAAA;AAAA,QAIrCW,WAJqC;AAAA,QAIxBC,cAJwB;;AAAA,qBAKAZ,QAAQ,EALR;AAAA;AAAA,QAKrCa,cALqC;AAAA,QAKrBC,iBALqB;;AAO5C,QAAMC,uBAAuB,GAAG,MAAM;AAClCT,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAD,IAAAA,KAAK,CAACY,kBAAN,CAAyB,CAACX,UAA1B;AACH,GAHD;;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,UAAJ,EAAgB;AACZG,MAAAA,aAAa,CAACN,OAAO,CAACe,sBAAT,CAAb;AACAP,MAAAA,gBAAgB,CAACR,OAAO,CAACgB,yBAAT,CAAhB;AACAN,MAAAA,cAAc,CAACV,OAAO,CAACiB,uBAAT,CAAd;AACAL,MAAAA,iBAAiB,CAACZ,OAAO,CAACkB,0BAAT,CAAjB;AACH;;AACD,QAAI,CAACf,UAAL,EAAiB;AACbG,MAAAA,aAAa,CAACN,OAAO,CAACmB,uBAAT,CAAb;AACAX,MAAAA,gBAAgB,CAACR,OAAO,CAACoB,0BAAT,CAAhB;AACAV,MAAAA,cAAc,CAACV,OAAO,CAACqB,wBAAT,CAAd;AACAT,MAAAA,iBAAiB,CAACZ,OAAO,CAACsB,2BAAT,CAAjB;AACH;AACJ,GAbQ,EAaN,CAACnB,UAAD,CAbM,CAAT;AAeA,sBACI;AAAK,IAAA,SAAS,EAAEH,OAAO,CAACuB,aAAxB;AAAuC,IAAA,OAAO,EAAEV,uBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAER,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAK,IAAA,SAAS,EAAEE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAK,IAAA,SAAS,EAAEE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAII;AAAK,IAAA,SAAS,EAAEE,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classes from \"./FullScreenButton.module.css\";\n\nexport default function FullScreenButton(props) {\n    const [fullScreen, setFullScreen] = useState(false);\n    const [boxLeftTop, setBoxLeftTop] = useState();\n    const [boxLeftBottom, setBoxLeftBottom] = useState();\n    const [boxRightTop, setBoxRightTop] = useState();\n    const [boxRightBottom, setBoxRightBottom] = useState();\n\n    const fullScreenToggleHandler = () => {\n        setFullScreen(!fullScreen);\n        props.callbackFullScreen(!fullScreen);\n    };\n\n    useEffect(() => {\n        if (fullScreen) {\n            setBoxLeftTop(classes.BoxLeftTopOnFullScreen);\n            setBoxLeftBottom(classes.BoxLeftBottomOnFullScreen);\n            setBoxRightTop(classes.BoxRightTopOnFullScreen);\n            setBoxRightBottom(classes.BoxRightBottomOnFullScreen);\n        }\n        if (!fullScreen) {\n            setBoxLeftTop(classes.BoxLeftTopOffFullScreen);\n            setBoxLeftBottom(classes.BoxLeftBottomOffFullScreen);\n            setBoxRightTop(classes.BoxRightTopOffFullScreen);\n            setBoxRightBottom(classes.BoxRightBottomOffFullScreen);\n        }\n    }, [fullScreen]);\n\n    return (\n        <div className={classes.ButtonWrapper} onClick={fullScreenToggleHandler}>\n            <div className={boxLeftTop} />\n            <div className={boxLeftBottom} />\n            <div className={boxRightTop} />\n            <div className={boxRightBottom} />\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}