{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/CalendarMode/CalendarMode.js\";\nimport React from 'react';\nimport MonthDayCard from \"./MonthDayCard/MonthDayCard\";\nimport DateCards from \"../../../AgendaCards/DateCards.js/DateCards\";\nexport default function CalendarMode(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, [1585450800000, 1585537200000, 1585623600000, 1585710000000, 1585796400000, 1585882800000, 1585969200000].map((day, dayIndex) => /*#__PURE__*/React.createElement(MonthDayCard, {\n    calendarViewType: props.calendarViewType,\n    key: day,\n    newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n    today: day,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }\n  }, props.currentMonth.flat().filter(date => new Date(date).getDay() === new Date(day).getDay()).map((date, innerDateIndex) => /*#__PURE__*/React.createElement(DateCards, {\n    today: date,\n    currentDay: props.currentDay,\n    key: date,\n    monthGetter: props.monthGetter,\n    newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n    calendarViewType: props.calendarViewType,\n    cardDayIndex: dayIndex,\n    cardDatesInnerIndex: innerDateIndex,\n    appViewMode: props.appViewMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 29\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/CalendarMode/CalendarMode.js"],"names":["React","MonthDayCard","DateCards","CalendarMode","props","display","flexDirection","width","map","day","dayIndex","calendarViewType","newDatesToVerboseHandler","currentMonth","flat","filter","date","Date","getDay","innerDateIndex","currentDay","monthGetter","appViewMode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,6CAAtB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACxC,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,aAAa,EAAE,KAAjC;AAAwCC,MAAAA,KAAK,EAAE;AAA/C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC,aAAD,EAAgB,aAAhB,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,aAA7D,EAA4E,aAA5E,EAA2F,aAA3F,EAA0GC,GAA1G,CAA8G,CAACC,GAAD,EAAMC,QAAN,kBAC3G,oBAAC,YAAD;AACI,IAAA,gBAAgB,EAAEN,KAAK,CAACO,gBAD5B;AAEI,IAAA,GAAG,EAAEF,GAFT;AAGI,IAAA,wBAAwB,EAAEL,KAAK,CAACQ,wBAHpC;AAII,IAAA,KAAK,EAAEH,GAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKL,KAAK,CAACS,YAAN,CACIC,IADJ,GAEIC,MAFJ,CAEWC,IAAI,IAAI,IAAIC,IAAJ,CAASD,IAAT,EAAeE,MAAf,OAA4B,IAAID,IAAJ,CAASR,GAAT,EAAcS,MAAd,EAF/C,EAGIV,GAHJ,CAGQ,CAACQ,IAAD,EAAOG,cAAP,kBACD,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEH,IAAlB;AACW,IAAA,UAAU,EAAEZ,KAAK,CAACgB,UAD7B;AAEW,IAAA,GAAG,EAAEJ,IAFhB;AAGW,IAAA,WAAW,EAAEZ,KAAK,CAACiB,WAH9B;AAIW,IAAA,wBAAwB,EAAEjB,KAAK,CAACQ,wBAJ3C;AAKW,IAAA,gBAAgB,EAAER,KAAK,CAACO,gBALnC;AAMW,IAAA,YAAY,EAAED,QANzB;AAOW,IAAA,mBAAmB,EAAES,cAPhC;AAQW,IAAA,WAAW,EAAEf,KAAK,CAACkB,WAR9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJP,CANL,CADH,CADL,CADJ;AA2BH","sourcesContent":["import React from 'react'\nimport MonthDayCard from \"./MonthDayCard/MonthDayCard\";\nimport DateCards from \"../../../AgendaCards/DateCards.js/DateCards\";\n\nexport default function CalendarMode(props) {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            {[1585450800000, 1585537200000, 1585623600000, 1585710000000, 1585796400000, 1585882800000, 1585969200000].map((day, dayIndex) =>\n                <MonthDayCard\n                    calendarViewType={props.calendarViewType}\n                    key={day}\n                    newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                    today={day}\n                >\n                    {props.currentMonth\n                        .flat()\n                        .filter(date => new Date(date).getDay() === new Date(day).getDay())\n                        .map((date, innerDateIndex) =>\n                            <DateCards today={date}\n                                       currentDay={props.currentDay}\n                                       key={date}\n                                       monthGetter={props.monthGetter}\n                                       newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                                       calendarViewType={props.calendarViewType}\n                                       cardDayIndex={dayIndex}\n                                       cardDatesInnerIndex={innerDateIndex}\n                                       appViewMode={props.appViewMode}/>\n                        )}\n                </MonthDayCard>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}