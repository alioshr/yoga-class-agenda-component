{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js\";\nimport React from 'react';\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport DayCard from \"../../../DayCard/DayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nexport default function WeekMode(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimeTables, {\n    style: {\n      color: \"black\",\n      border: \"none\"\n    },\n    tableOfAvailableHours: props.arrayOfDailyHoursTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  })), props.currentWeek.map(day => {\n    return /*#__PURE__*/React.createElement(DayCard, {\n      backdropIsActive: props.backdropIsActive,\n      key: day,\n      today: day,\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }\n    }, props.backdropIsActive === \"cover all\" ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.displayDialogBoxHandler(day),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 29\n      }\n    }) : null, /*#__PURE__*/React.createElement(TimeTables, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(day),\n      tableOfAvailableHours: props.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }), props.backdropIsActive === day ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(\"false\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      ButtonText: \"Create a New Class\",\n      buttonClicked: () => props.displayDialogBoxHandler(day) //will open a dialog box in the future\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 33\n      }\n    })) : null, props.dataToBeRendered.map(cl => {\n      if (cl.classDate === day) {\n        return /*#__PURE__*/React.createElement(EventCard, {\n          zIndexIFClicked: props.dialogBoxData.displayDialogBox,\n          currDay: day,\n          classDate: cl.classDate,\n          classTitle: cl.classTitle,\n          classLocation: cl.location,\n          classDuration: cl.duration,\n          classTime: cl.classTime,\n          classInitialAvailableHour: props.agendaInitialAvailableHour,\n          key: cl.id,\n          displayFullEventCard: props.displayDialogBoxHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 37\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(EventDialogBox, {\n        today: day,\n        displayDialogBox: props.dialogBoxData.displayDialogBox,\n        dimsFromLayoutWidth: props.layoutWidthDimensions.width,\n        key: cl.id,\n        calculateCardTopPositioning: props.dialogBoxData.topPositionFromClassCard,\n        calculateCardHeigthPositioning: props.dialogBoxData.heigthPositionFromClassCard,\n        classInitialAvailableHour: props.agendaInitialAvailableHour,\n        classLastAvailableHour: props.agendaLastAvailableHour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FullEventCard, {\n        fullClassData: cl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }\n      }));\n    }));\n  }), /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js"],"names":["React","SideTab","TimeTables","DayCard","BackdropFilter","Button","EventCard","EventDialogBox","FullEventCard","WeekMode","props","display","flexDirection","width","color","border","arrayOfDailyHoursTable","currentWeek","map","day","backdropIsActive","newDatesToVerboseHandler","displayDialogBoxHandler","backdropDisplayHandler","dataToBeRendered","cl","classDate","dialogBoxData","displayDialogBox","classTitle","location","duration","classTime","agendaInitialAvailableHour","id","layoutWidthDimensions","topPositionFromClassCard","heigthPositionFromClassCard","agendaLastAvailableHour"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport DayCard from \"../../../DayCard/DayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\n\n\nexport default function WeekMode(props) {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            <SideTab>\n                <TimeTables\n                    style={{ color: \"black\", border: \"none\" }}\n                    tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                />\n            </SideTab>\n            {props.currentWeek.map(day => {\n                return (\n                    <DayCard\n                        backdropIsActive={props.backdropIsActive}\n                        key={day}\n                        today={day}\n                        newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                    >\n                        {props.backdropIsActive === \"cover all\" ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.displayDialogBoxHandler(day)}\n                            />\n                        ) : null}\n                        <TimeTables\n                            backdropDisplayHandler={() => props.backdropDisplayHandler(day)}\n                            tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                        />\n                        {props.backdropIsActive === day ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() =>\n                                    props.backdropDisplayHandler(\"false\")\n                                }\n                            >\n                                <Button\n                                    ButtonText=\"Create a New Class\"\n                                    buttonClicked={() => props.displayDialogBoxHandler(day)} //will open a dialog box in the future\n                                />\n                            </BackdropFilter>\n                        ) : null}\n                        {props.dataToBeRendered.map(cl => {\n                            if (cl.classDate === day) {\n                                return (\n                                    <EventCard\n                                        zIndexIFClicked={props.dialogBoxData.displayDialogBox}\n                                        currDay={day}\n                                        classDate={cl.classDate}\n                                        classTitle={cl.classTitle}\n                                        classLocation={cl.location}\n                                        classDuration={cl.duration}\n                                        classTime={cl.classTime}\n                                        classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                        key={cl.id}\n                                        displayFullEventCard={props.displayDialogBoxHandler}\n                                    />\n                                );\n                            }\n                            return (\n                                <EventDialogBox\n                                    today={day}\n                                    displayDialogBox={props.dialogBoxData.displayDialogBox}\n                                    dimsFromLayoutWidth={props.layoutWidthDimensions.width}\n                                    key={cl.id}\n                                    calculateCardTopPositioning={props.dialogBoxData.topPositionFromClassCard}\n                                    calculateCardHeigthPositioning={props.dialogBoxData.heigthPositionFromClassCard}\n                                    classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                    classLastAvailableHour={props.agendaLastAvailableHour}\n                                >\n                                    <FullEventCard\n                                        fullClassData={cl}/>\n                                </EventDialogBox>\n                            );\n                        })}\n                    </DayCard>\n                );\n            })}\n            <SideTab />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}