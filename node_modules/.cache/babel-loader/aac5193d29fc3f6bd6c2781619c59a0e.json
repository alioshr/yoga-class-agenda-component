{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js\";\nimport React, { useState, useLayoutEffect, useEffect, useRef } from \"react\";\nimport CurrentTime from \"../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const ref = useRef();\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        dimensions = _useState2[0],\n        setDimensions = _useState2[1];\n\n  const updateDimensions = () => {\n    setDimensions(ref.current.getBoundingClientRect());\n  }; //componentDidMount\n\n\n  useLayoutEffect(() => {\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n    };\n  }, []);\n  useEffect(() => {\n    props.callbackTimeTableRef(dimensions);\n  }, [dimensions]); //ensure that there only content in the div for the column that displays the hours\n\n  if (props.style) {\n    let style = {\n      boxShadow: \"none\",\n      borderRadius: \"0\"\n    };\n    Object.assign(props.style, style);\n  }\n\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: props.backdropDisplayHandler,\n    className: classes.EmptyTableWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && new Date().valueOf() === props.today ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the\n    // column that displays the hours\n    let displaySingleHour;\n\n    if (props.style !== undefined) {\n      displaySingleHour = \"\".concat(singleHour, \":00\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref,\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js"],"names":["React","useState","useLayoutEffect","useEffect","useRef","CurrentTime","classes","EmptyTables","props","ref","dimensions","setDimensions","updateDimensions","current","getBoundingClientRect","window","addEventListener","removeEventListener","callbackTimeTableRef","style","boxShadow","borderRadius","Object","assign","calculateCurrentTime","Date","getHours","agendaInitialAvailableHour","getMinutes","showCurrentTime","agendaLastAvailableHour","backdropDisplayHandler","EmptyTableWrapper","undefined","valueOf","today","dayCardContainerWidth","appViewMode","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","singleHour","displaySingleHour","EmptyTable"],"mappings":"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","sourcesContent":["import React, {useState, useLayoutEffect, useEffect, useRef} from \"react\";\nimport CurrentTime from \"../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const ref = useRef();\n  const [dimensions, setDimensions] = useState({});\n\n  const updateDimensions = () => {\n    setDimensions(ref.current.getBoundingClientRect());\n  };\n  //componentDidMount\n  useLayoutEffect(() => {\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions)\n    }\n  }, []);\n\n  useEffect(() => {\n    props.callbackTimeTableRef(dimensions);\n  }, [dimensions]);\n  //ensure that there only content in the div for the column that displays the hours\n  if (props.style) {\n    let style = {\n      boxShadow: \"none\",\n      borderRadius: \"0\"\n    };\n    Object.assign(props.style, style);\n  }\n  const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  return (\n      <div onClick={props.backdropDisplayHandler} className={classes.EmptyTableWrapper}>\n        {props.style !== undefined && showCurrentTime && new Date().valueOf() === props.today?\n            <CurrentTime\n                currentTime={calculateCurrentTime}\n                dayCardContainerWidth={props.dayCardContainerWidth}\n                appViewMode={props.appViewMode}\n                classInitialAvailableHour={props.classInitialAvailableHour}\n                classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the\n          // column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined) {\n            displaySingleHour = `${singleHour}:00`;\n          }\n          return (\n              <div\n                  ref={ref}\n                  key={singleHour}\n                  className={classes.EmptyTable}\n                  style={props.style}\n              >\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}