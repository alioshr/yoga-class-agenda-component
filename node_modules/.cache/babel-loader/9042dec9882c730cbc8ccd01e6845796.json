{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nimport DayMode from \"./UI/ViewMode/DayMode/DayMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: this.props.defaultView,\n      currentMonth: [],\n      currentWeek: [],\n      currWeekIndex: 0,\n      currentDay: '',\n      currentDayIndex: 0,\n      prevMonthLastWeekIndex: [],\n      monthGetter: new Date().getMonth(),\n      yearGetter: new Date().getFullYear(),\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\",\n        dayCardContainerWidth: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.dayModeLogicHandler = () => {\n      const findingToday = Number(this.state.currentWeek.filter(today => today === new Date().setHours(0, 0, 0, 0))); //if the current week has today, init the logic with today\n\n      if (findingToday) {\n        this.setState({\n          currentDay: findingToday\n        });\n      }\n    };\n\n    this.weekAgendaLogicHandler = () => {\n      //finds the week in the current month which contains today's day\n      let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n      this.setState({\n        currentWeek\n      });\n    };\n\n    this.weekAgendaNavigationHandler = modal => {\n      //init the current week index\n      if (modal === \"increment\") {\n        //if the number of weeks incremented does not exceed the amount of weeks in the month\n        if (this.state.currWeekIndex < this.state.currentMonth.length - 1) {\n          this.setState((_ref) => {\n            let currWeekIndex = _ref.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex + 1\n            }, restTop);\n          }, () => {\n            this.weekAgendaLogicHandler();\n          });\n        }\n\n        if (this.state.currWeekIndex === this.state.currentMonth.length - 1) {\n          this.setState((_ref2) => {\n            let currWeekIndex = _ref2.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref2, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: 0\n            }, restTop);\n          }, () => {\n            this.calendarNavigationHandler(\"increment\");\n          });\n        }\n      }\n\n      if (modal === \"decrement\" && !this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0))) {\n        if (this.state.currWeekIndex > 0) {\n          this.setState((_ref3) => {\n            let currWeekIndex = _ref3.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref3, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex - 1\n            }, restTop);\n          }, () => {\n            this.weekAgendaLogicHandler();\n          });\n        }\n\n        if (this.state.currWeekIndex === 0) {\n          this.calendarNavigationHandler(\"decrement\");\n        }\n      }\n    };\n\n    this.calendarLogicHandler = () => {\n      const oneDay = 86400000;\n      const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n      let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n\n      for (let i = 1; i < lastDayOfTheMonth; i++) {\n        //push the entire month\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      } //localize the first date of the month dates array and check what day of the week it is\n      //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n\n\n      for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n        currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n      } //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n\n\n      for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      }\n\n      let monthInWeeks = [];\n\n      for (let i = 0; i < currentMonth.length; i += 7) {\n        let chunk = currentMonth.slice(i, i + 7);\n        monthInWeeks.push(chunk);\n      }\n\n      currentMonth = monthInWeeks;\n      this.setState({\n        currentMonth\n      });\n    };\n\n    this.calendarNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        //saving the max index of curr month before incrementing\n        this.setState((_ref4) => {\n          let prevMonthLastWeekIndex = _ref4.prevMonthLastWeekIndex,\n              restTop = _objectWithoutProperties(_ref4, [\"prevMonthLastWeekIndex\"]);\n\n          return _objectSpread({\n            prevMonthLastWeekIndex: [...prevMonthLastWeekIndex, this.state.currentMonth.length - 1]\n          }, restTop);\n        }, () => this.setState({\n          currWeekIndex: 0\n        }));\n\n        if (this.state.monthGetter < 11) {\n          //just add months, before changing the year\n          this.setState((_ref5) => {\n            let monthGetter = _ref5.monthGetter,\n                restTop = _objectWithoutProperties(_ref5, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter >= 11) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref6) => {\n            let yearGetter = _ref6.yearGetter,\n                monthGetter = _ref6.monthGetter,\n                restTop = _objectWithoutProperties(_ref6, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter + 1,\n              monthGetter: 0\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        if (this.state.appViewMode === \"WeekMode\") {\n          //saving the max index of curr month before incrementing\n          this.setState({\n            currWeekIndex: this.state.prevMonthLastWeekIndex[this.state.prevMonthLastWeekIndex.length - 1]\n          }, () => {\n            this.setState((_ref7) => {\n              let prevMonthLastWeekIndex = _ref7.prevMonthLastWeekIndex,\n                  restTop = _objectWithoutProperties(_ref7, [\"prevMonthLastWeekIndex\"]);\n\n              return _objectSpread({\n                prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)]\n              }, restTop);\n            });\n          });\n        }\n\n        if (this.state.appViewMode === \"CalendarMode\") {\n          //saving the max index of curr month before incrementing\n          this.setState({\n            currWeekIndex: 0\n          }, () => {\n            this.setState((_ref8) => {\n              let prevMonthLastWeekIndex = _ref8.prevMonthLastWeekIndex,\n                  restTop = _objectWithoutProperties(_ref8, [\"prevMonthLastWeekIndex\"]);\n\n              return _objectSpread({\n                prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)]\n              }, restTop);\n            });\n          });\n        } //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n\n\n        if (this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState((_ref9) => {\n            let monthGetter = _ref9.monthGetter,\n                restTop = _objectWithoutProperties(_ref9, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter - 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        } //if the month is december it resets the month and increments the year\n\n\n        if (this.state.monthGetter <= 0) {\n          this.setState((_ref10) => {\n            let yearGetter = _ref10.yearGetter,\n                monthGetter = _ref10.monthGetter,\n                restTop = _objectWithoutProperties(_ref10, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter - 1,\n              monthGetter: 11\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n    };\n\n    this.appNavigationHandler = modal => {\n      if (this.state.appViewMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal);\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.toString().length > 2 ? date.getDay() : date;\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.toString().length > 2 ? date.getMonth() : date;\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 11:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.backdropDisplayHandler = day => {\n      this.setState((_ref11) => {\n        let backdropIsActive = _ref11.backdropIsActive,\n            dialogBoxData = _ref11.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref11, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref12) => {\n        let dialogBoxData = _ref12.dialogBoxData,\n            backdropIsActive = _ref12.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref12, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref13) => {\n        let layoutWidthDimensions = _ref13.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref13, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.callbackDayCardContainerDimensions = container => {\n      this.setState((_ref14) => {\n        let layoutWidthDimensions = _ref14.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref14, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            dayCardContainerWidth: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    const appViewMode = this.props.defaultMode;\n    this.setState({\n      appViewMode\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(\"prev month\", prevState.monthGetter);\n    console.log(\"curr month\", this.state.monthGetter);\n\n    if (prevState.currentMonth !== this.state.currentMonth && prevState.monthGetter !== this.state.currentMonth) {\n      const currWeekIndex = this.state.currentMonth.findIndex(week => week.includes(new Date().setHours(0, 0, 0, 0)));\n\n      if (currWeekIndex !== -1) {\n        this.setState({\n          currWeekIndex\n        }, () => this.weekAgendaLogicHandler());\n      }\n    }\n\n    if (prevState.currentWeek !== this.state.currentWeek) {\n      this.dayModeLogicHandler();\n    }\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = /*#__PURE__*/React.createElement(WeekMode, {\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      backdropIsActive: this.state.backdropIsActive,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      displayDialogBoxHandler: this.displayDialogBoxHandler,\n      backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n      dialogBoxData: this.state.dialogBoxData,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      layoutWidthDimensions: this.state.layoutWidthDimensions,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      currentWeek: this.state.currentWeek,\n      monthGetter: this.state.monthGetter,\n      callbackDayCardContainerDimensions: this.callbackDayCardContainerDimensions,\n      dayCardContainerWidth: this.state.layoutWidthDimensions.dayCardContainerWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }\n    });\n    const calendarMode = /*#__PURE__*/React.createElement(CalendarMode, {\n      monthGetter: this.state.monthGetter,\n      currentMonth: this.state.currentMonth,\n      currentWeek: this.state.currentWeek,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    });\n    const dayMode = /*#__PURE__*/React.createElement(DayMode, {\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      currentDay: this.state.currentDay,\n      monthGetter: this.state.monthGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }\n    });\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = weekMode;\n        break;\n\n      case 'CalendarMode':\n        viewMode = calendarMode;\n        break;\n\n      case \"DayMode\":\n        viewMode = dayMode;\n        break;\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      defaultMode: this.props.defaultMode,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      dayMode: () => this.viewModeHandler(\"DayMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      currentMonth: this.state.monthGetter,\n      currentYear: this.state.yearGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","DayMode","Agenda","Component","state","appViewMode","props","defaultView","currentMonth","currentWeek","currWeekIndex","currentDay","currentDayIndex","prevMonthLastWeekIndex","monthGetter","Date","getMonth","yearGetter","getFullYear","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","dayCardContainerWidth","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","dayModeLogicHandler","findingToday","Number","filter","today","setHours","weekAgendaLogicHandler","weekAgendaNavigationHandler","modal","length","restTop","calendarNavigationHandler","includes","calendarLogicHandler","oneDay","lastDayOfTheMonth","getDate","valueOf","min","getDay","unshift","monthInWeeks","chunk","slice","flat","appNavigationHandler","newDatesToVerboseHandler","date","verboseType","renderWeekDay","toString","renderMonth","backdropDisplayHandler","day","displayDialogBoxHandler","backdropIsActiv","callbackContainerDimensions","container","offsetWidth","callbackDayCardContainerDimensions","viewModeHandler","componentDidMount","agendaInitialAvailableHour","agendaLastAvailableHour","defaultMode","componentDidUpdate","prevProps","prevState","snapshot","console","log","findIndex","week","render","viewMode","weekMode","data","dataToBeRendered","calendarMode","dayMode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nimport DayMode from \"./UI/ViewMode/DayMode/DayMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: this.props.defaultView,\n    currentMonth: [],\n    currentWeek: [],\n    currWeekIndex: 0,\n    currentDay: '',\n    currentDayIndex: 0,\n    prevMonthLastWeekIndex: [],\n    monthGetter: new Date().getMonth(),\n    yearGetter: new Date().getFullYear(),\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\",\n      dayCardContainerWidth: \"\"\n    }\n  };\n\n  componentDidMount(){\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    const appViewMode = this.props.defaultMode;\n    this.setState({appViewMode});\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(\"prev month\",prevState.monthGetter);\n    console.log(\"curr month\",this.state.monthGetter);\n    if(prevState.currentMonth !== this.state.currentMonth && prevState.monthGetter !== this.state.currentMonth) {\n      const currWeekIndex =  this.state.currentMonth.findIndex(week => week.includes(new Date().setHours(0,0,0,0)));\n      if(currWeekIndex !== -1) {\n        this.setState({currWeekIndex}, () => this.weekAgendaLogicHandler())\n      }\n    }\n\n\n    if(prevState.currentWeek !== this.state.currentWeek) {\n      this.dayModeLogicHandler()\n    }\n  }\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  dayModeLogicHandler = () => {\n    const findingToday = Number(this.state.currentWeek.filter(today => today === new Date().setHours(0,0,0,0)));\n    //if the current week has today, init the logic with today\n    if(findingToday) {\n      this.setState({currentDay: findingToday})\n    }\n\n  };\n\n  weekAgendaLogicHandler = () => {\n    //finds the week in the current month which contains today's day\n\n    let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n    this.setState({currentWeek});\n\n  };\n\n  weekAgendaNavigationHandler = modal => {\n    //init the current week index\n    if (modal === \"increment\") {\n      //if the number of weeks incremented does not exceed the amount of weeks in the month\n      if(this.state.currWeekIndex < this.state.currentMonth.length -1) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex + 1,\n              ...restTop\n            }),\n            () => {\n              this.weekAgendaLogicHandler()\n            }\n        );\n      }\n      if(this.state.currWeekIndex === this.state.currentMonth.length -1) {\n        this.setState(({currWeekIndex, ...restTop}) => ({\n          currWeekIndex: 0,\n          ...restTop\n        }), () => {\n          this.calendarNavigationHandler(\"increment\");\n        });\n      }\n    }\n    if (modal === \"decrement\" && !this.state.currentWeek.includes(new Date().setHours(0,0,0,0))) {\n      if(this.state.currWeekIndex > 0) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex - 1,\n              ...restTop\n            }),\n            () => {\n              this.weekAgendaLogicHandler();\n            })}\n      if(this.state.currWeekIndex === 0) {\n        this.calendarNavigationHandler(\"decrement\");\n      }\n    }\n  };\n\n  calendarLogicHandler = () => {\n    const oneDay = 86400000;\n    const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n    let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n    for(let i = 1; i < lastDayOfTheMonth; i++) { //push the entire month\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    //localize the first date of the month dates array and check what day of the week it is\n    //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    let monthInWeeks = [];\n    for (let i = 0; i < currentMonth.length; i += 7 ) {\n      let chunk = currentMonth.slice(i, i+7 );\n      monthInWeeks.push(chunk)\n    }\n    currentMonth = monthInWeeks;\n    this.setState({currentMonth});\n  };\n\n  calendarNavigationHandler = modal => {\n    if(modal === \"increment\") {\n\n      //saving the max index of curr month before incrementing\n      this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n        prevMonthLastWeekIndex: [...prevMonthLastWeekIndex, this.state.currentMonth.length -1],\n        ...restTop\n      }), () => this.setState({currWeekIndex: 0}));\n\n      if(this.state.monthGetter < 11) { //just add months, before changing the year\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter + 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter >= 11) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter + 1,\n          monthGetter: 0,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n    if (modal === \"decrement\") {\n\n      if(this.state.appViewMode === \"WeekMode\") {\n        //saving the max index of curr month before incrementing\n        this.setState({currWeekIndex: this.state.prevMonthLastWeekIndex[this.state.prevMonthLastWeekIndex.length -1]}, () => {\n          this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n            prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)],\n            ...restTop\n          }));\n        });\n      }\n\n      if(this.state.appViewMode === \"CalendarMode\") {\n        //saving the max index of curr month before incrementing\n        this.setState({currWeekIndex: 0}, () => {\n          this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n            prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)],\n            ...restTop\n          }));\n        });\n      }\n      //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n      if(this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0,0,0,0).valueOf())) {\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter - 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n      //if the month is december it resets the month and increments the year\n      if(this.state.monthGetter <= 0) {\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter - 1,\n          monthGetter: 11,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n    if(this.state.appViewMode === \"WeekMode\") {\n      this.weekAgendaNavigationHandler(modal)\n    }\n    if(this.state.appViewMode === \"CalendarMode\") {\n      this.calendarNavigationHandler(modal)\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.toString().length > 2 ?\n        date.getDay() : date;\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth =  date.toString().length > 2 ?\n        date.getMonth() : date;\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 11:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler = (day) => {\n    this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n      backdropIsActive: day,\n      dialogBoxData: {\n        displayDialogBox: false\n      },\n      ...restTop\n    }));\n  };\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth,\n      },\n      ...restTop\n    }));\n  };\n\n  callbackDayCardContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        dayCardContainerWidth: container.offsetWidth,\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  };\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = (\n        <WeekMode\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            backdropIsActive={this.state.backdropIsActive}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            displayDialogBoxHandler={this.displayDialogBoxHandler}\n            backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n            dialogBoxData={this.state.dialogBoxData}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            layoutWidthDimensions={this.state.layoutWidthDimensions}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n            currentWeek={this.state.currentWeek}\n            monthGetter={this.state.monthGetter}\n            callbackDayCardContainerDimensions={this.callbackDayCardContainerDimensions}\n            dayCardContainerWidth={this.state.layoutWidthDimensions.dayCardContainerWidth}\n        />\n    );\n    const calendarMode = (\n        <CalendarMode\n            monthGetter={this.state.monthGetter}\n            currentMonth={this.state.currentMonth}\n            currentWeek={this.state.currentWeek}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n    );\n    const dayMode = (\n        <DayMode\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n            currentDay={this.state.currentDay}\n            monthGetter={this.state.monthGetter}/>\n    );\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = weekMode;\n        break;\n      case('CalendarMode') :\n        viewMode = calendarMode;\n        break;\n      case(\"DayMode\") :\n        viewMode = dayMode;\n        break;\n    }\n    return (\n        <Layout\n            defaultMode={this.props.defaultMode}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            dayMode={() => this.viewModeHandler(\"DayMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            currentMonth={this.state.monthGetter}\n            currentYear={this.state.yearGetter}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}