{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/CalendarMode/CalendarMode.js\";\nimport React, { Fragment } from 'react';\nimport DateCards from \"../../../Components/DateCards.js/DateCards\";\nimport DayOfTheWeekCard from \"../../../Components/DayOfTheWeekCard/DayOfTheWeekCard\";\nexport default function CalendarMode(props) {\n  const testingLiftedDate = childDate => {\n    console.log(\"clicked Date\", childDate);\n  }; //day card style will be 1rem when in dayCard\n\n\n  let dayCardStyle = {\n    fontSize: \"1rem\"\n  };\n  const smallCalendarOnDayMode = {\n    fontSize: \"1rem\"\n  }; //if statement just for fullCalendar\n\n  if (props.calendarViewType === \"FullCalendar\" && props.appViewMode === \"CalendarMode\") {\n    dayCardStyle = {\n      color: \"black\",\n      margin: \"1px\",\n      fontSize: \"1.5rem\",\n      height: \"auto\",\n      textAlign: 'right'\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, [1585450800000, 1585537200000, 1585623600000, 1585710000000, 1585796400000, 1585882800000, 1585969200000].map((day, dayIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DayOfTheWeekCard, {\n    style: dayCardStyle,\n    newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n    today: day,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, props.currentMonth.flat().filter(date => new Date(date).getDay() === new Date(day).getDay()).map((date, innerDateIndex) => /*#__PURE__*/React.createElement(DateCards, {\n    today: date,\n    liftClickedDate: testingLiftedDate,\n    currentDay: props.currentDay,\n    key: date,\n    monthGetter: props.monthGetter,\n    newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n    calendarViewType: props.calendarViewType,\n    cardDayIndex: dayIndex,\n    cardDatesInnerIndex: innerDateIndex,\n    appViewMode: props.appViewMode,\n    smallCalendarOnDayMode: smallCalendarOnDayMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/CalendarMode/CalendarMode.js"],"names":["React","Fragment","DateCards","DayOfTheWeekCard","CalendarMode","props","testingLiftedDate","childDate","console","log","dayCardStyle","fontSize","smallCalendarOnDayMode","calendarViewType","appViewMode","color","margin","height","textAlign","display","flexDirection","width","map","day","dayIndex","newDatesToVerboseHandler","currentMonth","flat","filter","date","Date","getDay","innerDateIndex","currentDay","monthGetter"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,4CAAtB;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACxC,QAAMC,iBAAiB,GAAGC,SAAS,IAAI;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,SAA3B;AACH,GAFD,CADwC,CAIxC;;;AACA,MAAIG,YAAY,GAAG;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAAnB;AACA,QAAMC,sBAAsB,GAAG;AAACD,IAAAA,QAAQ,EAAE;AAAX,GAA/B,CANwC,CAOxC;;AACA,MAAGN,KAAK,CAACQ,gBAAN,KAA2B,cAA3B,IAA6CR,KAAK,CAACS,WAAN,KAAsB,cAAtE,EAAsF;AAClFJ,IAAAA,YAAY,GAAG;AAACK,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAE,KAAzB;AAAgCL,MAAAA,QAAQ,EAAE,QAA1C;AAAoDM,MAAAA,MAAM,EAAE,MAA5D;AAAoEC,MAAAA,SAAS,EAAE;AAA/E,KAAf;AACH;;AACD,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,aAAa,EAAE,KAAjC;AAAwCC,MAAAA,KAAK,EAAE;AAA/C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC,aAAD,EAAgB,aAAhB,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,aAA7D,EAA4E,aAA5E,EAA2F,aAA3F,EAA0GC,GAA1G,CAA8G,CAACC,GAAD,EAAMC,QAAN,kBAC3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAEd,YADX;AAEI,IAAA,wBAAwB,EAAEL,KAAK,CAACoB,wBAFpC;AAGI,IAAA,KAAK,EAAEF,GAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,eAKI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACClB,KAAK,CAACqB,YAAN,CACIC,IADJ,GAEIC,MAFJ,CAEWC,IAAI,IAAI,IAAIC,IAAJ,CAASD,IAAT,EAAeE,MAAf,OAA4B,IAAID,IAAJ,CAASP,GAAT,EAAcQ,MAAd,EAF/C,EAGIT,GAHJ,CAGQ,CAACO,IAAD,EAAOG,cAAP,kBACD,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEH,IAAlB;AACW,IAAA,eAAe,EAAEvB,iBAD5B;AAEW,IAAA,UAAU,EAAED,KAAK,CAAC4B,UAF7B;AAGW,IAAA,GAAG,EAAEJ,IAHhB;AAIW,IAAA,WAAW,EAAExB,KAAK,CAAC6B,WAJ9B;AAKW,IAAA,wBAAwB,EAAE7B,KAAK,CAACoB,wBAL3C;AAMW,IAAA,gBAAgB,EAAEpB,KAAK,CAACQ,gBANnC;AAOW,IAAA,YAAY,EAAEW,QAPzB;AAQW,IAAA,mBAAmB,EAAEQ,cARhC;AASW,IAAA,WAAW,EAAE3B,KAAK,CAACS,WAT9B;AAUW,IAAA,sBAAsB,EAAEF,sBAVnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJP,CADD,CALJ,CADH,CADL,CADJ;AA8BH","sourcesContent":["import React, {Fragment} from 'react'\nimport DateCards from \"../../../Components/DateCards.js/DateCards\";\nimport DayOfTheWeekCard from \"../../../Components/DayOfTheWeekCard/DayOfTheWeekCard\";\n\nexport default function CalendarMode(props) {\n    const testingLiftedDate = childDate => {\n        console.log(\"clicked Date\",childDate)\n    }\n    //day card style will be 1rem when in dayCard\n    let dayCardStyle = {fontSize: \"1rem\"}\n    const smallCalendarOnDayMode = {fontSize: \"1rem\"};\n    //if statement just for fullCalendar\n    if(props.calendarViewType === \"FullCalendar\" && props.appViewMode === \"CalendarMode\") {\n        dayCardStyle = {color: \"black\", margin: \"1px\", fontSize: \"1.5rem\", height: \"auto\", textAlign: 'right'};\n    }\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            {[1585450800000, 1585537200000, 1585623600000, 1585710000000, 1585796400000, 1585882800000, 1585969200000].map((day, dayIndex) =>\n                <div>\n                        <DayOfTheWeekCard\n                            style={dayCardStyle}\n                            newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                            today={day}/>\n                    <Fragment>\n                    {props.currentMonth\n                        .flat()\n                        .filter(date => new Date(date).getDay() === new Date(day).getDay())\n                        .map((date, innerDateIndex) =>\n                            <DateCards today={date}\n                                       liftClickedDate={testingLiftedDate}\n                                       currentDay={props.currentDay}\n                                       key={date}\n                                       monthGetter={props.monthGetter}\n                                       newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                                       calendarViewType={props.calendarViewType}\n                                       cardDayIndex={dayIndex}\n                                       cardDatesInnerIndex={innerDateIndex}\n                                       appViewMode={props.appViewMode}\n                                       smallCalendarOnDayMode={smallCalendarOnDayMode}/>\n                        )}\n                    </Fragment>\n                </div>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}