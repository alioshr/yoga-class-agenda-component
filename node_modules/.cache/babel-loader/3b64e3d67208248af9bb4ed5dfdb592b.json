{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: \"\",\n      currentWeek: [],\n      currentMonth: [],\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.weekNavigationHandler = modal => {\n      const oneDay = 86400000;\n\n      if (modal === \"increment\") {\n        let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n          currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n        }\n\n        this.setState({\n          currentWeek\n        });\n      }\n\n      if (modal === \"decrement\") {\n        let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n          currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n        }\n\n        if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.getDay();\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.getMonth();\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 12:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref) => {\n        let dialogBoxData = _ref.dialogBoxData,\n            backdropIsActive = _ref.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref2) => {\n        let layoutWidthDimensions = _ref2.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref2, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date(); //logic that fills the <Day> cards in the agenda\n\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n\n    this.setState({\n      currentWeek\n    }); //logic for month view\n\n    let currentMonth = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDate(); i > 1; i--) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n    }\n\n    for (let i = today.getDate(); i < new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate(); i++) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n    }\n\n    for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n    }\n\n    for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n    }\n\n    this.setState({\n      currentMonth\n    }); //I call this set state to spread the table of empty tabs for each existing hour\n\n    this.setState({\n      arrayOfHourTable: this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour)\n    });\n    console.log(\"highest day of the month\", this.state.currentMonth.filter((lastDayOfTheMonth, index) => {\n      if (index > 24) {\n        Math.max(lastDayOfTheMonth);\n      }\n    }));\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState((_ref3) => {\n        let backdropIsActive = _ref3.backdropIsActive,\n            dialogBoxData = _ref3.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref3, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    }\n  } //logic to run the dialog box. This box will handle create class, edit class & view full class card\n\n\n  render() {\n    let viewMode = \"\";\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = /*#__PURE__*/React.createElement(WeekMode, {\n          arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n          currentWeek: this.state.currentWeek,\n          backdropIsActive: this.state.backdropIsActive,\n          newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n          displayDialogBoxHandler: this.displayDialogBoxHandler,\n          backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n          dialogBoxData: this.state.dialogBoxData,\n          agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n          layoutWidthDimensions: this.state.layoutWidthDimensions,\n          agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n          dataToBeRendered: this.props.dataToBeRendered,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }\n        });\n        break;\n\n      case 'CalendarMode':\n        viewMode = /*#__PURE__*/React.createElement(CalendarMode, {\n          currentMonth: this.state.currentMonth,\n          currentWeek: this.state.currentWeek,\n          newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }\n        });\n        break;\n\n      default:\n        switch (this.props.defaultMode) {\n          case \"CalendarMode\":\n            viewMode = /*#__PURE__*/React.createElement(CalendarMode, {\n              currentMonth: this.state.currentMonth,\n              currentWeek: this.state.currentWeek,\n              newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 15\n              }\n            });\n            break;\n\n          case \"WeekMode\":\n            viewMode = /*#__PURE__*/React.createElement(WeekMode, {\n              arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n              currentWeek: this.state.currentWeek,\n              backdropIsActive: this.state.backdropIsActive,\n              newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n              displayDialogBoxHandler: this.displayDialogBoxHandler,\n              backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n              dialogBoxData: this.state.dialogBoxData,\n              agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n              layoutWidthDimensions: this.state.layoutWidthDimensions,\n              agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n              dataToBeRendered: this.props.dataToBeRendered,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 15\n              }\n            });\n            break;\n        }\n\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      weekNavigationHandler: this.weekNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","Agenda","Component","state","appViewMode","currentWeek","currentMonth","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","weekNavigationHandler","modal","oneDay","Date","getDay","min","unshift","includes","setHours","valueOf","newDatesToVerboseHandler","date","verboseType","renderWeekDay","renderMonth","getMonth","displayDialogBoxHandler","day","backdropIsActiv","restTop","callbackContainerDimensions","container","offsetWidth","viewModeHandler","componentDidMount","today","getDate","getFullYear","arrayOfHourTable","props","agendaInitialAvailableHour","agendaLastAvailableHour","console","log","filter","lastDayOfTheMonth","index","backdropDisplayHandler","render","viewMode","data","dataToBeRendered","defaultMode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: \"\",\n    currentWeek: [],\n    currentMonth: [],\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date();\n\n    //logic that fills the <Day> cards in the agenda\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n    this.setState({ currentWeek });\n\n    //logic for month view\n    let currentMonth = [today.setHours(0,0,0,0)];\n    for(let i = today.getDate(); i > 1; i--){\n      currentMonth.unshift(Math.min.apply(null,currentMonth) - oneDay)\n    }\n    for (let i = today.getDate(); i < new Date(new Date().getFullYear(),new Date().getMonth() + 1, 0).getDate(); i++ ){\n      currentMonth.push(Math.max.apply(null,currentMonth) + oneDay)\n    }\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    this.setState({currentMonth});\n\n    //I call this set state to spread the table of empty tabs for each existing hour\n    this.setState({\n      arrayOfHourTable: this.arrayOfTableRows(\n          this.props.agendaInitialAvailableHour,\n          this.props.agendaLastAvailableHour\n      )\n    });\n\n    console.log(\"highest day of the month\",this.state.currentMonth.filter((lastDayOfTheMonth, index) => {\n      if(index > 24) {\n        Math.max(lastDayOfTheMonth)\n      }}));\n\n  }\n\n\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  //this functions navigates in between weeks\n  weekNavigationHandler = modal => {\n    const oneDay = 86400000;\n    if (modal === \"increment\") {\n      let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n        currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n      }\n      this.setState({currentWeek});\n\n    }\n    if (modal === \"decrement\") {\n      let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n        currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n      }\n      if (\n          !this.state.currentWeek.includes(\n              new Date().setHours(0, 0, 0, 0).valueOf()\n          )\n      ) {\n        this.setState({currentWeek});\n      }\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.getDay();\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth = date.getMonth();\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 12:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n        backdropIsActive: day,\n        dialogBoxData: {\n          displayDialogBox: false\n        },\n        ...restTop\n      }));\n    }\n  }\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  }\n\n  render() {\n    let viewMode = \"\";\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = (\n            <WeekMode\n                arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n                currentWeek={this.state.currentWeek}\n                backdropIsActive={this.state.backdropIsActive}\n                newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n                displayDialogBoxHandler={this.displayDialogBoxHandler}\n                backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n                dialogBoxData={this.state.dialogBoxData}\n                agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                layoutWidthDimensions={this.state.layoutWidthDimensions}\n                agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n                dataToBeRendered={this.props.dataToBeRendered}\n            />\n        );\n        break;\n      case('CalendarMode') :\n        viewMode = (\n            <CalendarMode\n                currentMonth={this.state.currentMonth}\n                currentWeek={this.state.currentWeek}\n                newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n        );\n        break;\n      default :\n        switch (this.props.defaultMode) {\n        case(\"CalendarMode\") :\n          viewMode = (\n              <CalendarMode\n                  currentMonth={this.state.currentMonth}\n                  currentWeek={this.state.currentWeek}\n                  newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n          );\n          break;\n        case(\"WeekMode\") :\n          viewMode = (\n              <WeekMode\n                  arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n                  currentWeek={this.state.currentWeek}\n                  backdropIsActive={this.state.backdropIsActive}\n                  newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n                  displayDialogBoxHandler={this.displayDialogBoxHandler}\n                  backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n                  dialogBoxData={this.state.dialogBoxData}\n                  agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                  layoutWidthDimensions={this.state.layoutWidthDimensions}\n                  agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n                  dataToBeRendered={this.props.dataToBeRendered}\n              />\n          );\n          break;\n      }\n    }\n    return (\n        <Layout\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            weekNavigationHandler={this.weekNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}