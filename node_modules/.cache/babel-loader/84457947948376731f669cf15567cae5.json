{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: \"\",\n      currentWeek: [],\n      currentMonth: [],\n      monthGetter: \"\",\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.appNavigationHandler = modal => {\n      const oneDay = 86400000;\n\n      if (modal === \"increment\") {\n        if (this.state.appViewMode === \"WeekMode\" || this.props.defaultMode === \"WeekMode\") {\n          let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n\n          for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n            currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n          }\n\n          this.setState({\n            currentWeek\n          });\n        }\n\n        if (this.state.appViewMode === \"CalendarMode\" || this.props.defaultMode === \"CalendarMode\") {\n          this.setState((_ref) => {\n            let monthGetter = _ref.monthGetter,\n                restTop = _objectWithoutProperties(_ref, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => console.log(this.state.monthGetter));\n          console.log(new Date(new Date().getFullYear(), this.state.monthGetter + 1, 0).getDate());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n          currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n        }\n\n        if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.getDay();\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.getMonth();\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 12:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref2) => {\n        let dialogBoxData = _ref2.dialogBoxData,\n            backdropIsActive = _ref2.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref2, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref3) => {\n        let layoutWidthDimensions = _ref3.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref3, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      monthGetter: new Date().getMonth()\n    }); //here I set oneDay to get one day in ms & today to use as ref for dates\n\n    const oneDay = 86400000;\n    const today = new Date(); //logic that fills the <Day> cards in the agenda\n\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n\n    this.setState({\n      currentWeek\n    }); //logic for month view\n\n    let currentMonth = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDate(); i > 1; i--) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n    }\n\n    for (let i = today.getDate(); i < new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate(); i++) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n    }\n\n    for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n    }\n\n    for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n    }\n\n    this.setState({\n      currentMonth\n    }); //I call this set state to spread the table of empty tabs for each existing hour\n\n    this.setState({\n      arrayOfHourTable: this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour)\n    });\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState((_ref4) => {\n        let backdropIsActive = _ref4.backdropIsActive,\n            dialogBoxData = _ref4.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref4, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    }\n  } //logic to run the dialog box. This box will handle create class, edit class & view full class card\n\n\n  render() {\n    let viewMode = \"\";\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = /*#__PURE__*/React.createElement(WeekMode, {\n          arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n          currentWeek: this.state.currentWeek,\n          backdropIsActive: this.state.backdropIsActive,\n          newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n          displayDialogBoxHandler: this.displayDialogBoxHandler,\n          backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n          dialogBoxData: this.state.dialogBoxData,\n          agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n          layoutWidthDimensions: this.state.layoutWidthDimensions,\n          agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n          dataToBeRendered: this.props.dataToBeRendered,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }\n        });\n        break;\n\n      case 'CalendarMode':\n        viewMode = /*#__PURE__*/React.createElement(CalendarMode, {\n          currentMonth: this.state.currentMonth,\n          currentWeek: this.state.currentWeek,\n          newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }\n        });\n        break;\n\n      default:\n        switch (this.props.defaultMode) {\n          case \"CalendarMode\":\n            viewMode = /*#__PURE__*/React.createElement(CalendarMode, {\n              currentMonth: this.state.currentMonth,\n              currentWeek: this.state.currentWeek,\n              newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }\n            });\n            break;\n\n          case \"WeekMode\":\n            viewMode = /*#__PURE__*/React.createElement(WeekMode, {\n              arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n              currentWeek: this.state.currentWeek,\n              backdropIsActive: this.state.backdropIsActive,\n              newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n              displayDialogBoxHandler: this.displayDialogBoxHandler,\n              backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n              dialogBoxData: this.state.dialogBoxData,\n              agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n              layoutWidthDimensions: this.state.layoutWidthDimensions,\n              agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n              dataToBeRendered: this.props.dataToBeRendered,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 17\n              }\n            });\n            break;\n        }\n\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      defaultMode: this.props.defaultMode,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      currentMonth: this.state.currentMonth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","Agenda","Component","state","appViewMode","currentWeek","currentMonth","monthGetter","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","appNavigationHandler","modal","oneDay","props","defaultMode","Date","getDay","restTop","console","log","getFullYear","getDate","min","unshift","includes","setHours","valueOf","newDatesToVerboseHandler","date","verboseType","renderWeekDay","renderMonth","getMonth","displayDialogBoxHandler","day","backdropIsActiv","callbackContainerDimensions","container","offsetWidth","viewModeHandler","componentDidMount","today","arrayOfHourTable","agendaInitialAvailableHour","agendaLastAvailableHour","backdropDisplayHandler","render","viewMode","data","dataToBeRendered"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: \"\",\n    currentWeek: [],\n    currentMonth: [],\n    monthGetter: \"\",\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount() {\n    this.setState({monthGetter: new Date().getMonth()});\n\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date();\n\n    //logic that fills the <Day> cards in the agenda\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n    this.setState({ currentWeek });\n\n    //logic for month view\n    let currentMonth = [today.setHours(0,0,0,0)];\n    for(let i = today.getDate(); i > 1; i--){\n      currentMonth.unshift(Math.min.apply(null,currentMonth) - oneDay)\n    }\n    for (let i = today.getDate(); i < new Date(new Date().getFullYear(),new Date().getMonth() + 1, 0).getDate(); i++ ){\n      currentMonth.push(Math.max.apply(null,currentMonth) + oneDay)\n    }\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    this.setState({currentMonth});\n\n    //I call this set state to spread the table of empty tabs for each existing hour\n    this.setState({\n      arrayOfHourTable: this.arrayOfTableRows(\n          this.props.agendaInitialAvailableHour,\n          this.props.agendaLastAvailableHour\n      )\n    });\n  }\n\n\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n    const oneDay = 86400000;\n    if (modal === \"increment\") {\n      if(this.state.appViewMode === \"WeekMode\" || this.props.defaultMode === \"WeekMode\") {\n        let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n        for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n          currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n        }\n        this.setState({currentWeek});\n      }\n\n      if(this.state.appViewMode === \"CalendarMode\" || this.props.defaultMode === \"CalendarMode\") {\n\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter + 1,\n          ...restTop\n        }), () => console.log(this.state.monthGetter));\n\n        console.log(new Date(new Date().getFullYear(), this.state.monthGetter + 1, 0).getDate())\n\n      }\n    }\n    if (modal === \"decrement\") {\n      let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n        currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n      }\n      if (\n          !this.state.currentWeek.includes(\n              new Date().setHours(0, 0, 0, 0).valueOf()\n          )\n      ) {\n        this.setState({currentWeek});\n      }\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.getDay();\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth = date.getMonth();\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 12:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n        backdropIsActive: day,\n        dialogBoxData: {\n          displayDialogBox: false\n        },\n        ...restTop\n      }));\n    }\n  }\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  }\n\n  render() {\n    let viewMode = \"\";\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = (\n            <WeekMode\n                arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n                currentWeek={this.state.currentWeek}\n                backdropIsActive={this.state.backdropIsActive}\n                newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n                displayDialogBoxHandler={this.displayDialogBoxHandler}\n                backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n                dialogBoxData={this.state.dialogBoxData}\n                agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                layoutWidthDimensions={this.state.layoutWidthDimensions}\n                agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n                dataToBeRendered={this.props.dataToBeRendered}\n            />\n        );\n        break;\n      case('CalendarMode') :\n        viewMode = (\n            <CalendarMode\n                currentMonth={this.state.currentMonth}\n                currentWeek={this.state.currentWeek}\n                newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n        );\n        break;\n      default :\n        switch (this.props.defaultMode) {\n          case(\"CalendarMode\") :\n            viewMode = (\n                <CalendarMode\n                    currentMonth={this.state.currentMonth}\n                    currentWeek={this.state.currentWeek}\n                    newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n            );\n            break;\n          case(\"WeekMode\") :\n            viewMode = (\n                <WeekMode\n                    arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n                    currentWeek={this.state.currentWeek}\n                    backdropIsActive={this.state.backdropIsActive}\n                    newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n                    displayDialogBoxHandler={this.displayDialogBoxHandler}\n                    backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n                    dialogBoxData={this.state.dialogBoxData}\n                    agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                    layoutWidthDimensions={this.state.layoutWidthDimensions}\n                    agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n                    dataToBeRendered={this.props.dataToBeRendered}\n                />\n            );\n            break;\n        }\n    }\n    return (\n        <Layout\n            defaultMode={this.props.defaultMode}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            currentMonth={this.state.currentMonth}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}