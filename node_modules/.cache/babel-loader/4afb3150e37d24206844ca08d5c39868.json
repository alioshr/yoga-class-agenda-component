{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js\";\nimport React, { useState, useEffect, useLayoutEffect, useRef } from \"react\";\nimport CurrentTime from \"../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        dimensions = _useState2[0],\n        setDimensions = _useState2[1];\n\n  const ref = useRef();\n\n  const updateDimensions = () => {\n    setDimensions(ref.current.getBoundingClientRect());\n  };\n\n  useLayoutEffect(() => {\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n    };\n  });\n  /*const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;*/\n\n  let todayIsPresentInScreenToRenderCurrentHour;\n\n  if (props.appViewMode === \"WeekMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0, 0, 0, 0).valueOf());\n  }\n\n  if (props.appViewMode === \"DayMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0, 0, 0, 0).valueOf() === props.currAgendaData;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: props.backdropDisplayHandler,\n    className: classes.EmptyTableWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the\n    // column that displays the hours\n    let displaySingleHour;\n\n    if (props.style !== undefined) {\n      displaySingleHour = \"\".concat(singleHour, \":00\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      /*must enter the ref here*/\n      ref: ref,\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/TimeTables/TimeTables.js"],"names":["React","useState","useEffect","useLayoutEffect","useRef","CurrentTime","classes","EmptyTables","props","dimensions","setDimensions","ref","updateDimensions","current","getBoundingClientRect","window","addEventListener","removeEventListener","todayIsPresentInScreenToRenderCurrentHour","appViewMode","currAgendaData","includes","Date","setHours","valueOf","backdropDisplayHandler","EmptyTableWrapper","style","undefined","showCurrentTime","calculateCurrentTime","dayCardContainerWidth","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","singleHour","displaySingleHour","EmptyTable"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,eAApC,EAAqDC,MAArD,QAAkE,OAAlE;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,oBACLP,QAAQ,CAAC,EAAD,CADH;AAAA;AAAA,QAClCQ,UADkC;AAAA,QACtBC,aADsB;;AAEzC,QAAMC,GAAG,GAAGP,MAAM,EAAlB;;AAEA,QAAMQ,gBAAgB,GAAG,MAAM;AAC7BF,IAAAA,aAAa,CAACC,GAAG,CAACE,OAAJ,CAAYC,qBAAZ,EAAD,CAAb;AACD,GAFD;;AAIAX,EAAAA,eAAe,CAAC,MAAM;AACpBS,IAAAA,gBAAgB;AAChBG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,gBAAlC;AACA,WAAO,MAAM;AACXG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCL,gBAArC;AACD,KAFD;AAEE,GALW,CAAf;AAOA;;;AAEA,MAAIM,yCAAJ;;AACA,MAAGV,KAAK,CAACW,WAAN,KAAsB,UAAzB,EAAqC;AACnCD,IAAAA,yCAAyC,GAAGV,KAAK,CAACY,cAAN,CAAqBC,QAArB,CAA8B,IAAIC,IAAJ,GAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,EAA6BC,OAA7B,EAA9B,CAA5C;AACD;;AACD,MAAGhB,KAAK,CAACW,WAAN,KAAsB,SAAzB,EAAoC;AAClCD,IAAAA,yCAAyC,GAAG,IAAII,IAAJ,GAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,EAA6BC,OAA7B,OAA2ChB,KAAK,CAACY,cAA7F;AACD;;AACD,sBACI;AAAK,IAAA,OAAO,EAAEZ,KAAK,CAACiB,sBAApB;AAA4C,IAAA,SAAS,EAAEnB,OAAO,CAACoB,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,KAAK,CAACmB,KAAN,KAAgBC,SAAhB,IAA6BC,eAA7B,IAAgDX,yCAAhD,gBACG,oBAAC,WAAD;AACI,IAAA,WAAW,EAAEY,oBADjB;AAEI,IAAA,qBAAqB,EAAEtB,KAAK,CAACuB,qBAFjC;AAGI,IAAA,WAAW,EAAEvB,KAAK,CAACW,WAHvB;AAII,IAAA,yBAAyB,EAAEX,KAAK,CAACwB,yBAJrC;AAKI,IAAA,uBAAuB,EAAExB,KAAK,CAACyB,sBALnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAOG,IARN,EASGzB,KAAK,CAAC0B,qBAAN,CAA4BC,GAA5B,CAAgCC,UAAU,IAAI;AAC7C;AACA;AACA,QAAIC,iBAAJ;;AACA,QAAI7B,KAAK,CAACmB,KAAN,KAAgBC,SAApB,EAA+B;AAC7BS,MAAAA,iBAAiB,aAAMD,UAAN,QAAjB;AACD;;AACD,wBACI;AAAI;AACA,MAAA,GAAG,EAAEzB,GADT;AAEI,MAAA,GAAG,EAAEyB,UAFT;AAGI,MAAA,SAAS,EAAE9B,OAAO,CAACgC,UAHvB;AAII,MAAA,KAAK,EAAE9B,KAAK,CAACmB,KAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGU,iBANH,CADJ;AAUD,GAjBA,CATH,CADJ;AA8BD","sourcesContent":["import React, {useState, useEffect, useLayoutEffect, useRef} from \"react\";\nimport CurrentTime from \"../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const [dimensions, setDimensions] = useState({});\n  const ref = useRef();\n\n  const updateDimensions = () => {\n    setDimensions(ref.current.getBoundingClientRect())\n  }\n\n  useLayoutEffect(() => {\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions)\n    }})\n\n  /*const calculateCurrentTime = (new Date().getHours() - props.agendaInitialAvailableHour) * 60 + new Date().getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;*/\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if(props.appViewMode === \"WeekMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0,0,0,0).valueOf());\n  }\n  if(props.appViewMode === \"DayMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0,0,0,0).valueOf() === props.currAgendaData;\n  }\n  return (\n      <div onClick={props.backdropDisplayHandler} className={classes.EmptyTableWrapper}>\n        {props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour?\n            <CurrentTime\n                currentTime={calculateCurrentTime}\n                dayCardContainerWidth={props.dayCardContainerWidth}\n                appViewMode={props.appViewMode}\n                classInitialAvailableHour={props.classInitialAvailableHour}\n                classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the\n          // column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined) {\n            displaySingleHour = `${singleHour}:00`;\n          }\n          return (\n              <div/*must enter the ref here*/\n                  ref={ref}\n                  key={singleHour}\n                  className={classes.EmptyTable}\n                  style={props.style}\n              >\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}