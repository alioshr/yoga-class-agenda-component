{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/Layout/Layout.js\";\nimport React, { Fragment } from \"react\";\nimport classes from \"./Layout.module.css\";\nimport ViewMode from \"../ViewMode/ViewMode\";\nimport RightArrow from \"../NavigationButtons/RightArrow/RightArrow\";\nimport LeftArrow from \"../NavigationButtons/LeftArrow/LeftArrow\";\nimport AgendaTitles from \"../AgendaTitles/AgendaTitles\";\nimport TakeMeHome from \"../NavigationButtons/TakeMeHome/TakeMeHome\";\nimport FullScreen from \"react-full-screen\";\nimport FullScreenButton from \"../FullScreenButton/FullScreenButton\";\nexport default class Layout extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateDimensions = () => {\n      this.props.callbackContainerDimensions(this.container);\n    };\n\n    this.componentDidMount = () => {\n      this.updateDimensions();\n      window.addEventListener(\"resize\", this.updateDimensions);\n    };\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  render() {\n    let calendarViewType;\n\n    switch (this.props.calendarViewType) {\n      case \"FullCalendar\":\n        calendarViewType = /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.HeaderWrapper,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.FirstRow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(ViewMode, {\n          weekMode: this.props.weekMode,\n          monthMode: this.props.monthMode,\n          dayMode: this.props.dayMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 33\n          }\n        }), /*#__PURE__*/React.createElement(FullScreenButton, {\n          callbackFullScreen: this.props.callbackFullScreen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 37\n          }\n        })), this.props.appViewMode !== \"DayMode\" ? /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.SecondRow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(AgendaTitles, {\n          newDatesToVerboseHandler: this.props.newDatesToVerboseHandler,\n          monthGetter: this.props.monthGetter,\n          currentYear: this.props.currentYear,\n          currentDay: this.props.currentDay,\n          appViewMode: this.props.appViewMode,\n          calendarViewType: this.props.calendarViewType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.ControlsDisplay,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(LeftArrow, {\n          appNavigationHandler: this.props.appNavigationHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(TakeMeHome, {\n          takeMeToToday: this.props.takeMeToToday,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(RightArrow, {\n          appNavigationHandler: this.props.appNavigationHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 41\n          }\n        }))) : null));\n        break;\n\n      case \"SimpleCalendar\":\n        calendarViewType = /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.SecondRow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(LeftArrow, {\n          appNavigationHandler: this.props.appNavigationHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(AgendaTitles, {\n          newDatesToVerboseHandler: this.props.newDatesToVerboseHandler,\n          monthGetter: this.props.monthGetter,\n          currentYear: this.props.currentYear,\n          currentDay: this.props.currentDay,\n          appViewMode: this.props.appViewMode,\n          calendarViewType: this.props.calendarViewType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(RightArrow, {\n          appNavigationHandler: this.props.appNavigationHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }\n        })));\n        break;\n\n      default:\n        calendarViewType = null;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.OutStructure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, calendarViewType), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.AgendaInnerStructure,\n      ref: el => this.render(this.container = el),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, this.props.children));\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/Layout/Layout.js"],"names":["React","Fragment","classes","ViewMode","RightArrow","LeftArrow","AgendaTitles","TakeMeHome","FullScreen","FullScreenButton","Layout","Component","updateDimensions","props","callbackContainerDimensions","container","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","calendarViewType","HeaderWrapper","FirstRow","weekMode","monthMode","dayMode","callbackFullScreen","appViewMode","SecondRow","newDatesToVerboseHandler","monthGetter","currentYear","currentDay","ControlsDisplay","appNavigationHandler","takeMeToToday","OutStructure","AgendaInnerStructure","el","children"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport classes from \"./Layout.module.css\";\nimport ViewMode from \"../ViewMode/ViewMode\";\nimport RightArrow from \"../NavigationButtons/RightArrow/RightArrow\";\nimport LeftArrow from \"../NavigationButtons/LeftArrow/LeftArrow\";\nimport AgendaTitles from \"../AgendaTitles/AgendaTitles\";\nimport TakeMeHome from \"../NavigationButtons/TakeMeHome/TakeMeHome\";\nimport FullScreen from \"react-full-screen\";\nimport FullScreenButton from \"../FullScreenButton/FullScreenButton\";\n\nexport default class Layout extends React.Component {\n    updateDimensions = () => {\n        this.props.callbackContainerDimensions(this.container);\n    };\n    componentDidMount = () => {\n        this.updateDimensions();\n        window.addEventListener(\"resize\", this.updateDimensions);\n    };\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    render() {\n        let calendarViewType;\n        switch (this.props.calendarViewType) {\n            case (\"FullCalendar\") :\n                calendarViewType = (\n                    <Fragment>\n                        <div className={classes.HeaderWrapper}>\n                            {/*here is display the top title w/ the curr month*/}\n                            <div className={classes.FirstRow}>\n                                <ViewMode\n                                    weekMode={this.props.weekMode}\n                                    monthMode={this.props.monthMode}\n                                    dayMode={this.props.dayMode}/>\n                                    <FullScreenButton callbackFullScreen={this.props.callbackFullScreen}/>\n                            </div>\n                            {this.props.appViewMode !== \"DayMode\" ?\n                                <div className={classes.SecondRow}>\n                                    <AgendaTitles newDatesToVerboseHandler={this.props.newDatesToVerboseHandler}\n                                                  monthGetter={this.props.monthGetter}\n                                                  currentYear={this.props.currentYear}\n                                                  currentDay={this.props.currentDay}\n                                                  appViewMode={this.props.appViewMode}\n                                                  calendarViewType={this.props.calendarViewType}/>\n                                    <div className={classes.ControlsDisplay}>\n                                        <LeftArrow appNavigationHandler={this.props.appNavigationHandler}/>\n                                        <TakeMeHome takeMeToToday={this.props.takeMeToToday}/>\n                                        <RightArrow appNavigationHandler={this.props.appNavigationHandler}/>\n                                    </div>\n                                </div> : null}\n                        </div>\n\n                    </Fragment>\n                );\n                break;\n            case(\"SimpleCalendar\") :\n                calendarViewType = (\n                   <Fragment>\n                        <div className={classes.SecondRow}>\n                            <LeftArrow appNavigationHandler={this.props.appNavigationHandler}/>\n                            <AgendaTitles newDatesToVerboseHandler={this.props.newDatesToVerboseHandler}\n                                          monthGetter={this.props.monthGetter}\n                                          currentYear={this.props.currentYear}\n                                          currentDay={this.props.currentDay}\n                                          appViewMode={this.props.appViewMode}\n                                          calendarViewType={this.props.calendarViewType}/>\n                            <RightArrow appNavigationHandler={this.props.appNavigationHandler}/>\n                        </div>\n                   </Fragment>\n                );\n                break;\n            default :\n                calendarViewType = null;\n        }\n        return (\n            <Fragment>\n                <div className={classes.OutStructure}>\n                {calendarViewType}\n                </div>\n                <div className={classes.AgendaInnerStructure}\n                     ref={el => this.render((this.container = el))}>\n                    {this.props.children}\n                </div>\n            </Fragment>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}