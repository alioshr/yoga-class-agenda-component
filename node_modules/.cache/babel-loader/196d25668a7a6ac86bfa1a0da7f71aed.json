{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport DayCard from \"./DayCard/DayCard\";\nimport TimeTables from \"./TimeTables/TimeTables\";\nimport EventCard from \"./EventCard/EventCard\";\nimport SideTab from \"./SideTab/SideTab\";\nimport Layout from \"./UI/Layout/Layout\";\nimport BackdropFilter from \"./UI/BackdropFilter/BackdropFilter\";\nimport Button from \"./UI/Button/Button\";\nimport EventDialogBox from \"./UI/EventDialogBox/EventDialogBox\";\nimport Transition from \"react-transition-group/cjs/CSSTransition\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentWeek: [],\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfHourTable = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.weekNavigationHandler = modal => {\n      const oneDay = 86400000;\n\n      if (modal === \"increment\") {\n        let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n          currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n        }\n\n        this.setState({\n          currentWeek\n        });\n      }\n\n      if (modal === \"decrement\") {\n        let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n          currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n        }\n\n        if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.getDay();\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.getMonth();\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 12:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref) => {\n        let layoutWidthDimensions = _ref.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n      console.log(\"running display dialog box handler\");\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref2) => {\n        let dialogBoxData = _ref2.dialogBoxData,\n            backdropIsActive = _ref2.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref2, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      }, () => console.log(this.state.dialogBoxData.displayDialogBox));\n    };\n  }\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date(); //logic that fills the <Day> cards in the agenda\n\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n\n    this.setState({\n      currentWeek\n    }); //I call this set state to spread the table of empty tabs for each existing hour\n\n    this.setState({\n      arrayOfHourTable: this.arrayOfHourTable(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour)\n    });\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState((_ref3) => {\n        let backdropIsActive = _ref3.backdropIsActive,\n            dialogBoxData = _ref3.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref3, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      }, () => console.log(this.state.dialogBoxData.displayDialogBox));\n    }\n  } //logic to run the dialog box. This box will handle create class, edit class & view full class card\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Layout, {\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      weekNavigationHandler: this.weekNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SideTab, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TimeTables, {\n      style: {\n        color: \"black\",\n        border: \"none\"\n      },\n      tableOfAvailableHours: this.state.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    })), this.state.currentWeek.map(day => {\n      return /*#__PURE__*/React.createElement(DayCard, {\n        backdropIsActive: this.state.backdropIsActive,\n        key: day,\n        today: day,\n        newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }\n      }, this.state.backdropIsActive === \"cover all\" ? /*#__PURE__*/React.createElement(BackdropFilter, {\n        backdropDisplayHandler: () => this.displayDialogBoxHandler(day),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }\n      }) : null, /*#__PURE__*/React.createElement(TimeTables, {\n        backdropDisplayHandler: () => this.backdropDisplayHandler(day),\n        tableOfAvailableHours: this.state.arrayOfDailyHoursTable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }\n      }), this.state.backdropIsActive === day ? /*#__PURE__*/React.createElement(BackdropFilter, {\n        backdropDisplayHandler: () => this.backdropDisplayHandler(\"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        ButtonText: \"Create a New Class\",\n        buttonClicked: () => this.displayDialogBoxHandler(day) //will open a dialog box in the future\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 19\n        }\n      })) : null, this.props.dataToBeRendered.map(cl => {\n        if (cl.classDate === day) {\n          return /*#__PURE__*/React.createElement(EventCard, {\n            zIndexIFClicked: this.state.dialogBoxData.displayDialogBox,\n            currDay: day,\n            classDate: cl.classDate,\n            classTitle: cl.classTitle,\n            classLocation: cl.location,\n            classDuration: cl.duration,\n            classTime: cl.classTime,\n            classInitialAvailableHour: this.props.agendaInitialAvailableHour,\n            key: cl.id,\n            displayFullEventCard: this.displayDialogBoxHandler,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 21\n            }\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(Transition, {\n          timeout: 500,\n          in: day === this.state.dialogBoxData.displayDialogBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 21\n          }\n        }, state => {\n          let animation = {\n            transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n            opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0,\n            zIndex: state === \"entering\" ? 101 : state === \"entered\" ? 101 : state === \"exiting\" ? 96 : state === \"exited\" ? -100 : -100\n          };\n          return /*#__PURE__*/React.createElement(EventDialogBox, {\n            animated: animation,\n            dimsFromLayoutWidth: this.state.layoutWidthDimensions.width,\n            keys: cl.id,\n            calculateCardTopPositioning: this.state.dialogBoxData.topPositionFromClassCard,\n            calculateCardHeigthPositioning: this.state.dialogBoxData.heigthPositionFromClassCard,\n            classInitialAvailableHour: this.props.agendaInitialAvailableHour,\n            classLastAvailableHour: this.props.agendaLastAvailableHour,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 19\n            }\n          });\n        });\n      }));\n    }), /*#__PURE__*/React.createElement(SideTab, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","DayCard","TimeTables","EventCard","SideTab","Layout","BackdropFilter","Button","EventDialogBox","Transition","Agenda","Component","state","currentWeek","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfHourTable","startingHour","endingHour","i","push","Math","max","apply","setState","weekNavigationHandler","modal","oneDay","Date","getDay","min","unshift","includes","setHours","valueOf","newDatesToVerboseHandler","date","verboseType","renderWeekDay","renderMonth","getMonth","callbackContainerDimensions","container","restTop","offsetWidth","displayDialogBoxHandler","day","backdropIsActiv","console","log","componentDidMount","today","props","agendaInitialAvailableHour","agendaLastAvailableHour","backdropDisplayHandler","render","color","border","map","dataToBeRendered","cl","classDate","classTitle","location","duration","classTime","id","animation","transition","opacity","zIndex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DayCard from \"./DayCard/DayCard\";\nimport TimeTables from \"./TimeTables/TimeTables\";\nimport EventCard from \"./EventCard/EventCard\";\nimport SideTab from \"./SideTab/SideTab\";\nimport Layout from \"./UI/Layout/Layout\";\nimport BackdropFilter from \"./UI/BackdropFilter/BackdropFilter\";\nimport Button from \"./UI/Button/Button\";\nimport EventDialogBox from \"./UI/EventDialogBox/EventDialogBox\";\nimport Transition from \"react-transition-group/cjs/CSSTransition\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    currentWeek: [],\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date();\n    //logic that fills the <Day> cards in the agenda\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n    this.setState({ currentWeek });\n\n    //I call this set state to spread the table of empty tabs for each existing hour\n    this.setState({\n      arrayOfHourTable: this.arrayOfHourTable(\n        this.props.agendaInitialAvailableHour,\n        this.props.agendaLastAvailableHour\n      )\n    });\n  }\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfHourTable = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n        Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  //this functions navigates in between weeks\n  weekNavigationHandler = modal => {\n    const oneDay = 86400000;\n    if (modal === \"increment\") {\n      let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n        currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n      }\n      this.setState({ currentWeek });\n    }\n\n    if (modal === \"decrement\") {\n      let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n        currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n      }\n      if (\n        !this.state.currentWeek.includes(\n          new Date().setHours(0, 0, 0, 0).valueOf()\n        )\n      ) {\n        this.setState({ currentWeek });\n      }\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.getDay();\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth = date.getMonth();\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 12:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n        backdropIsActive: day,\n        dialogBoxData: {\n          displayDialogBox: false\n        },\n        ...restTop\n      }), () => console.log(this.state.dialogBoxData.displayDialogBox));\n    }\n  }\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n    console.log(\"running display dialog box handler\")\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }), () => console.log(this.state.dialogBoxData.displayDialogBox));\n  };\n\n\n\n  render() {\n    return (\n      <Layout\n        callbackContainerDimensions={this.callbackContainerDimensions}\n        weekNavigationHandler={this.weekNavigationHandler}\n        newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n        currentWeek={this.state.currentWeek}\n      >\n        <SideTab>\n          <TimeTables\n            style={{ color: \"black\", border: \"none\" }}\n            tableOfAvailableHours={this.state.arrayOfDailyHoursTable}\n          />\n        </SideTab>\n        {this.state.currentWeek.map(day => {\n          return (\n            <DayCard\n              backdropIsActive={this.state.backdropIsActive}\n              key={day}\n              today={day}\n              newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            >\n              {this.state.backdropIsActive === \"cover all\" ? (\n                <BackdropFilter\n                  backdropDisplayHandler={() => this.displayDialogBoxHandler(day)}\n                />\n              ) : null}\n              <TimeTables\n                backdropDisplayHandler={() => this.backdropDisplayHandler(day)}\n                tableOfAvailableHours={this.state.arrayOfDailyHoursTable}\n              />\n              {this.state.backdropIsActive === day ? (\n                <BackdropFilter\n                  backdropDisplayHandler={() => this.backdropDisplayHandler(\"false\")}\n                >\n                  <Button\n                    ButtonText=\"Create a New Class\"\n                    buttonClicked={() => this.displayDialogBoxHandler(day)} //will open a dialog box in the future\n                  />\n                </BackdropFilter>\n              ) : null}\n              {this.props.dataToBeRendered.map(cl => {\n                if (cl.classDate === day) {\n                  return (\n                    <EventCard\n                      zIndexIFClicked={this.state.dialogBoxData.displayDialogBox}\n                      currDay={day}\n                      classDate={cl.classDate}\n                      classTitle={cl.classTitle}\n                      classLocation={cl.location}\n                      classDuration={cl.duration}\n                      classTime={cl.classTime}\n                      classInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                      key={cl.id}\n                      displayFullEventCard={this.displayDialogBoxHandler}\n                    />\n                  );\n                }\n                return (\n                    <Transition timeout={500} in={day === this.state.dialogBoxData.displayDialogBox}>\n                      {state => {\n                        let animation = {\n                          transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n                          opacity:\n                              state === \"entering\"\n                                  ? 1\n                                  : state === \"entered\"\n                                  ? 1\n                                  : state === \"exited\"\n                                      ? 0\n                                      : 0,\n                          zIndex:\n                              state === \"entering\"\n                                  ? 101\n                                  : state === \"entered\"\n                                  ? 101\n                                  : state === \"exiting\"\n                                      ? 96\n                                      : state === \"exited\"\n                                          ? -100\n                                          : -100\n                        };\n                        return (\n                  <EventDialogBox\n                    animated={animation}\n                    dimsFromLayoutWidth={this.state.layoutWidthDimensions.width}\n                    keys={cl.id}\n                    calculateCardTopPositioning={this.state.dialogBoxData.topPositionFromClassCard}\n                    calculateCardHeigthPositioning={this.state.dialogBoxData.heigthPositionFromClassCard}\n                    classInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                    classLastAvailableHour={this.props.agendaLastAvailableHour}\n                  />\n                        );\n                      }}\n                    </Transition>\n                );\n              })}\n            </DayCard>\n          );\n        })}\n        <SideTab />\n      </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}