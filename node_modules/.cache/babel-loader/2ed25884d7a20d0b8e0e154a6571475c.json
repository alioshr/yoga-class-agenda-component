{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/AgendaTitles/AgendaTitles.js\";\nimport React, { Fragment } from 'react';\nimport classes from \"./AgendaTitles.module.css\";\nexport default function AgendaTitles(props) {\n  let agendaTitles;\n\n  switch (props.appViewMode) {\n    case \"DayMode\":\n      agendaTitles = props.currentDay !== \"\" ? /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          fontSize: '2.5rem',\n          marginBottom: \"5px\",\n          marginTop: \"30px\",\n          border: \"1px solid red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 20\n        }\n      }, props.newDatesToVerboseHandler(props.monthGetter, \"renderMonth\"), \",\", new Date(props.currentDay).getDate(), \" \", props.currentYear), /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 20\n        }\n      }, props.newDatesToVerboseHandler(new Date(props.currentDay).getDay(), \"renderWeekDay\"))) : null;\n      break;\n\n    case \"WeekMode\":\n    case \"CalendarMode\":\n      agendaTitles = \"\".concat(props.newDatesToVerboseHandler(props.monthGetter, \"renderMonth\"), \", \").concat(props.currentYear);\n      break;\n\n    default:\n      agendaTitles = null;\n  }\n\n  let style;\n\n  if (props.currentDay !== '' && props.appViewMode === \"DayMode\") {\n    style = {\n      fontSize: \"1.8rem\",\n      marginBottom: \"10px\",\n      zIndex: '999'\n    };\n  }\n\n  if (props.appViewMode === \"CalendarMode\" && props.calendarViewType === 'SimpleCalendar') {\n    style = {\n      textAlign: \"center\"\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.AgendaTitlesDisplay,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, agendaTitles);\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/AgendaTitles/AgendaTitles.js"],"names":["React","Fragment","classes","AgendaTitles","props","agendaTitles","appViewMode","currentDay","fontSize","marginBottom","marginTop","border","newDatesToVerboseHandler","monthGetter","Date","getDate","currentYear","getDay","style","zIndex","calendarViewType","textAlign","AgendaTitlesDisplay"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACxC,MAAIC,YAAJ;;AACA,UAAQD,KAAK,CAACE,WAAd;AACI,SAAK,SAAL;AACID,MAAAA,YAAY,GAAGD,KAAK,CAACG,UAAN,KAAqB,EAArB,gBACZ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,QAAX;AAAqBC,UAAAA,YAAY,EAAE,KAAnC;AAA0CC,UAAAA,SAAS,EAAE,MAArD;AAA6DC,UAAAA,MAAM,EAAE;AAArE,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKP,KAAK,CAACQ,wBAAN,CAA+BR,KAAK,CAACS,WAArC,EAAkD,aAAlD,CADL,OAEK,IAAIC,IAAJ,CAASV,KAAK,CAACG,UAAf,EAA2BQ,OAA3B,EAFL,OAE4CX,KAAK,CAACY,WAFlD,CADJ,eAKI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKZ,KAAK,CAACQ,wBAAN,CAA+B,IAAIE,IAAJ,CAASV,KAAK,CAACG,UAAf,EAA2BU,MAA3B,EAA/B,EAAoE,eAApE,CADL,CALJ,CADY,GASE,IATjB;AAUA;;AACJ,SAAK,UAAL;AACA,SAAK,cAAL;AACIZ,MAAAA,YAAY,aAAMD,KAAK,CAACQ,wBAAN,CAA+BR,KAAK,CAACS,WAArC,EAAkD,aAAlD,CAAN,eAA2ET,KAAK,CAACY,WAAjF,CAAZ;AACA;;AACJ;AACIX,MAAAA,YAAY,GAAG,IAAf;AAlBR;;AAoBA,MAAIa,KAAJ;;AACA,MAAGd,KAAK,CAACG,UAAN,KAAqB,EAArB,IAA2BH,KAAK,CAACE,WAAN,KAAsB,SAApD,EAA+D;AAC3DY,IAAAA,KAAK,GAAG;AAACV,MAAAA,QAAQ,EAAE,QAAX;AAAqBC,MAAAA,YAAY,EAAE,MAAnC;AAA2CU,MAAAA,MAAM,EAAE;AAAnD,KAAR;AACH;;AACD,MAAGf,KAAK,CAACE,WAAN,KAAsB,cAAtB,IAAwCF,KAAK,CAACgB,gBAAN,KAA2B,gBAAtE,EAAwF;AACpFF,IAAAA,KAAK,GAAG;AAACG,MAAAA,SAAS,EAAE;AAAZ,KAAR;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAEnB,OAAO,CAACoB,mBAAxB;AAA6C,IAAA,KAAK,EAAEJ,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,YADL,CADJ;AAKH","sourcesContent":["import React, {Fragment} from 'react';\nimport classes from \"./AgendaTitles.module.css\";\n\nexport default function AgendaTitles(props) {\n    let agendaTitles;\n    switch (props.appViewMode) {\n        case(\"DayMode\") :\n            agendaTitles = props.currentDay !== \"\" ?\n               <Fragment>\n                   <div style={{fontSize: '2.5rem', marginBottom: \"5px\", marginTop: \"30px\", border: \"1px solid red\"}}>\n                       {props.newDatesToVerboseHandler(props.monthGetter, \"renderMonth\")},\n                       {new Date(props.currentDay).getDate()} {props.currentYear}\n                   </div>\n                   <Fragment>\n                       {props.newDatesToVerboseHandler(new Date(props.currentDay).getDay(), \"renderWeekDay\")}\n                   </Fragment>\n               </Fragment> : null\n            break;\n        case(\"WeekMode\") :\n        case(\"CalendarMode\") :\n            agendaTitles = `${props.newDatesToVerboseHandler(props.monthGetter, \"renderMonth\")}, ${props.currentYear}`;\n            break;\n        default:\n            agendaTitles = null;\n    }\n    let style;\n    if(props.currentDay !== '' && props.appViewMode === \"DayMode\") {\n        style = {fontSize: \"1.8rem\", marginBottom: \"10px\", zIndex: '999'};\n    }\n    if(props.appViewMode === \"CalendarMode\" && props.calendarViewType === 'SimpleCalendar') {\n        style = {textAlign: \"center\"}\n    }\n    return (\n        <div className={classes.AgendaTitlesDisplay} style={style}>\n            {agendaTitles}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}