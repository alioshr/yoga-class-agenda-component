{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js\";\nimport React from 'react';\nimport SideTab from \"../../../Components/SideTab/SideTab\";\nimport TimeTables from \"../../../Components/TimeTables/TimeTables\";\nimport WeekDayCard from \"./WeekDayCard/WeekDayCard\";\nimport EventCard from \"../../../Components/EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../Components/EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/Transition\";\nexport default function WeekMode(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimeTables, {\n    currAgendaData: props.currentWeek,\n    appViewMode: props.appViewMode,\n    dayCardContainerWidth: props.layoutWidthDimensions.dayCardContainerWidth,\n    style: {\n      color: \"black\",\n      border: \"none\",\n      boxShadow: \"none\",\n      borderRadius: \"0\"\n    },\n    tableOfAvailableHours: props.arrayOfDailyHoursTable,\n    agendaInitialAvailableHour: props.agendaInitialAvailableHour,\n    agendaLastAvailableHour: props.agendaLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  })), props.currentWeek.map(day => {\n    return /*#__PURE__*/React.createElement(WeekDayCard, {\n      callbackDayCardContainerDimensions: props.callbackDayCardContainerDimensions,\n      monthGetter: props.monthGetter,\n      key: day,\n      today: day,\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TimeTables, {\n      tableOfAvailableHours: props.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }\n    }), props.dataToBeRendered.map(cl => {\n      if (cl.classDate === day) {\n        return /*#__PURE__*/React.createElement(EventCard, {\n          currDay: day,\n          classDate: cl.classDate,\n          classTitle: cl.classTitle,\n          classLocation: cl.location,\n          classDuration: cl.duration,\n          classTime: cl.classTime,\n          classInitialAvailableHour: props.agendaInitialAvailableHour,\n          key: cl.id,\n          displayFullEventCard: props.displayDialogBoxHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 37\n          }\n        });\n      }\n\n      return (\n        /*#__PURE__*/\n\n        /*must check this in the future - should not render all items but just one card at a time*/\n        React.createElement(Transition, {\n          key: cl.id,\n          timeout: 500,\n          in: day === props.dialogBoxData.displayDialogBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 33\n          }\n        }, state => {\n          let animation = {\n            transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n            opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0,\n            zIndex: state === \"entering\" ? 101 : state === \"entered\" ? 101 : state === \"exiting\" ? 96 : -100\n          };\n          return /*#__PURE__*/React.createElement(EventDialogBox, {\n            animation: animation,\n            today: day,\n            displayDialogBox: props.dialogBoxData.displayDialogBox,\n            dimsFromLayoutWidth: props.layoutWidthDimensions.width,\n            calculateCardTopPositioning: props.dialogBoxData.topPositionFromClassCard,\n            calculateCardHeigthPositioning: props.dialogBoxData.heigthPositionFromClassCard,\n            classInitialAvailableHour: props.agendaInitialAvailableHour,\n            classLastAvailableHour: props.agendaLastAvailableHour,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 45\n            }\n          }, /*#__PURE__*/React.createElement(FullEventCard, {\n            fullClassData: props.dataToBeRendered,\n            currentDay: day,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 49\n            }\n          }));\n        })\n      );\n    })));\n  }), /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js"],"names":["React","SideTab","TimeTables","WeekDayCard","EventCard","EventDialogBox","FullEventCard","Transition","WeekMode","props","display","flexDirection","width","currentWeek","appViewMode","layoutWidthDimensions","dayCardContainerWidth","color","border","boxShadow","borderRadius","arrayOfDailyHoursTable","agendaInitialAvailableHour","agendaLastAvailableHour","map","day","callbackDayCardContainerDimensions","monthGetter","newDatesToVerboseHandler","position","dataToBeRendered","cl","classDate","classTitle","location","duration","classTime","id","displayDialogBoxHandler","dialogBoxData","displayDialogBox","state","animation","transition","opacity","zIndex","topPositionFromClassCard","heigthPositionFromClassCard"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SideTab from \"../../../Components/SideTab/SideTab\";\nimport TimeTables from \"../../../Components/TimeTables/TimeTables\";\nimport WeekDayCard from \"./WeekDayCard/WeekDayCard\";\nimport EventCard from \"../../../Components/EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../Components/EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/Transition\";\n\n\nexport default function WeekMode(props) {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            <SideTab>\n                <TimeTables currAgendaData={props.currentWeek}\n                            appViewMode={props.appViewMode}\n                            dayCardContainerWidth={props.layoutWidthDimensions.dayCardContainerWidth}\n                            style={{ color: \"black\", border: \"none\", boxShadow: \"none\",  borderRadius: \"0\" }}\n                            tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                            agendaInitialAvailableHour={props.agendaInitialAvailableHour}\n                            agendaLastAvailableHour={props.agendaLastAvailableHour}\n                />\n            </SideTab>\n            {props.currentWeek.map(day => {\n                return (\n                    <WeekDayCard callbackDayCardContainerDimensions={props.callbackDayCardContainerDimensions}\n                                 monthGetter={props.monthGetter}\n                                 key={day}\n                                 today={day}\n                                 newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                    >\n                        <div style={{position: \"relative\"}}>\n                        <TimeTables tableOfAvailableHours={props.arrayOfDailyHoursTable}/>\n                        {props.dataToBeRendered.map(cl => {\n                            if (cl.classDate === day) {\n                                return (\n                                    <EventCard currDay={day}\n                                               classDate={cl.classDate}\n                                               classTitle={cl.classTitle}\n                                               classLocation={cl.location}\n                                               classDuration={cl.duration}\n                                               classTime={cl.classTime}\n                                               classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                               key={cl.id}\n                                               displayFullEventCard={props.displayDialogBoxHandler}\n                                    />\n                                );\n                            }\n                            return (\n                                /*must check this in the future - should not render all items but just one card at a time*/\n                                <Transition key={cl.id} timeout={500} in={day === props.dialogBoxData.displayDialogBox}>\n                                    {state => {\n                                        let animation = {\n                                            transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n                                            opacity:\n                                                state === \"entering\"\n                                                    ? 1\n                                                    : state === \"entered\"\n                                                    ? 1\n                                                    : state === \"exited\"\n                                                        ? 0\n                                                        : 0,\n                                            zIndex:\n                                                state === \"entering\"\n                                                    ? 101\n                                                    : state === \"entered\"\n                                                    ? 101\n                                                    : state === \"exiting\"\n                                                        ? 96\n                                                        :  -100\n                                        };\n                                        return (\n                                            <EventDialogBox animation={animation}\n                                                            today={day}\n                                                            displayDialogBox={props.dialogBoxData.displayDialogBox}\n                                                            dimsFromLayoutWidth={props.layoutWidthDimensions.width}\n                                                            calculateCardTopPositioning={props.dialogBoxData.topPositionFromClassCard}\n                                                            calculateCardHeigthPositioning={props.dialogBoxData.heigthPositionFromClassCard}\n                                                            classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                                            classLastAvailableHour={props.agendaLastAvailableHour}\n                                            >\n                                                {/*gotta change this later, as there will be <CreateClass/> and others in here*/}\n                                                <FullEventCard fullClassData={props.dataToBeRendered}\n                                                               currentDay={day}/>\n                                            </EventDialogBox>\n                                        );\n                                    }}\n                                </Transition>\n                            );\n                        })}\n                        </div>\n                    </WeekDayCard>\n                );\n            })}\n            <SideTab />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}