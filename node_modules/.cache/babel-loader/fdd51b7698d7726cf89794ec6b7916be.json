{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js\";\nimport React from 'react';\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport WeekDayCard from \"./WeekDayCard/WeekDayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/Transition\";\nexport default function WeekMode(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimeTables, {\n    style: {\n      color: \"black\",\n      border: \"none\"\n    },\n    tableOfAvailableHours: props.arrayOfDailyHoursTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  })), props.currentWeek.map(day => {\n    return /*#__PURE__*/React.createElement(WeekDayCard, {\n      monthGetter: props.monthGetter,\n      backdropIsActive: props.backdropIsActive,\n      key: day,\n      today: day,\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, props.backdropIsActive === \"cover all\" ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.displayDialogBoxHandler(day, props.dialogBoxData.topPositionFromClassCard, props.dialogBoxData.heigthPositionFromClassCard),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 29\n      }\n    }) : null, /*#__PURE__*/React.createElement(TimeTables, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(day),\n      tableOfAvailableHours: props.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }\n    }), props.backdropIsActive === day ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(\"false\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      ButtonText: \"Create a New Class\",\n      buttonClicked: () => props.displayDialogBoxHandler(day) //will open a dialog box in the future\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 33\n      }\n    })) : null, props.dataToBeRendered.map(cl => {\n      if (cl.classDate === day) {\n        return /*#__PURE__*/React.createElement(EventCard, {\n          zIndexIFClicked: props.dialogBoxData.displayDialogBox,\n          currDay: day,\n          classDate: cl.classDate,\n          classTitle: cl.classTitle,\n          classLocation: cl.location,\n          classDuration: cl.duration,\n          classTime: cl.classTime,\n          classInitialAvailableHour: props.agendaInitialAvailableHour,\n          key: cl.id,\n          displayFullEventCard: props.displayDialogBoxHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 37\n          }\n        });\n      }\n\n      return (\n        /*#__PURE__*/\n\n        /*must check this in the future - should not render all items but just one card at a time*/\n        React.createElement(Transition, {\n          key: cl.id,\n          timeout: 500,\n          in: day === props.dialogBoxData.displayDialogBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }\n        }, state => {\n          let animation = {\n            transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n            opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0,\n            zIndex: state === \"entering\" ? 101 : state === \"entered\" ? 101 : state === \"exiting\" ? 96 : -100\n          };\n          return /*#__PURE__*/React.createElement(EventDialogBox, {\n            animation: animation,\n            today: day,\n            displayDialogBox: props.dialogBoxData.displayDialogBox,\n            dimsFromLayoutWidth: props.layoutWidthDimensions.width,\n            calculateCardTopPositioning: props.dialogBoxData.topPositionFromClassCard,\n            calculateCardHeigthPositioning: props.dialogBoxData.heigthPositionFromClassCard,\n            classInitialAvailableHour: props.agendaInitialAvailableHour,\n            classLastAvailableHour: props.agendaLastAvailableHour,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 45\n            }\n          }, /*#__PURE__*/React.createElement(FullEventCard, {\n            fullClassData: props.dataToBeRendered,\n            currentDay: day,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 49\n            }\n          }));\n        })\n      );\n    }));\n  }), /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js"],"names":["React","SideTab","TimeTables","WeekDayCard","BackdropFilter","Button","EventCard","EventDialogBox","FullEventCard","Transition","WeekMode","props","display","flexDirection","width","color","border","arrayOfDailyHoursTable","currentWeek","map","day","monthGetter","backdropIsActive","newDatesToVerboseHandler","displayDialogBoxHandler","dialogBoxData","topPositionFromClassCard","heigthPositionFromClassCard","backdropDisplayHandler","dataToBeRendered","cl","classDate","displayDialogBox","classTitle","location","duration","classTime","agendaInitialAvailableHour","id","state","animation","transition","opacity","zIndex","layoutWidthDimensions","agendaLastAvailableHour"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport WeekDayCard from \"./WeekDayCard/WeekDayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/Transition\";\n\n\nexport default function WeekMode(props) {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            <SideTab>\n                <TimeTables\n                    style={{ color: \"black\", border: \"none\" }}\n                    tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                />\n            </SideTab>\n            {props.currentWeek.map(day => {\n                return (\n                    <WeekDayCard\n                        monthGetter={props.monthGetter}\n                        backdropIsActive={props.backdropIsActive}\n                        key={day}\n                        today={day}\n                        newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                    >\n                        {props.backdropIsActive === \"cover all\" ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.displayDialogBoxHandler(day, props.dialogBoxData.topPositionFromClassCard, props.dialogBoxData.heigthPositionFromClassCard)}\n                            />\n                        ) : null}\n                        <TimeTables\n                            backdropDisplayHandler={() => props.backdropDisplayHandler(day)}\n                            tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                        />\n                        {props.backdropIsActive === day ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.backdropDisplayHandler(\"false\")}\n                            >\n                                <Button\n                                    ButtonText=\"Create a New Class\"\n                                    buttonClicked={() => props.displayDialogBoxHandler(day)} //will open a dialog box in the future\n                                />\n                            </BackdropFilter>\n                        ) : null}\n                        {props.dataToBeRendered.map(cl => {\n                            if (cl.classDate === day) {\n                                return (\n                                    <EventCard\n                                        zIndexIFClicked={props.dialogBoxData.displayDialogBox}\n                                        currDay={day}\n                                        classDate={cl.classDate}\n                                        classTitle={cl.classTitle}\n                                        classLocation={cl.location}\n                                        classDuration={cl.duration}\n                                        classTime={cl.classTime}\n                                        classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                        key={cl.id}\n                                        displayFullEventCard={props.displayDialogBoxHandler}\n                                    />\n                                );\n                            }\n                            return (\n                                /*must check this in the future - should not render all items but just one card at a time*/\n                                <Transition key={cl.id} timeout={500} in={day === props.dialogBoxData.displayDialogBox}>\n                                    {state => {\n                                        let animation = {\n                                            transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n                                            opacity:\n                                                state === \"entering\"\n                                                    ? 1\n                                                    : state === \"entered\"\n                                                    ? 1\n                                                    : state === \"exited\"\n                                                        ? 0\n                                                        : 0,\n                                            zIndex:\n                                                state === \"entering\"\n                                                    ? 101\n                                                    : state === \"entered\"\n                                                    ? 101\n                                                    : state === \"exiting\"\n                                                        ? 96\n                                                        :  -100\n                                        };\n                                        return (\n                                            <EventDialogBox\n                                                animation={animation}\n                                                today={day}\n                                                displayDialogBox={props.dialogBoxData.displayDialogBox}\n                                                dimsFromLayoutWidth={props.layoutWidthDimensions.width}\n                                                calculateCardTopPositioning={props.dialogBoxData.topPositionFromClassCard}\n                                                calculateCardHeigthPositioning={props.dialogBoxData.heigthPositionFromClassCard}\n                                                classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                                classLastAvailableHour={props.agendaLastAvailableHour}\n                                            >\n                                                {/*gotta change this later, as there will be <CreateClass/> and others in here*/}\n                                                <FullEventCard\n                                                    fullClassData={props.dataToBeRendered}\n                                                    currentDay={day}/>\n                                            </EventDialogBox>\n                                        );\n                                    }}\n                                </Transition>\n\n                            );\n                        })}\n                    </WeekDayCard>\n                );\n            })}\n            <SideTab />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}