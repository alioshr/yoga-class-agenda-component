{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: \"\",\n      currentWeek: [],\n      testWeek: [],\n      currentMonth: [],\n      monthGetter: new Date().getMonth(),\n      yearGetter: new Date().getFullYear(),\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.calendarLogicHandler();\n      this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.weekAgendaLogicHandler = () => {\n      let currentWeek = this.state.currentMonth.filter(week => week.includes(new Date().setHours(0, 0, 0, 0))).flat();\n      this.setState({\n        currentWeek\n      }, () => console.log(this.state.currentWeek));\n    };\n\n    this.weekAgendaNavigationHandler = modal => {\n      const currWeekIndex = this.state.currentMonth.map((week, index) => week.includes(Math.min(...this.state.currentWeek)) ? index : null).filter(index => index !== null);\n      const oneDay = 86400000;\n\n      if (modal === \"increment\") {\n        let currentWeek = this.state.currentMonth[parseInt(currWeekIndex + 1, 10)];\n        this.setState({\n          currentWeek\n        }, () => console.log(this.state.currentWeek));\n      }\n\n      if (modal === \"decrement\") {\n        let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n          currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n        }\n\n        if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.calendarLogicHandler = () => {\n      const oneDay = 86400000;\n      const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n      let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n\n      for (let i = 1; i < lastDayOfTheMonth; i++) {\n        //push the entire month\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      } //localize the first date of the month dates array and check what day of the week it is\n      //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n\n\n      for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n        currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n      } //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n\n\n      for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      }\n\n      let monthInWeeks = [];\n\n      for (let i = 0; i < currentMonth.length; i += 7) {\n        let chunk = currentMonth.slice(i, i + 7);\n        monthInWeeks.push(chunk);\n      }\n\n      currentMonth = monthInWeeks;\n      this.setState({\n        currentMonth\n      });\n    };\n\n    this.calendarNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        if (this.state.monthGetter < 11) {\n          //just add months, before changing the year\n          this.setState((_ref) => {\n            let monthGetter = _ref.monthGetter,\n                restTop = _objectWithoutProperties(_ref, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter >= 11) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref2) => {\n            let yearGetter = _ref2.yearGetter,\n                monthGetter = _ref2.monthGetter,\n                restTop = _objectWithoutProperties(_ref2, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter + 1,\n              monthGetter: 0\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n        if (this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState((_ref3) => {\n            let monthGetter = _ref3.monthGetter,\n                restTop = _objectWithoutProperties(_ref3, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter - 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter <= 0) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref4) => {\n            let yearGetter = _ref4.yearGetter,\n                monthGetter = _ref4.monthGetter,\n                restTop = _objectWithoutProperties(_ref4, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter - 1,\n              monthGetter: 11\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n    };\n\n    this.appNavigationHandler = modal => {\n      if (this.state.appViewMode === \"WeekMode\" || this.props.defaultMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\" || this.props.defaultMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal);\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.getDay();\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.getMonth();\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 11:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.backdropDisplayHandler = day => {\n      this.setState((_ref5) => {\n        let backdropIsActive = _ref5.backdropIsActive,\n            dialogBoxData = _ref5.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref5, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref6) => {\n        let dialogBoxData = _ref6.dialogBoxData,\n            backdropIsActive = _ref6.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref6, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref7) => {\n        let layoutWidthDimensions = _ref7.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref7, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.currentMonth !== this.state.currentMonth) {\n      this.weekAgendaLogicHandler();\n    }\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = /*#__PURE__*/React.createElement(WeekMode, {\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      currentWeek: this.state.currentWeek,\n      backdropIsActive: this.state.backdropIsActive,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      displayDialogBoxHandler: this.displayDialogBoxHandler,\n      backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n      dialogBoxData: this.state.dialogBoxData,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      layoutWidthDimensions: this.state.layoutWidthDimensions,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    });\n    let calendarMode = /*#__PURE__*/React.createElement(CalendarMode, {\n      monthGetter: this.state.monthGetter,\n      currentMonth: this.state.currentMonth.flat(),\n      currentWeek: this.state.currentWeek,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }\n    });\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = weekMode;\n        break;\n\n      case 'CalendarMode':\n        viewMode = calendarMode;\n        break;\n\n      default:\n        switch (this.props.defaultMode) {\n          case \"CalendarMode\":\n            viewMode = calendarMode;\n            break;\n\n          case \"WeekMode\":\n            viewMode = weekMode;\n            break;\n\n          default:\n            alert(\"there is something wrong here!\");\n        }\n\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      defaultMode: this.props.defaultMode,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      currentMonth: this.state.monthGetter,\n      currentYear: this.state.yearGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","Agenda","Component","state","appViewMode","currentWeek","testWeek","currentMonth","monthGetter","Date","getMonth","yearGetter","getFullYear","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","componentDidMount","calendarLogicHandler","arrayOfTableRows","props","agendaInitialAvailableHour","agendaLastAvailableHour","startingHour","endingHour","i","push","Math","max","apply","setState","weekAgendaLogicHandler","filter","week","includes","setHours","flat","console","log","weekAgendaNavigationHandler","modal","currWeekIndex","map","index","min","oneDay","parseInt","getDay","unshift","valueOf","lastDayOfTheMonth","getDate","monthInWeeks","length","chunk","slice","calendarNavigationHandler","restTop","appNavigationHandler","defaultMode","newDatesToVerboseHandler","date","verboseType","renderWeekDay","renderMonth","backdropDisplayHandler","day","displayDialogBoxHandler","backdropIsActiv","callbackContainerDimensions","container","offsetWidth","viewModeHandler","componentDidUpdate","prevProps","prevState","snapshot","render","viewMode","weekMode","data","dataToBeRendered","calendarMode","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: \"\",\n    currentWeek: [],\n    testWeek: [],\n    currentMonth: [],\n    monthGetter: new Date().getMonth(),\n    yearGetter: new Date().getFullYear(),\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount = () => {\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n  };\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevState.currentMonth !== this.state.currentMonth) {\n      this.weekAgendaLogicHandler()\n    }\n  }\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  weekAgendaLogicHandler = () => {\n    let currentWeek = this.state.currentMonth.filter(week => week.includes(new Date().setHours(0,0,0,0))).flat();\n    this.setState({currentWeek}, () => console.log(this.state.currentWeek))\n  };\n\n  weekAgendaNavigationHandler = modal => {\n    const currWeekIndex = this.state.currentMonth.map((week, index) =>\n        week.includes(Math.min(...this.state.currentWeek)) ? index : null)\n        .filter(index => index !== null);\n\n\n    const oneDay = 86400000;\n    if (modal === \"increment\") {\n      let currentWeek = this.state.currentMonth[parseInt(currWeekIndex + 1,10)];\n\n      this.setState({currentWeek}, () => console.log(this.state.currentWeek));\n    }\n    if (modal === \"decrement\") {\n      let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n        currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n      }\n      if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n        this.setState({currentWeek});\n      }\n    }\n  };\n\n  calendarLogicHandler = () => {\n    const oneDay = 86400000;\n    const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n    let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n    for(let i = 1; i < lastDayOfTheMonth; i++) { //push the entire month\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    //localize the first date of the month dates array and check what day of the week it is\n    //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    let monthInWeeks = [];\n    for (let i = 0; i < currentMonth.length; i += 7 ) {\n      let chunk = currentMonth.slice(i, i+7 );\n      monthInWeeks.push(chunk)\n    }\n    currentMonth = monthInWeeks;\n    this.setState({currentMonth})\n  };\n\n  calendarNavigationHandler = modal => {\n    if(modal === \"increment\") {\n      if(this.state.monthGetter < 11) { //just add months, before changing the year\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter + 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter >= 11) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter + 1,\n          monthGetter: 0,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n    if (modal === \"decrement\") {\n      //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n      if(this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0,0,0,0).valueOf())) {\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter - 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter <= 0) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter - 1,\n          monthGetter: 11,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n    if(this.state.appViewMode === \"WeekMode\" || this.props.defaultMode === \"WeekMode\") {\n      this.weekAgendaNavigationHandler(modal)\n    }\n    if(this.state.appViewMode === \"CalendarMode\" || this.props.defaultMode === \"CalendarMode\") {\n      this.calendarNavigationHandler(modal)\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.getDay();\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth = date.getMonth();\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 11:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler = (day) => {\n    this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n      backdropIsActive: day,\n      dialogBoxData: {\n        displayDialogBox: false\n      },\n      ...restTop\n    }));\n  };\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  };\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = (\n        <WeekMode\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            currentWeek={this.state.currentWeek}\n            backdropIsActive={this.state.backdropIsActive}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            displayDialogBoxHandler={this.displayDialogBoxHandler}\n            backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n            dialogBoxData={this.state.dialogBoxData}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            layoutWidthDimensions={this.state.layoutWidthDimensions}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n        />\n    );\n    let calendarMode = (\n        <CalendarMode\n            monthGetter={this.state.monthGetter}\n            currentMonth={this.state.currentMonth.flat()}\n            currentWeek={this.state.currentWeek}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n    )\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = weekMode;\n        break;\n      case('CalendarMode') :\n        viewMode = calendarMode;\n        break;\n      default :\n        switch (this.props.defaultMode) {\n          case(\"CalendarMode\") :\n            viewMode = calendarMode;\n            break;\n          case(\"WeekMode\") :\n            viewMode = weekMode;\n            break;\n          default : alert(\"there is something wrong here!\")\n        }\n    }\n    return (\n        <Layout\n            defaultMode={this.props.defaultMode}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            currentMonth={this.state.monthGetter}\n            currentYear={this.state.yearGetter}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}