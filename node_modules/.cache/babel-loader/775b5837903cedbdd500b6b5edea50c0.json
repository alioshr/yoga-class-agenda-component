{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/DateCards.js/DateCards.js\";\nimport React, { useState } from 'react';\nimport classes from \"./DateCards.module.css\";\nimport MonthTeller from \"../../UI/MonthTeller/MonthTeller\";\nimport Transition from \"react-transition-group/cjs/Transition\";\nexport default function DateCards(props) {\n  //set the animation of the transition which displays the month of dates not related to the curr month\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        otherMonth = _useState2[0],\n        setOtherMonth = _useState2[1]; //sets the background color of the current day of the month\n\n\n  const dayOfTheCalendarEqualsToday = new Date(props.today).getDate() === new Date().getDate() && new Date(props.today).getMonth() === new Date().getMonth();\n  const dayOfTheCalendarEqualsCurrDayOfDayMode = new Date(props.today).getDate() === new Date(props.currentDay).getDate() && new Date(props.today).getMonth() === new Date(props.currentDay).getMonth();\n  let todayStyle;\n\n  if (props.calendarViewType === \"SimpleCalendar\" && dayOfTheCalendarEqualsCurrDayOfDayMode && !dayOfTheCalendarEqualsToday) {\n    todayStyle = {\n      backgroundColor: \"gray\",\n      color: \"white\"\n    };\n  }\n\n  if (props.calendarViewType === \"SimpleCalendar\" && dayOfTheCalendarEqualsCurrDayOfDayMode && dayOfTheCalendarEqualsToday) {\n    todayStyle = {\n      backgroundColor: \"inherit\",\n      color: \"#f56157\"\n    };\n  }\n\n  if (props.calendarViewType !== \"SimpleCalendar\" && dayOfTheCalendarEqualsToday) todayStyle = {\n    backgroundColor: \"#f56157\",\n    color: \"white\"\n  };\n  const currentMonthDateDifferentFromCurrentMonth = new Date(props.today).getMonth() !== props.monthGetter;\n  let borderConfig = \"1px solid black\";\n  let fullCalendarStyle = {};\n  let fullCalendarInnerStyle = {};\n  let nonMonthDates = {};\n\n  if (props.calendarViewType === \"FullCalendar\" && props.appViewMode === \"CalendarMode\") {\n    fullCalendarInnerStyle = {\n      position: \"absolute\",\n      right: \"5px\",\n      top: \"5px\",\n      fontSize: \"17px\",\n      padding: \"5px\"\n    };\n    fullCalendarStyle = {\n      borderRight: borderConfig,\n      borderBottom: borderConfig,\n      height: \"100px\"\n    };\n\n    if (props.cardDayIndex === 0) {\n      Object.assign(fullCalendarStyle, {\n        borderLeft: borderConfig\n      });\n    }\n\n    if (props.cardDatesInnerIndex === 0) {\n      Object.assign(fullCalendarStyle, {\n        borderTop: borderConfig\n      });\n    }\n\n    if (currentMonthDateDifferentFromCurrentMonth) {\n      Object.assign(fullCalendarStyle, {\n        backgroundColor: \"#F2F2F2\"\n      });\n    }\n  }\n\n  if (currentMonthDateDifferentFromCurrentMonth) {\n    nonMonthDates = {\n      color: 'grey'\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.DateWrapper,\n    style: fullCalendarStyle,\n    onMouseEnter: () => setOtherMonth(true),\n    onMouseLeave: () => setOtherMonth(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Transition, {\n    in: otherMonth && currentMonthDateDifferentFromCurrentMonth && props.calendarViewType === \"FullCalendar\",\n    timeout: 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, state => {\n    let animation = {\n      transition: \"opacity .5s ease-out\",\n      opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0\n    };\n    let innerAnimation = {\n      transition: \"width .5s ease-out\",\n      width: state === \"entering\" ? \"100%\" : state === \"entered\" ? \"100%\" : state === \"exited\" ? 0 : 0\n    };\n    return /*#__PURE__*/React.createElement(MonthTeller, {\n      monthGetter: new Date(props.today).getMonth(),\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      style: animation,\n      innerStyle: innerAnimation,\n      calendarViewType: props.calendarViewType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Day,\n    style: Object.assign(nonMonthDates, todayStyle, fullCalendarInnerStyle, props.smallCalendarOnDayMode),\n    onClick: () => props.appViewMode === 'CalendarMode' ? props.liftClickedDate(props.today) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, new Date(props.today).getDate()));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/DateCards.js/DateCards.js"],"names":["React","useState","classes","MonthTeller","Transition","DateCards","props","otherMonth","setOtherMonth","dayOfTheCalendarEqualsToday","Date","today","getDate","getMonth","dayOfTheCalendarEqualsCurrDayOfDayMode","currentDay","todayStyle","calendarViewType","backgroundColor","color","currentMonthDateDifferentFromCurrentMonth","monthGetter","borderConfig","fullCalendarStyle","fullCalendarInnerStyle","nonMonthDates","appViewMode","position","right","top","fontSize","padding","borderRight","borderBottom","height","cardDayIndex","Object","assign","borderLeft","cardDatesInnerIndex","borderTop","DateWrapper","state","animation","transition","opacity","innerAnimation","width","newDatesToVerboseHandler","Day","smallCalendarOnDayMode","liftClickedDate"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACrC;AADqC,oBAEDL,QAAQ,CAAC,KAAD,CAFP;AAAA;AAAA,QAE9BM,UAF8B;AAAA,QAElBC,aAFkB,kBAGrC;;;AACA,QAAMC,2BAA2B,GAAG,IAAIC,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBC,OAAtB,OAAoC,IAAIF,IAAJ,GAAWE,OAAX,EAApC,IAChC,IAAIF,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBE,QAAtB,OAAqC,IAAIH,IAAJ,GAAWG,QAAX,EADzC;AAEA,QAAMC,sCAAsC,GAAG,IAAIJ,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBC,OAAtB,OAAoC,IAAIF,IAAJ,CAASJ,KAAK,CAACS,UAAf,EAA2BH,OAA3B,EAApC,IAC3C,IAAIF,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBE,QAAtB,OAAqC,IAAIH,IAAJ,CAASJ,KAAK,CAACS,UAAf,EAA2BF,QAA3B,EADzC;AAEA,MAAIG,UAAJ;;AACA,MAAGV,KAAK,CAACW,gBAAN,KAA2B,gBAA3B,IAA+CH,sCAA/C,IAAyF,CAACL,2BAA7F,EAA2H;AACvHO,IAAAA,UAAU,GAAG;AAAEE,MAAAA,eAAe,EAAE,MAAnB;AAA2BC,MAAAA,KAAK,EAAE;AAAlC,KAAb;AACH;;AACD,MAAGb,KAAK,CAACW,gBAAN,KAA2B,gBAA3B,IAA+CH,sCAA/C,IAAyFL,2BAA5F,EAAyH;AACrHO,IAAAA,UAAU,GAAG;AAAEE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,KAAK,EAAE;AAArC,KAAb;AACH;;AACD,MAAIb,KAAK,CAACW,gBAAN,KAA2B,gBAA3B,IAA+CR,2BAAnD,EAAgFO,UAAU,GAAG;AAAEE,IAAAA,eAAe,EAAE,SAAnB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GAAb;AAChF,QAAMC,yCAAyC,GAAG,IAAIV,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBE,QAAtB,OAAqCP,KAAK,CAACe,WAA7F;AACA,MAAIC,YAAY,GAAG,iBAAnB;AACA,MAAIC,iBAAiB,GAAG,EAAxB;AACA,MAAIC,sBAAsB,GAAG,EAA7B;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,MAAGnB,KAAK,CAACW,gBAAN,KAA2B,cAA3B,IAA6CX,KAAK,CAACoB,WAAN,KAAsB,cAAtE,EAAsF;AAClFF,IAAAA,sBAAsB,GAAG;AAACG,MAAAA,QAAQ,EAAE,UAAX;AAAuBC,MAAAA,KAAK,EAAE,KAA9B;AAAqCC,MAAAA,GAAG,EAAE,KAA1C;AAAiDC,MAAAA,QAAQ,EAAE,MAA3D;AAAmEC,MAAAA,OAAO,EAAE;AAA5E,KAAzB;AACAR,IAAAA,iBAAiB,GAAG;AAACS,MAAAA,WAAW,EAAEV,YAAd;AAA4BW,MAAAA,YAAY,EAAEX,YAA1C;AAAwDY,MAAAA,MAAM,EAAE;AAAhE,KAApB;;AACA,QAAG5B,KAAK,CAAC6B,YAAN,KAAuB,CAA1B,EAA6B;AACzBC,MAAAA,MAAM,CAACC,MAAP,CAAcd,iBAAd,EAAiC;AAACe,QAAAA,UAAU,EAAEhB;AAAb,OAAjC;AACH;;AACD,QAAGhB,KAAK,CAACiC,mBAAN,KAA8B,CAAjC,EAAoC;AAChCH,MAAAA,MAAM,CAACC,MAAP,CAAcd,iBAAd,EAAiC;AAACiB,QAAAA,SAAS,EAAElB;AAAZ,OAAjC;AACH;;AACD,QAAGF,yCAAH,EAA6C;AACzCgB,MAAAA,MAAM,CAACC,MAAP,CAAcd,iBAAd,EAAgC;AAACL,QAAAA,eAAe,EAAE;AAAlB,OAAhC;AACH;AACJ;;AACD,MAAGE,yCAAH,EAA6C;AACzCK,IAAAA,aAAa,GAAG;AAACN,MAAAA,KAAK,EAAE;AAAR,KAAhB;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAEjB,OAAO,CAACuC,WAAxB;AACK,IAAA,KAAK,EAAElB,iBADZ;AAEK,IAAA,YAAY,EAAE,MAAMf,aAAa,CAAC,IAAD,CAFtC;AAGK,IAAA,YAAY,EAAE,MAAMA,aAAa,CAAC,KAAD,CAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAED,UAAU,IAAIa,yCAAd,IAA2Dd,KAAK,CAACW,gBAAN,KAA2B,cAAtG;AAAsH,IAAA,OAAO,EAAE,IAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKyB,KAAK,IAAI;AACN,QAAIC,SAAS,GAAG;AACZC,MAAAA,UAAU,EAAE,sBADA;AAEZC,MAAAA,OAAO,EACHH,KAAK,KAAK,UAAV,GACM,CADN,GAEMA,KAAK,KAAK,SAAV,GACA,CADA,GAEAA,KAAK,KAAK,QAAV,GACI,CADJ,GAEI;AATF,KAAhB;AAWA,QAAII,cAAc,GAAG;AACjBF,MAAAA,UAAU,EAAE,oBADK;AAEjBG,MAAAA,KAAK,EACDL,KAAK,KAAK,UAAV,GACM,MADN,GAEMA,KAAK,KAAK,SAAV,GACA,MADA,GAEAA,KAAK,KAAK,QAAV,GACI,CADJ,GAEI;AATG,KAArB;AAWA,wBACI,oBAAC,WAAD;AAAa,MAAA,WAAW,EAAE,IAAIhC,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBE,QAAtB,EAA1B;AACa,MAAA,wBAAwB,EAAEP,KAAK,CAAC0C,wBAD7C;AAEa,MAAA,KAAK,EAAEL,SAFpB;AAGa,MAAA,UAAU,EAAEG,cAHzB;AAIa,MAAA,gBAAgB,EAAExC,KAAK,CAACW,gBAJrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH,GA/BL,CAJJ,eAqCI;AAAK,IAAA,SAAS,EAAEf,OAAO,CAAC+C,GAAxB;AACK,IAAA,KAAK,EAAEb,MAAM,CAACC,MAAP,CAAcZ,aAAd,EAA4BT,UAA5B,EAAwCQ,sBAAxC,EAAgElB,KAAK,CAAC4C,sBAAtE,CADZ;AAEK,IAAA,OAAO,EAAE,MAAM5C,KAAK,CAACoB,WAAN,KAAsB,cAAtB,GAAuCpB,KAAK,CAAC6C,eAAN,CAAsB7C,KAAK,CAACK,KAA5B,CAAvC,GAA4E,IAFhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGK,IAAID,IAAJ,CAASJ,KAAK,CAACK,KAAf,EAAsBC,OAAtB,EAHL,CArCJ,CADJ;AA6CH","sourcesContent":["import React, {useState} from 'react'\nimport classes from \"./DateCards.module.css\";\nimport MonthTeller from \"../../UI/MonthTeller/MonthTeller\";\nimport Transition from \"react-transition-group/cjs/Transition\";\n\nexport default function DateCards(props) {\n    //set the animation of the transition which displays the month of dates not related to the curr month\n    const [otherMonth, setOtherMonth] = useState(false);\n    //sets the background color of the current day of the month\n    const dayOfTheCalendarEqualsToday = new Date(props.today).getDate() === new Date().getDate() &&\n        new Date(props.today).getMonth() === new Date().getMonth();\n    const dayOfTheCalendarEqualsCurrDayOfDayMode = new Date(props.today).getDate() === new Date(props.currentDay).getDate() &&\n        new Date(props.today).getMonth() === new Date(props.currentDay).getMonth();\n    let todayStyle;\n    if(props.calendarViewType === \"SimpleCalendar\" && dayOfTheCalendarEqualsCurrDayOfDayMode && !dayOfTheCalendarEqualsToday ) {\n        todayStyle = { backgroundColor: \"gray\", color: \"white\" };\n    }\n    if(props.calendarViewType === \"SimpleCalendar\" && dayOfTheCalendarEqualsCurrDayOfDayMode && dayOfTheCalendarEqualsToday) {\n        todayStyle = { backgroundColor: \"inherit\", color: \"#f56157\" };\n    }\n    if (props.calendarViewType !== \"SimpleCalendar\" && dayOfTheCalendarEqualsToday) todayStyle = { backgroundColor: \"#f56157\", color: \"white\" };\n    const currentMonthDateDifferentFromCurrentMonth = new Date(props.today).getMonth() !== props.monthGetter;\n    let borderConfig = \"1px solid black\";\n    let fullCalendarStyle = {};\n    let fullCalendarInnerStyle = {};\n    let nonMonthDates = {};\n    if(props.calendarViewType === \"FullCalendar\" && props.appViewMode === \"CalendarMode\") {\n        fullCalendarInnerStyle = {position: \"absolute\", right: \"5px\", top: \"5px\", fontSize: \"17px\", padding: \"5px\"};\n        fullCalendarStyle = {borderRight: borderConfig, borderBottom: borderConfig, height: \"100px\"};\n        if(props.cardDayIndex === 0) {\n            Object.assign(fullCalendarStyle, {borderLeft: borderConfig});\n        }\n        if(props.cardDatesInnerIndex === 0) {\n            Object.assign(fullCalendarStyle, {borderTop: borderConfig})\n        }\n        if(currentMonthDateDifferentFromCurrentMonth){\n            Object.assign(fullCalendarStyle,{backgroundColor: \"#F2F2F2\"});\n        }\n    }\n    if(currentMonthDateDifferentFromCurrentMonth){\n        nonMonthDates = {color: 'grey'};\n    }\n    return(\n        <div className={classes.DateWrapper}\n             style={fullCalendarStyle}\n             onMouseEnter={() => setOtherMonth(true)}\n             onMouseLeave={() => setOtherMonth(false)}>\n            <Transition in={otherMonth && currentMonthDateDifferentFromCurrentMonth && props.calendarViewType === \"FullCalendar\"} timeout={1000}>\n                {state => {\n                    let animation = {\n                        transition: \"opacity .5s ease-out\",\n                        opacity:\n                            state === \"entering\"\n                                ? 1\n                                : state === \"entered\"\n                                ? 1\n                                : state === \"exited\"\n                                    ? 0\n                                    : 0\n                    };\n                    let innerAnimation = {\n                        transition: \"width .5s ease-out\",\n                        width:\n                            state === \"entering\"\n                                ? \"100%\"\n                                : state === \"entered\"\n                                ? \"100%\"\n                                : state === \"exited\"\n                                    ? 0\n                                    : 0\n                    };\n                    return (\n                        <MonthTeller monthGetter={new Date(props.today).getMonth()}\n                                     newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                                     style={animation}\n                                     innerStyle={innerAnimation}\n                                     calendarViewType={props.calendarViewType}/>\n                    )\n                }}\n            </Transition>\n            <div className={classes.Day}\n                 style={Object.assign(nonMonthDates,todayStyle, fullCalendarInnerStyle, props.smallCalendarOnDayMode)}\n                 onClick={() => props.appViewMode === 'CalendarMode' ? props.liftClickedDate(props.today) : null}>\n                {new Date(props.today).getDate()}\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}