{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js\";\nimport React from 'react';\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport DayCard from \"../../../DayCard/DayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/CSSTransition\";\nexport default function WeekMode(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimeTables, {\n    style: {\n      color: \"black\",\n      border: \"none\"\n    },\n    tableOfAvailableHours: props.arrayOfDailyHoursTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  })), props.currentWeek.map(day => {\n    return /*#__PURE__*/React.createElement(DayCard, {\n      backdropIsActive: props.backdropIsActive,\n      key: day,\n      today: day,\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, props.backdropIsActive === \"cover all\" ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.displayDialogBoxHandler(day),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 29\n      }\n    }) : null, /*#__PURE__*/React.createElement(TimeTables, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(day),\n      tableOfAvailableHours: props.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }\n    }), props.backdropIsActive === day ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(\"false\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      ButtonText: \"Create a New Class\",\n      buttonClicked: () => props.displayDialogBoxHandler(day) //will open a dialog box in the future\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 33\n      }\n    })) : null, props.dataToBeRendered.map(cl => {\n      return /*#__PURE__*/React.createElement(EventCard, {\n        zIndexIFClicked: props.dialogBoxData.displayDialogBox,\n        currDay: day,\n        classDate: cl.classDate,\n        classTitle: cl.classTitle,\n        classLocation: cl.location,\n        classDuration: cl.duration,\n        classTime: cl.classTime,\n        classInitialAvailableHour: props.agendaInitialAvailableHour,\n        key: cl.id,\n        displayFullEventCard: props.displayDialogBoxHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 38\n        }\n      });\n    }), /*#__PURE__*/React.createElement(Transition, {\n      timeout: 500,\n      in: \"test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, state => {\n      let animation = {\n        transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n        opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0,\n        zIndex: state === \"entering\" ? 101 : state === \"entered\" ? 101 : state === \"exiting\" ? 96 : state === \"exited\" ? -100 : -100\n      };\n      return /*#__PURE__*/React.createElement(EventDialogBox, {\n        styled: animation,\n        today: day,\n        displayDialogBox: props.dialogBoxData.displayDialogBox,\n        dimsFromLayoutWidth: props.layoutWidthDimensions.width,\n        calculateCardTopPositioning: props.dialogBoxData.topPositionFromClassCard,\n        calculateCardHeigthPositioning: props.dialogBoxData.heigthPositionFromClassCard,\n        classInitialAvailableHour: props.agendaInitialAvailableHour,\n        classLastAvailableHour: props.agendaLastAvailableHour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FullEventCard, {\n        fullClassData: props.dataToBeRendered,\n        currentDay: day,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 41\n        }\n      }));\n    }));\n  }), \"a\", /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js"],"names":["React","SideTab","TimeTables","DayCard","BackdropFilter","Button","EventCard","EventDialogBox","FullEventCard","Transition","WeekMode","props","display","flexDirection","width","color","border","arrayOfDailyHoursTable","currentWeek","map","day","backdropIsActive","newDatesToVerboseHandler","displayDialogBoxHandler","backdropDisplayHandler","dataToBeRendered","cl","dialogBoxData","displayDialogBox","classDate","classTitle","location","duration","classTime","agendaInitialAvailableHour","id","state","animation","transition","opacity","zIndex","layoutWidthDimensions","topPositionFromClassCard","heigthPositionFromClassCard","agendaLastAvailableHour"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport DayCard from \"../../../DayCard/DayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/CSSTransition\";\n\n\nexport default function WeekMode(props) {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            <SideTab>\n                <TimeTables\n                    style={{ color: \"black\", border: \"none\" }}\n                    tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                />\n            </SideTab>\n            {props.currentWeek.map(day => {\n                return (\n                    <DayCard\n                        backdropIsActive={props.backdropIsActive}\n                        key={day}\n                        today={day}\n                        newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                    >\n                        {props.backdropIsActive === \"cover all\" ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.displayDialogBoxHandler(day)}\n                            />\n                        ) : null}\n                        <TimeTables\n                            backdropDisplayHandler={() => props.backdropDisplayHandler(day)}\n                            tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                        />\n                        {props.backdropIsActive === day ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.backdropDisplayHandler(\"false\")}\n                            >\n                                <Button\n                                    ButtonText=\"Create a New Class\"\n                                    buttonClicked={() => props.displayDialogBoxHandler(day)} //will open a dialog box in the future\n                                />\n                            </BackdropFilter>\n                        ) : null}\n                        {props.dataToBeRendered.map(cl => {\n                            return   <EventCard\n                                zIndexIFClicked={props.dialogBoxData.displayDialogBox}\n                                currDay={day}\n                                classDate={cl.classDate}\n                                classTitle={cl.classTitle}\n                                classLocation={cl.location}\n                                classDuration={cl.duration}\n                                classTime={cl.classTime}\n                                classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                key={cl.id}\n                                displayFullEventCard={props.displayDialogBoxHandler}\n                            />\n                        })}\n                        <Transition timeout={500} in={\"test\"}>\n                            {state => {\n                                let animation = {\n                                    transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n                                    opacity:\n                                        state === \"entering\"\n                                            ? 1\n                                            : state === \"entered\"\n                                            ? 1\n                                            : state === \"exited\"\n                                                ? 0\n                                                : 0,\n                                    zIndex:\n                                        state === \"entering\"\n                                            ? 101\n                                            : state === \"entered\"\n                                            ? 101\n                                            : state === \"exiting\"\n                                                ? 96\n                                                : state === \"exited\"\n                                                    ? -100\n                                                    : -100\n                                };\n                                return (\n                                    <EventDialogBox\n                                        styled={animation}\n                                        today={day}\n                                        displayDialogBox={props.dialogBoxData.displayDialogBox}\n                                        dimsFromLayoutWidth={props.layoutWidthDimensions.width}\n                                        calculateCardTopPositioning={props.dialogBoxData.topPositionFromClassCard}\n                                        calculateCardHeigthPositioning={props.dialogBoxData.heigthPositionFromClassCard}\n                                        classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                        classLastAvailableHour={props.agendaLastAvailableHour}\n                                    >\n                                        <FullEventCard\n                                            fullClassData={props.dataToBeRendered}\n                                            currentDay={day}/>\n                                    </EventDialogBox>\n                                );\n                            }}\n                        </Transition>\n                    </DayCard>\n                );\n            })}\n            a\n            <SideTab />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}