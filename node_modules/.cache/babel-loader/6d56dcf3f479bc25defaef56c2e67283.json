{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js\";\nimport React, { useEffect, useState } from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\nexport default function EmptyTables(props) {\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        currTime = _useState2[0],\n        setCurrTime = _useState2[1];\n\n  const padToTwo = number => number <= 9 ? \"0\".concat(number) : number;\n\n  const calculateCurrentTime = (currTime.getHours() - props.agendaInitialAvailableHour) * 60 + currTime.getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n\n  const hourToMilliseconds = hour => 3600000 * hour;\n\n  const minutesInMilliseconds = minutes => 60000 * minutes;\n\n  const nextIntervalCalc = () => {\n    if (currTime.getMinutes() < 15) {\n      return 15 - currTime.getMinutes();\n    }\n\n    if (currTime.getMinutes() > 15 && currTime.getMinutes() < 46) {\n      return 46 - currTime.getMinutes();\n    }\n\n    if (currTime.getMinutes() > 45) {\n      return 60 - currTime.getMinutes() + 15;\n    }\n  };\n\n  useEffect(() => {\n    const renderInterval = setInterval(() => {\n      if (showCurrentTime) {\n        setCurrTime(new Date());\n      }\n    }, minutesInMilliseconds(nextIntervalCalc()));\n    return () => {\n      clearInterval(renderInterval);\n      nextIntervalCalc();\n    };\n  }); //the function below hides the hour in the table of available hours when <CurrentTime/> is hovering close to it\n\n  const currentTimeCloseToTabHours = singleHour => {\n    const tableHourBiggerThanCurrTime = hourToMilliseconds(singleHour) - (hourToMilliseconds(currTime.getHours()) + minutesInMilliseconds(currTime.getMinutes()));\n    const currTimeBiggerThanTableHour = hourToMilliseconds(currTime.getHours()) + minutesInMilliseconds(currTime.getMinutes()) - hourToMilliseconds(singleHour);\n    return currTimeBiggerThanTableHour < minutesInMilliseconds(15) && currTimeBiggerThanTableHour > 0 || tableHourBiggerThanCurrTime < minutesInMilliseconds(15) && tableHourBiggerThanCurrTime > 0;\n  };\n\n  let todayIsPresentInScreenToRenderCurrentHour;\n\n  if (props.appViewMode === \"WeekMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0, 0, 0, 0));\n  }\n\n  if (props.appViewMode === \"DayMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0, 0, 0, 0) === props.currAgendaData;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.EmptyTableWrapper,\n    style: props.timeTableWrapperStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour ? /*#__PURE__*/React.createElement(CurrentTime, {\n    currentTime: calculateCurrentTime,\n    dayCardContainerWidth: props.dayCardContainerWidth,\n    appViewMode: props.appViewMode,\n    classInitialAvailableHour: props.classInitialAvailableHour,\n    classLastlAvailableHour: props.classLastAvailableHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }) : null, props.tableOfAvailableHours.map(singleHour => {\n    //ensure that there only content in the div for the column that displays the hours\n    let displaySingleHour;\n\n    if (props.style !== undefined && !currentTimeCloseToTabHours(singleHour)) {\n      displaySingleHour = \"\".concat(padToTwo(singleHour), \":00\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: singleHour,\n      className: classes.EmptyTable,\n      style: props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, displaySingleHour);\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/TimeTables/TimeTables.js"],"names":["React","useEffect","useState","CurrentTime","classes","EmptyTables","props","Date","currTime","setCurrTime","padToTwo","number","calculateCurrentTime","getHours","agendaInitialAvailableHour","getMinutes","showCurrentTime","agendaLastAvailableHour","hourToMilliseconds","hour","minutesInMilliseconds","minutes","nextIntervalCalc","renderInterval","setInterval","clearInterval","currentTimeCloseToTabHours","singleHour","tableHourBiggerThanCurrTime","currTimeBiggerThanTableHour","todayIsPresentInScreenToRenderCurrentHour","appViewMode","currAgendaData","includes","setHours","EmptyTableWrapper","timeTableWrapperStyle","style","undefined","dayCardContainerWidth","classInitialAvailableHour","classLastAvailableHour","tableOfAvailableHours","map","displaySingleHour","EmptyTable"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport CurrentTime from \"../../UI/CurrentTIme/CurrentTime\";\nimport classes from \"./TimeTables.module.css\";\n\nexport default function EmptyTables(props) {\n  const [currTime, setCurrTime] = useState(new Date())\n  const padToTwo = number => (number <= 9 ? `0${number}` : number);\n  const calculateCurrentTime = (currTime.getHours() - props.agendaInitialAvailableHour) * 60 + currTime.getMinutes();\n  const showCurrentTime = (props.agendaLastAvailableHour - props.agendaInitialAvailableHour) * 60 + 60 > calculateCurrentTime;\n  const hourToMilliseconds = hour => 3600000 * hour;\n  const minutesInMilliseconds = minutes => 60000 * minutes;\n  const nextIntervalCalc = () => {\n    if(currTime.getMinutes() < 15) {\n      return 15 - currTime.getMinutes()\n    }\n    if(currTime.getMinutes() > 15 && currTime.getMinutes() < 46) {\n      return 46 - currTime.getMinutes()\n    }\n    if(currTime.getMinutes() > 45) {\n      return 60 - currTime.getMinutes() + 15\n    }\n  }\n  useEffect(() => {\n    const renderInterval = setInterval(() => {\n      if(showCurrentTime) {\n        setCurrTime(new Date())\n      }\n    }, minutesInMilliseconds(nextIntervalCalc()))\n    return () => {\n      clearInterval(renderInterval)\n      nextIntervalCalc()\n    }\n  })\n  //the function below hides the hour in the table of available hours when <CurrentTime/> is hovering close to it\n  const currentTimeCloseToTabHours = singleHour => {\n    const tableHourBiggerThanCurrTime = hourToMilliseconds(singleHour) - (hourToMilliseconds(currTime.getHours()) + minutesInMilliseconds(currTime.getMinutes()));\n    const currTimeBiggerThanTableHour = (hourToMilliseconds(currTime.getHours()) + minutesInMilliseconds(currTime.getMinutes())) - hourToMilliseconds(singleHour);\n    return ((currTimeBiggerThanTableHour < minutesInMilliseconds(15) && currTimeBiggerThanTableHour > 0) || (tableHourBiggerThanCurrTime < minutesInMilliseconds(15) && tableHourBiggerThanCurrTime > 0))\n  };\n  let todayIsPresentInScreenToRenderCurrentHour;\n  if(props.appViewMode === \"WeekMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = props.currAgendaData.includes(new Date().setHours(0,0,0,0));\n  }\n  if(props.appViewMode === \"DayMode\") {\n    todayIsPresentInScreenToRenderCurrentHour = new Date().setHours(0,0,0,0) === props.currAgendaData;\n  }\n  return (\n      <div className={classes.EmptyTableWrapper} style={props.timeTableWrapperStyle}>\n        {props.style !== undefined && showCurrentTime && todayIsPresentInScreenToRenderCurrentHour?\n            <CurrentTime currentTime={calculateCurrentTime}\n                         dayCardContainerWidth={props.dayCardContainerWidth}\n                         appViewMode={props.appViewMode}\n                         classInitialAvailableHour={props.classInitialAvailableHour}\n                         classLastlAvailableHour={props.classLastAvailableHour}/> :\n            null}\n        {props.tableOfAvailableHours.map(singleHour => {\n          //ensure that there only content in the div for the column that displays the hours\n          let displaySingleHour;\n          if (props.style !== undefined && !currentTimeCloseToTabHours(singleHour)) {\n            displaySingleHour = `${padToTwo(singleHour)}:00`;\n          }\n          return (\n              <div key={singleHour}\n                   className={classes.EmptyTable}\n                   style={props.style}>\n                {displaySingleHour}\n              </div>\n          );\n        })}\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}