{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/EventCard/EventCard.js\";\nimport React, { Fragment } from \"react\";\nimport classes from \"./EventCard.module.css\";\nexport default function ClassCard(props) {\n  //adds extra digit(zeros) for numbers upon rendering\n  const padToTwo = number => number <= 9 ? \"0\".concat(number) : number; //function that calculates the class start or class end\n\n\n  const classElapseHandler = (classDate, classStartHour, classStartMinute, classDuration, classModal) => {\n    const clDuration = classDuration.split(\"\").slice(0, 2).join(\"\");\n\n    const classHourToMilliseconds = hour => 3600000 * hour;\n\n    const classMinutesInMilliseconds = minutes => 60000 * minutes;\n\n    const classStart = classDate + classHourToMilliseconds(classStartHour) + classMinutesInMilliseconds(classStartMinute);\n    const classEnd = \"\".concat(padToTwo(new Date(classStart + classMinutesInMilliseconds(clDuration)).getHours()), \":\").concat(padToTwo(new Date(classStart + classMinutesInMilliseconds(clDuration)).getMinutes()));\n\n    if (classModal === \"class start\") {\n      return classStart;\n    }\n\n    if (classModal === \"class end\") {\n      return classEnd;\n    }\n  }; //taking in consideration a global consensus that 1px = 1min below I calculate the position on the card\n  //according to the scheduled time\n\n\n  const calculateCardTopPositioning = (props.classTime.hour - props.classInitialAvailableHour) * 60 + props.classTime.minutes;\n  const calculateCardHeight = props.classDuration.split(\"\").slice(0, 2).join(\"\");\n  const cardPosition = {\n    top: calculateCardTopPositioning + \"px\",\n    height: calculateCardHeight + \"px\"\n  };\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, props.classDate === props.currDay ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => props.displayFullEventCard(props.currDay, calculateCardTopPositioning, calculateCardHeight),\n    className: classes.EventCard,\n    style: cardPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Start: \", padToTwo(props.classTime.hour), \":\", padToTwo(props.classTime.minutes), \" - End:\", \" \", classElapseHandler(props.classDate, props.classTime.hour, props.classTime.minutes, props.classDuration, \"class end\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, props.classTitle, \" @ \", props.classLocation)) : null);\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/EventCard/EventCard.js"],"names":["React","Fragment","classes","ClassCard","props","padToTwo","number","classElapseHandler","classDate","classStartHour","classStartMinute","classDuration","classModal","clDuration","split","slice","join","classHourToMilliseconds","hour","classMinutesInMilliseconds","minutes","classStart","classEnd","Date","getHours","getMinutes","calculateCardTopPositioning","classTime","classInitialAvailableHour","calculateCardHeight","cardPosition","top","height","currDay","displayFullEventCard","EventCard","classTitle","classLocation"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport classes from \"./EventCard.module.css\";\n\nexport default function ClassCard(props) {\n  //adds extra digit(zeros) for numbers upon rendering\n  const padToTwo = number => (number <= 9 ? `0${number}` : number);\n  //function that calculates the class start or class end\n  const classElapseHandler = (\n      classDate,\n      classStartHour,\n      classStartMinute,\n      classDuration,\n      classModal\n  ) => {\n    const clDuration = classDuration\n        .split(\"\")\n        .slice(0, 2)\n        .join(\"\");\n    const classHourToMilliseconds = hour => 3600000 * hour;\n    const classMinutesInMilliseconds = minutes => 60000 * minutes;\n    const classStart =\n        classDate +\n        classHourToMilliseconds(classStartHour) +\n        classMinutesInMilliseconds(classStartMinute);\n    const classEnd = `${padToTwo(\n        new Date(classStart + classMinutesInMilliseconds(clDuration)).getHours()\n    )}:${padToTwo(\n        new Date(classStart + classMinutesInMilliseconds(clDuration)).getMinutes()\n    )}`;\n    if (classModal === \"class start\") {\n      return classStart;\n    }\n    if (classModal === \"class end\") {\n      return classEnd;\n    }\n  };\n  //taking in consideration a global consensus that 1px = 1min below I calculate the position on the card\n  //according to the scheduled time\n  const calculateCardTopPositioning =\n      (props.classTime.hour - props.classInitialAvailableHour) * 60 +\n      props.classTime.minutes;\n  const calculateCardHeight = props.classDuration\n      .split(\"\")\n      .slice(0, 2)\n      .join(\"\");\n  const cardPosition = {\n    top: calculateCardTopPositioning + \"px\",\n    height: calculateCardHeight + \"px\"\n  };\n  return (\n\n      <Fragment>\n        {props.classDate === props.currDay ?\n            <div onClick={() => props.displayFullEventCard(props.currDay, calculateCardTopPositioning, calculateCardHeight)}\n                 className={classes.EventCard}\n                 style={cardPosition}>\n              <Fragment>\n                Start: {padToTwo(props.classTime.hour)}:\n                {padToTwo(props.classTime.minutes)} - End:{\" \"}\n                {classElapseHandler(\n                    props.classDate,\n                    props.classTime.hour,\n                    props.classTime.minutes,\n                    props.classDuration,\n                    \"class end\"\n                )}\n              </Fragment>\n              <hr/>\n              <Fragment>{props.classTitle} @ {props.classLocation}</Fragment>\n            </div> : null\n        }\n      </Fragment>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}