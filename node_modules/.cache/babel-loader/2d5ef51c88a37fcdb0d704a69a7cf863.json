{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: \"\",\n      currentWeek: [],\n      currWeekIndex: 0,\n      prevMonthLastWeekIndex: 0,\n      currentMonth: [],\n      monthGetter: new Date().getMonth(),\n      yearGetter: new Date().getFullYear(),\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.weekAgendaLogicHandler = () => {\n      if (this.state.currentMonth[this.state.currWeekIndex] === undefined) {\n        console.log(\"decremented a month\");\n        let currWeekIndex = this.state.prevMonthLastWeekIndex;\n        this.setState({\n          currWeekIndex\n        });\n      } else {\n        //finds the week in the current month which contains today's day\n        if (this.state.currentMonth[this.state.currWeekIndex].includes(new Date().setHours(0, 0, 0, 0))) {\n          console.log(\"found today in week\");\n          let currentWeek = this.state.currentMonth.filter(week => week.includes(new Date().setHours(0, 0, 0, 0))).flat(); //spread this week on the state\n\n          this.setState({\n            currentWeek\n          }, () => console.log(\"week has renewed or mount\", this.state.currentWeek));\n        } else {\n          let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.weekAgendaNavigationHandler = modal => {\n      //init the current week index\n      if (modal === \"increment\") {\n        //if the number of weeks incremented does not exceed the amount of weeks in the month\n        if (this.state.currWeekIndex < this.state.currentMonth.length - 1) {\n          this.setState((_ref) => {\n            let currWeekIndex = _ref.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex + 1\n            }, restTop);\n          }, () => {\n            this.weekAgendaLogicHandler();\n          });\n        }\n\n        if (this.state.currWeekIndex === this.state.currentMonth.length - 1) {\n          this.setState((_ref2) => {\n            let prevMonthLastWeekIndex = _ref2.prevMonthLastWeekIndex,\n                restTop = _objectWithoutProperties(_ref2, [\"prevMonthLastWeekIndex\"]);\n\n            return _objectSpread({\n              prevMonthLastWeekIndex: this.state.currWeekIndex\n            }, restTop);\n          }, () => {\n            console.log(\"prev month max index\", this.state.prevMonthLastWeekIndex);\n            this.setState((_ref3) => {\n              let currWeekIndex = _ref3.currWeekIndex,\n                  restTop = _objectWithoutProperties(_ref3, [\"currWeekIndex\"]);\n\n              return _objectSpread({\n                currWeekIndex: 0\n              }, restTop);\n            }, () => {\n              this.calendarNavigationHandler(\"increment\");\n            });\n          });\n        }\n      }\n\n      if (modal === \"decrement\") {\n        if (this.state.currWeekIndex > 0 || this.state.currWeekIndex > 0 && !this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0))) {\n          console.log(\"decrement curr week within month\");\n          this.setState((_ref4) => {\n            let currWeekIndex = _ref4.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref4, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex - 1\n            }, restTop);\n          }, () => {\n            this.weekAgendaLogicHandler();\n          });\n        }\n\n        ;\n\n        if (this.state.currWeekIndex === 0 || this.state.currWeekIndex === 0 && !this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0))) {\n          console.log(\"decrement month and week\");\n          console.log(\"index at decrement month\", this.state.currWeekIndex);\n          let currWeekIndex = this.state.prevMonthLastWeekIndex;\n          this.setState({\n            currWeekIndex\n          });\n          this.calendarNavigationHandler(\"decrement\");\n        }\n      }\n    };\n\n    this.calendarLogicHandler = () => {\n      const oneDay = 86400000;\n      const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n      let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n\n      for (let i = 1; i < lastDayOfTheMonth; i++) {\n        //push the entire month\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      } //localize the first date of the month dates array and check what day of the week it is\n      //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n\n\n      for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n        currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n      } //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n\n\n      for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      }\n\n      let monthInWeeks = [];\n\n      for (let i = 0; i < currentMonth.length; i += 7) {\n        let chunk = currentMonth.slice(i, i + 7);\n        monthInWeeks.push(chunk);\n      }\n\n      currentMonth = monthInWeeks;\n      this.setState({\n        currentMonth\n      }, () => console.log(\"month did mount\", this.state.currentMonth));\n    };\n\n    this.calendarNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        if (this.state.monthGetter < 11) {\n          //just add months, before changing the year\n          this.setState((_ref5) => {\n            let monthGetter = _ref5.monthGetter,\n                restTop = _objectWithoutProperties(_ref5, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter >= 11) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref6) => {\n            let yearGetter = _ref6.yearGetter,\n                monthGetter = _ref6.monthGetter,\n                restTop = _objectWithoutProperties(_ref6, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter + 1,\n              monthGetter: 0\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n        if (this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState((_ref7) => {\n            let monthGetter = _ref7.monthGetter,\n                restTop = _objectWithoutProperties(_ref7, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter - 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter <= 0) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref8) => {\n            let yearGetter = _ref8.yearGetter,\n                monthGetter = _ref8.monthGetter,\n                restTop = _objectWithoutProperties(_ref8, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter - 1,\n              monthGetter: 11\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n    };\n\n    this.appNavigationHandler = modal => {\n      if (this.state.appViewMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal);\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.toString().length > 2 ? date.getDay() : date;\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.toString().length > 2 ? date.getMonth() : date;\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 11:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.backdropDisplayHandler = day => {\n      this.setState((_ref9) => {\n        let backdropIsActive = _ref9.backdropIsActive,\n            dialogBoxData = _ref9.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref9, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref10) => {\n        let dialogBoxData = _ref10.dialogBoxData,\n            backdropIsActive = _ref10.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref10, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref11) => {\n        let layoutWidthDimensions = _ref11.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref11, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    const appViewMode = this.props.defaultMode;\n    this.setState({\n      appViewMode\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.currentMonth !== this.state.currentMonth) {\n      this.weekAgendaLogicHandler();\n    }\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = /*#__PURE__*/React.createElement(WeekMode, {\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      backdropIsActive: this.state.backdropIsActive,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      displayDialogBoxHandler: this.displayDialogBoxHandler,\n      backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n      dialogBoxData: this.state.dialogBoxData,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      layoutWidthDimensions: this.state.layoutWidthDimensions,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      currentWeek: this.state.currentWeek,\n      monthGetter: this.state.monthGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }\n    });\n    let calendarMode = /*#__PURE__*/React.createElement(CalendarMode, {\n      monthGetter: this.state.monthGetter,\n      currentMonth: this.state.currentMonth,\n      currentWeek: this.state.currentWeek,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }\n    });\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = weekMode;\n        break;\n\n      case 'CalendarMode':\n        viewMode = calendarMode;\n        break;\n\n      default:\n        switch (this.props.defaultMode) {\n          case \"CalendarMode\":\n            viewMode = calendarMode;\n            break;\n\n          case \"WeekMode\":\n            viewMode = weekMode;\n            break;\n\n          default:\n            alert(\"there is something wrong here!\");\n        }\n\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      defaultMode: this.props.defaultMode,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      currentMonth: this.state.monthGetter,\n      currentYear: this.state.yearGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","Agenda","Component","state","appViewMode","currentWeek","currWeekIndex","prevMonthLastWeekIndex","currentMonth","monthGetter","Date","getMonth","yearGetter","getFullYear","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","weekAgendaLogicHandler","undefined","console","log","includes","setHours","filter","week","flat","weekAgendaNavigationHandler","modal","length","restTop","calendarNavigationHandler","calendarLogicHandler","oneDay","lastDayOfTheMonth","getDate","valueOf","min","getDay","unshift","monthInWeeks","chunk","slice","appNavigationHandler","newDatesToVerboseHandler","date","verboseType","renderWeekDay","toString","renderMonth","backdropDisplayHandler","day","displayDialogBoxHandler","backdropIsActiv","callbackContainerDimensions","container","offsetWidth","viewModeHandler","componentDidMount","props","agendaInitialAvailableHour","agendaLastAvailableHour","defaultMode","componentDidUpdate","prevProps","prevState","snapshot","render","viewMode","weekMode","data","dataToBeRendered","calendarMode","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: \"\",\n    currentWeek: [],\n    currWeekIndex: 0,\n    prevMonthLastWeekIndex: 0,\n    currentMonth: [],\n    monthGetter: new Date().getMonth(),\n    yearGetter: new Date().getFullYear(),\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount(){\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    const appViewMode = this.props.defaultMode;\n    this.setState({appViewMode});\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevState.currentMonth !== this.state.currentMonth) {\n      this.weekAgendaLogicHandler();\n    }\n  }\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  weekAgendaLogicHandler = () => {\n    if(this.state.currentMonth[this.state.currWeekIndex] === undefined) {\n      console.log(\"decremented a month\");\n      let currWeekIndex = this.state.prevMonthLastWeekIndex;\n      this.setState({currWeekIndex});\n      } else {\n      //finds the week in the current month which contains today's day\n      if(this.state.currentMonth[this.state.currWeekIndex].includes(new Date().setHours(0,0,0,0))) {\n        console.log(\"found today in week\");\n        let currentWeek = this.state.currentMonth\n            .filter(week => week.includes(new Date().setHours(0,0,0,0)))\n            .flat();\n        //spread this week on the state\n        this.setState({currentWeek}, () => console.log(\"week has renewed or mount\", this.state.currentWeek));\n\n      } else {\n        let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n        this.setState({currentWeek});\n      }\n\n    }\n  };\n\n  weekAgendaNavigationHandler = modal => {\n    //init the current week index\n    if (modal === \"increment\") {\n      //if the number of weeks incremented does not exceed the amount of weeks in the month\n      if(this.state.currWeekIndex < this.state.currentMonth.length -1) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex + 1,\n              ...restTop\n            }),\n            () => {\n              this.weekAgendaLogicHandler()\n            }\n        );\n      }\n      if(this.state.currWeekIndex === this.state.currentMonth.length -1) {\n        this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n          prevMonthLastWeekIndex: this.state.currWeekIndex,\n          ...restTop\n        }), () => {\n          console.log(\"prev month max index\",this.state.prevMonthLastWeekIndex);\n          this.setState(({currWeekIndex, ...restTop}) => ({\n            currWeekIndex: 0,\n            ...restTop\n          }), () => {\n            this.calendarNavigationHandler(\"increment\");\n          });\n        });\n      }\n    }\n    if (modal === \"decrement\") {\n      if(this.state.currWeekIndex > 0 || (this.state.currWeekIndex > 0 && !this.state.currentWeek.includes(new Date().setHours(0,0,0,0)))) {\n       console.log(\"decrement curr week within month\");\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex - 1,\n              ...restTop\n            }),\n            () => {\n              this.weekAgendaLogicHandler();\n            }\n        );\n      };\n      if(this.state.currWeekIndex === 0 || (this.state.currWeekIndex === 0 && !this.state.currentWeek.includes(new Date().setHours(0,0,0,0)))) {\n       console.log(\"decrement month and week\");\n       console.log(\"index at decrement month\",this.state.currWeekIndex);\n        let currWeekIndex = this.state.prevMonthLastWeekIndex;\n        this.setState({currWeekIndex});\n        this.calendarNavigationHandler(\"decrement\");\n      }\n    }\n  };\n\n  calendarLogicHandler = () => {\n    const oneDay = 86400000;\n    const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n    let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n    for(let i = 1; i < lastDayOfTheMonth; i++) { //push the entire month\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    //localize the first date of the month dates array and check what day of the week it is\n    //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    let monthInWeeks = [];\n    for (let i = 0; i < currentMonth.length; i += 7 ) {\n      let chunk = currentMonth.slice(i, i+7 );\n      monthInWeeks.push(chunk)\n    }\n    currentMonth = monthInWeeks;\n    this.setState({currentMonth}, () => console.log(\"month did mount\", this.state.currentMonth));\n  };\n\n  calendarNavigationHandler = modal => {\n    if(modal === \"increment\") {\n      if(this.state.monthGetter < 11) { //just add months, before changing the year\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter + 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter >= 11) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter + 1,\n          monthGetter: 0,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n    if (modal === \"decrement\") {\n      //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n      if(this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0,0,0,0).valueOf())) {\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter - 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter <= 0) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter - 1,\n          monthGetter: 11,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n    if(this.state.appViewMode === \"WeekMode\") {\n      this.weekAgendaNavigationHandler(modal)\n    }\n    if(this.state.appViewMode === \"CalendarMode\") {\n      this.calendarNavigationHandler(modal)\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.toString().length > 2 ?\n        date.getDay() : date;\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth =  date.toString().length > 2 ?\n        date.getMonth() : date;\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 11:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler = (day) => {\n    this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n      backdropIsActive: day,\n      dialogBoxData: {\n        displayDialogBox: false\n      },\n      ...restTop\n    }));\n  };\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  };\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = (\n        <WeekMode\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            backdropIsActive={this.state.backdropIsActive}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            displayDialogBoxHandler={this.displayDialogBoxHandler}\n            backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n            dialogBoxData={this.state.dialogBoxData}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            layoutWidthDimensions={this.state.layoutWidthDimensions}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n            currentWeek={this.state.currentWeek}\n            monthGetter={this.state.monthGetter}\n        />\n    );\n    let calendarMode = (\n        <CalendarMode\n            monthGetter={this.state.monthGetter}\n            currentMonth={this.state.currentMonth}\n            currentWeek={this.state.currentWeek}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n    )\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = weekMode;\n        break;\n      case('CalendarMode') :\n        viewMode = calendarMode;\n        break;\n      default :\n        switch (this.props.defaultMode) {\n          case(\"CalendarMode\") :\n            viewMode = calendarMode;\n            break;\n          case(\"WeekMode\") :\n            viewMode = weekMode;\n            break;\n          default : alert(\"there is something wrong here!\")\n        }\n    }\n    return (\n        <Layout\n            defaultMode={this.props.defaultMode}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            currentMonth={this.state.monthGetter}\n            currentYear={this.state.yearGetter}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}