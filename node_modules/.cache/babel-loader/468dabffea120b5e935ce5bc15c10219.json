{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport DayCard from \"./DayCard/DayCard\";\nimport TimeTables from \"./TimeTables/TimeTables\";\nimport EventCard from \"./EventCard/EventCard\";\nimport SideTab from \"./SideTab/SideTab\";\nimport Layout from \"./UI/Layout/Layout\";\nimport BackdropFilter from \"./UI/BackdropFilter/BackdropFilter\";\nimport Button from \"./UI/Button/Button\";\nimport EventDialogBox from \"./UI/EventDialogBox/EventDialogBox\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentWeek: [],\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfHourTable = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.weekNavigationHandler = modal => {\n      const oneDay = 86400000;\n\n      if (modal === \"increment\") {\n        let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n          currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n        }\n\n        this.setState({\n          currentWeek\n        });\n      }\n\n      if (modal === \"decrement\") {\n        let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n          currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n        }\n\n        if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.getDay();\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.getMonth();\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 12:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref) => {\n        let dialogBoxData = _ref.dialogBoxData,\n            backdropIsActive = _ref.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref2) => {\n        let layoutWidthDimensions = _ref2.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref2, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n  }\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date(); //logic that fills the <Day> cards in the agenda\n\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n\n    this.setState({\n      currentWeek\n    }); //I call this set state to spread the table of empty tabs for each existing hour\n\n    this.setState({\n      arrayOfHourTable: this.arrayOfHourTable(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour)\n    });\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState((_ref3) => {\n        let backdropIsActive = _ref3.backdropIsActive,\n            dialogBoxData = _ref3.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref3, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    }\n  } //ligic to run the dialog box. This box will handle create class, edit class & view full class card\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Layout, {\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      weekNavigationHandler: this.weekNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SideTab, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TimeTables, {\n      style: {\n        color: \"black\",\n        border: \"none\"\n      },\n      tableOfAvailableHours: this.state.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    })), this.state.currentWeek.map(day => {\n      return /*#__PURE__*/React.createElement(DayCard, {\n        backdropIsActive: this.state.backdropIsActive,\n        key: day,\n        today: day,\n        newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }\n      }, this.state.backdropIsActive === \"cover all\" ? /*#__PURE__*/React.createElement(BackdropFilter, {\n        backdropDisplayHandler: () => this.backdropDisplayHandler(\"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }\n      }) : null, /*#__PURE__*/React.createElement(TimeTables, {\n        backdropDisplayHandler: () => this.backdropDisplayHandler(day),\n        tableOfAvailableHours: this.state.arrayOfDailyHoursTable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }\n      }), this.state.backdropIsActive === day ? /*#__PURE__*/React.createElement(BackdropFilter, {\n        backdropDisplayHandler: () => this.backdropDisplayHandler(\"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        ButtonText: \"Create a New Class\",\n        buttonClicked: () => this.displayDialogBoxHandler(day) //will open a dialog box in the future\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 19\n        }\n      })) : null, this.props.dataToBeRendered.map(cl => {\n        if (cl.classDate === day) {\n          return /*#__PURE__*/React.createElement(EventCard, {\n            zIndexIFClicked: this.state.dialogBoxData.displayDialogBox,\n            currDay: day,\n            classDate: cl.classDate,\n            classTitle: cl.classTitle,\n            classLocation: cl.location,\n            classDuration: cl.duration,\n            classTime: cl.classTime,\n            classInitialAvailableHour: this.props.agendaInitialAvailableHour,\n            key: cl.id,\n            displayFullEventCard: this.displayDialogBoxHandler,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 21\n            }\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(EventDialogBox, {\n          today: day,\n          displayDialogBox: this.state.dialogBoxData.displayDialogBox,\n          dimsFromLayoutWidth: this.state.layoutWidthDimensions.width,\n          key: cl.id,\n          calculateCardTopPositioning: this.state.dialogBoxData.topPositionFromClassCard,\n          calculateCardHeigthPositioning: this.state.dialogBoxData.heigthPositionFromClassCard,\n          classInitialAvailableHour: this.props.agendaInitialAvailableHour,\n          classLastAvailableHour: this.props.agendaLastAvailableHour,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 19\n          }\n        });\n      }));\n    }), /*#__PURE__*/React.createElement(SideTab, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","DayCard","TimeTables","EventCard","SideTab","Layout","BackdropFilter","Button","EventDialogBox","Agenda","Component","state","currentWeek","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfHourTable","startingHour","endingHour","i","push","Math","max","apply","setState","weekNavigationHandler","modal","oneDay","Date","getDay","min","unshift","includes","setHours","valueOf","newDatesToVerboseHandler","date","verboseType","renderWeekDay","renderMonth","getMonth","displayDialogBoxHandler","day","backdropIsActiv","restTop","callbackContainerDimensions","container","offsetWidth","componentDidMount","today","props","agendaInitialAvailableHour","agendaLastAvailableHour","backdropDisplayHandler","render","color","border","map","dataToBeRendered","cl","classDate","classTitle","location","duration","classTime","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DayCard from \"./DayCard/DayCard\";\nimport TimeTables from \"./TimeTables/TimeTables\";\nimport EventCard from \"./EventCard/EventCard\";\nimport SideTab from \"./SideTab/SideTab\";\nimport Layout from \"./UI/Layout/Layout\";\nimport BackdropFilter from \"./UI/BackdropFilter/BackdropFilter\";\nimport Button from \"./UI/Button/Button\";\nimport EventDialogBox from \"./UI/EventDialogBox/EventDialogBox\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    currentWeek: [],\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date();\n    //logic that fills the <Day> cards in the agenda\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n    this.setState({ currentWeek });\n\n    //I call this set state to spread the table of empty tabs for each existing hour\n    this.setState({\n      arrayOfHourTable: this.arrayOfHourTable(\n        this.props.agendaInitialAvailableHour,\n        this.props.agendaLastAvailableHour\n      )\n    });\n  }\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfHourTable = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n        Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  //this functions navigates in between weeks\n  weekNavigationHandler = modal => {\n    const oneDay = 86400000;\n    if (modal === \"increment\") {\n      let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n        currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n      }\n      this.setState({ currentWeek });\n    }\n\n    if (modal === \"decrement\") {\n      let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n        currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n      }\n      if (\n        !this.state.currentWeek.includes(\n          new Date().setHours(0, 0, 0, 0).valueOf()\n        )\n      ) {\n        this.setState({ currentWeek });\n      }\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.getDay();\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth = date.getMonth();\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 12:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n        backdropIsActive: day,\n        dialogBoxData: {\n          displayDialogBox: false\n        },\n        ...restTop\n      }));\n    }\n  }\n  //ligic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n    day,\n    topPositionFromClassCard,\n    heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (\n      this.state.dialogBoxData.displayDialogBox !== day &&\n      this.state.backdropIsActive !== \"cover all\"\n    ) {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n\n    if (\n      this.state.dialogBoxData.displayDialogBox === day &&\n      this.state.backdropIsActive === \"cover all\"\n    ) {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  render() {\n    return (\n      <Layout\n        callbackContainerDimensions={this.callbackContainerDimensions}\n        weekNavigationHandler={this.weekNavigationHandler}\n        newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n        currentWeek={this.state.currentWeek}\n      >\n        <SideTab>\n          <TimeTables\n            style={{ color: \"black\", border: \"none\" }}\n            tableOfAvailableHours={this.state.arrayOfDailyHoursTable}\n          />\n        </SideTab>\n        {this.state.currentWeek.map(day => {\n          return (\n            <DayCard\n              backdropIsActive={this.state.backdropIsActive}\n              key={day}\n              today={day}\n              newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            >\n              {this.state.backdropIsActive === \"cover all\" ? (\n                <BackdropFilter\n                  backdropDisplayHandler={() => this.backdropDisplayHandler(\"false\")}\n                />\n              ) : null}\n              <TimeTables\n                backdropDisplayHandler={() => this.backdropDisplayHandler(day)}\n                tableOfAvailableHours={this.state.arrayOfDailyHoursTable}\n              />\n              {this.state.backdropIsActive === day ? (\n                <BackdropFilter\n                  backdropDisplayHandler={() => this.backdropDisplayHandler(\"false\")}\n                >\n                  <Button\n                    ButtonText=\"Create a New Class\"\n                    buttonClicked={() => this.displayDialogBoxHandler(day)} //will open a dialog box in the future\n                  />\n                </BackdropFilter>\n              ) : null}\n              {this.props.dataToBeRendered.map(cl => {\n                if (cl.classDate === day) {\n                  return (\n                    <EventCard\n                      zIndexIFClicked={this.state.dialogBoxData.displayDialogBox}\n                      currDay={day}\n                      classDate={cl.classDate}\n                      classTitle={cl.classTitle}\n                      classLocation={cl.location}\n                      classDuration={cl.duration}\n                      classTime={cl.classTime}\n                      classInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                      key={cl.id}\n                      displayFullEventCard={this.displayDialogBoxHandler}\n                    />\n                  );\n                }\n                return (\n                  <EventDialogBox\n                    today={day}\n                    displayDialogBox={this.state.dialogBoxData.displayDialogBox}\n                    dimsFromLayoutWidth={this.state.layoutWidthDimensions.width}\n                    key={cl.id}\n                    calculateCardTopPositioning={this.state.dialogBoxData.topPositionFromClassCard}\n                    calculateCardHeigthPositioning={this.state.dialogBoxData.heigthPositionFromClassCard}\n                    classInitialAvailableHour={this.props.agendaInitialAvailableHour}\n                    classLastAvailableHour={this.props.agendaLastAvailableHour}\n                  />\n                );\n              })}\n            </DayCard>\n          );\n        })}\n        <SideTab />\n      </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}