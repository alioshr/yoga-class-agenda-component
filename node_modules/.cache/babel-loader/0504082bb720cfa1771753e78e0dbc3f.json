{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Containers/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"../../UI/Layout/Layout\";\nimport WeekMode from \"../../UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"../../UI/ViewMode/CalendarMode/CalendarMode\";\nimport DayMode from \"../../UI/ViewMode/DayMode/DayMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: '',\n      currentMonth: [],\n      currentWeek: [],\n      currWeekIndex: \"initial\",\n      prevMonthLastWeekIndex: [],\n      currentDay: '',\n      currentDayIndex: \"initial\",\n      prevWeekLastDayIndex: [],\n      monthGetter: new Date().getMonth(),\n      yearGetter: new Date().getFullYear(),\n      arrayOfDailyHoursTable: [],\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.dayModeLogicHandler = () => {\n      const currentWeek = this.state.currentWeek.filter(day => new Date(day).getMonth() === this.state.monthGetter);\n      const currentDay = currentWeek[this.state.currentDayIndex];\n      this.setState({\n        currentDay\n      });\n    };\n\n    this.dayAgendaNavigationHandler = modal => {\n      const filteredCurrentWeek = this.state.currentWeek.filter(day => new Date(day).getMonth() === this.state.monthGetter);\n\n      if (modal === 'increment') {\n        if (this.state.currentDayIndex < filteredCurrentWeek.length - 1) {\n          this.setState((_ref) => {\n            let currentDayIndex = _ref.currentDayIndex,\n                restTop = _objectWithoutProperties(_ref, [\"currentDayIndex\"]);\n\n            return _objectSpread({\n              currentDayIndex: currentDayIndex + 1\n            }, restTop);\n          }, () => this.dayModeLogicHandler());\n        }\n\n        if (this.state.currentDayIndex === filteredCurrentWeek.length - 1) {\n          this.setState((_ref2) => {\n            let currentDayIndex = _ref2.currentDayIndex,\n                restTop = _objectWithoutProperties(_ref2, [\"currentDayIndex\"]);\n\n            return _objectSpread({\n              currentDayIndex: 0\n            }, restTop);\n          }, () => this.weekAgendaNavigationHandler('increment'));\n        }\n      }\n\n      if (modal === 'decrement' && this.state.currentDay !== new Date().setHours(0, 0, 0, 0)) {\n        if (this.state.currentDayIndex > 0) {\n          this.setState((_ref3) => {\n            let currentDayIndex = _ref3.currentDayIndex,\n                restTop = _objectWithoutProperties(_ref3, [\"currentDayIndex\"]);\n\n            return _objectSpread({\n              currentDayIndex: currentDayIndex - 1\n            }, restTop);\n          }, () => this.dayModeLogicHandler());\n        }\n\n        if (this.state.currentDayIndex === 0) {\n          this.weekAgendaNavigationHandler(\"decrement\");\n        }\n      }\n    };\n\n    this.weekAgendaLogicHandler = () => {\n      const currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n      this.setState({\n        currentWeek\n      });\n    };\n\n    this.weekAgendaNavigationHandler = modal => {\n      //init the current week index\n      if (modal === \"increment\") {\n        this.setState((_ref4) => {\n          let prevWeekLastDayIndex = _ref4.prevWeekLastDayIndex,\n              restTop = _objectWithoutProperties(_ref4, [\"prevWeekLastDayIndex\"]);\n\n          return _objectSpread({\n            prevWeekLastDayIndex: [...prevWeekLastDayIndex, this.state.currentWeek.filter(day => new Date(day).getMonth() === this.state.monthGetter).length - 1]\n          }, restTop);\n        }, () => this.setState({\n          currentDayIndex: 0\n        })); //if the number of weeks incremented does not exceed the amount of weeks in the month\n\n        if (this.state.currWeekIndex < this.state.currentMonth.length - 1) {\n          this.setState((_ref5) => {\n            let currWeekIndex = _ref5.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref5, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex + 1\n            }, restTop);\n          }, () => this.weekAgendaLogicHandler());\n        }\n\n        if (this.state.currWeekIndex === this.state.currentMonth.length - 1) {\n          this.setState((_ref6) => {\n            let currWeekIndex = _ref6.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref6, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: 0\n            }, restTop);\n          }, () => this.calendarNavigationHandler(\"increment\"));\n        }\n      }\n\n      if (modal === \"decrement\" && !this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0))) {\n        if (this.state.appViewMode === \"WeekMode\") {\n          this.setState({\n            currentDayIndex: 0\n          });\n        }\n\n        if (this.state.appViewMode === \"DayMode\") {\n          this.setState({\n            currentDayIndex: this.state.prevWeekLastDayIndex[this.state.prevWeekLastDayIndex.length - 1]\n          }, () => {\n            this.setState((_ref7) => {\n              let prevWeekLastDayIndex = _ref7.prevWeekLastDayIndex,\n                  restTop = _objectWithoutProperties(_ref7, [\"prevWeekLastDayIndex\"]);\n\n              return _objectSpread({\n                prevWeekLastDayIndex: [...prevWeekLastDayIndex.slice(0, -1)]\n              }, restTop);\n            });\n          });\n        }\n\n        if (this.state.currWeekIndex > 0) {\n          this.setState((_ref8) => {\n            let currWeekIndex = _ref8.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref8, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex - 1\n            }, restTop);\n          }, () => {\n            this.weekAgendaLogicHandler();\n          });\n        }\n\n        if (this.state.currWeekIndex === 0) {\n          this.calendarNavigationHandler(\"decrement\");\n        }\n      }\n    };\n\n    this.calendarLogicHandler = () => {\n      const oneDay = 86400000;\n      const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n      let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n\n      for (let i = 1; i < lastDayOfTheMonth; i++) {\n        //push the entire month\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      } //localize the first date of the month dates array and check what day of the week it is\n      //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n\n\n      for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n        currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n      } //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n\n\n      for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      }\n\n      let monthInWeeks = [];\n\n      for (let i = 0; i < currentMonth.length; i += 7) {\n        let chunk = currentMonth.slice(i, i + 7);\n        monthInWeeks.push(chunk);\n      }\n\n      currentMonth = monthInWeeks;\n      this.setState({\n        currentMonth\n      });\n    };\n\n    this.calendarNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        if (this.state.appViewMode === \"CalendarMode\") {\n          //increment all last index positions for the remaining weeks of a month to serve the DayMode index positioning\n          const currentWeekIndex = this.state.currWeekIndex;\n          this.setState((_ref9) => {\n            let prevWeekLastDayIndex = _ref9.prevWeekLastDayIndex,\n                restTop = _objectWithoutProperties(_ref9, [\"prevWeekLastDayIndex\"]);\n\n            return _objectSpread({\n              prevWeekLastDayIndex: [...prevWeekLastDayIndex, ...this.state.currentMonth.map(week => week.filter(day => new Date(day).getMonth() === this.state.monthGetter).length - 1).slice(currentWeekIndex)]\n            }, restTop);\n          });\n        } //saving the max index of curr month before incrementing\n\n\n        this.setState((_ref10) => {\n          let prevMonthLastWeekIndex = _ref10.prevMonthLastWeekIndex,\n              restTop = _objectWithoutProperties(_ref10, [\"prevMonthLastWeekIndex\"]);\n\n          return _objectSpread({\n            prevMonthLastWeekIndex: [...prevMonthLastWeekIndex, this.state.currentMonth.length - 1]\n          }, restTop);\n        }, () => this.setState((_ref11) => {\n          let currWeekIndex = _ref11.currWeekIndex,\n              currentDayIndex = _ref11.currentDayIndex,\n              restTop = _objectWithoutProperties(_ref11, [\"currWeekIndex\", \"currentDayIndex\"]);\n\n          return _objectSpread({\n            currentDayIndex: 0,\n            currWeekIndex: 0\n          }, restTop);\n        }));\n\n        if (this.state.monthGetter < 11) {\n          //just add months, before changing the year\n          this.setState((_ref12) => {\n            let monthGetter = _ref12.monthGetter,\n                restTop = _objectWithoutProperties(_ref12, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter >= 11) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref13) => {\n            let yearGetter = _ref13.yearGetter,\n                monthGetter = _ref13.monthGetter,\n                restTop = _objectWithoutProperties(_ref13, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter + 1,\n              monthGetter: 0\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        if (this.state.appViewMode === \"WeekMode\" || this.state.appViewMode === \"DayMode\") {\n          //saving the max index of curr month before incrementing\n          this.setState({\n            currWeekIndex: this.state.prevMonthLastWeekIndex[this.state.prevMonthLastWeekIndex.length - 1]\n          }, () => {\n            this.setState((_ref14) => {\n              let prevMonthLastWeekIndex = _ref14.prevMonthLastWeekIndex,\n                  restTop = _objectWithoutProperties(_ref14, [\"prevMonthLastWeekIndex\"]);\n\n              return _objectSpread({\n                prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)]\n              }, restTop);\n            });\n          });\n        }\n\n        if (this.state.appViewMode === \"CalendarMode\") {\n          // removing all the week's indexes saved in this.state.prevMonthLastWeekIndex\n          // that will come after the first week of the month being rendered upon decrementing\n          // so If navigating backwards in DayMode, It will have the proper reference of the last week's index\n          const currentWeekIndex = this.state.currWeekIndex;\n          const prevMonthLastWeekIndex = this.state.prevMonthLastWeekIndex[this.state.prevMonthLastWeekIndex.length - 1];\n          const prevWeekLastDayIndexLength = this.state.prevWeekLastDayIndex.length - 1;\n          this.setState((_ref15) => {\n            let prevWeekLastDayIndex = _ref15.prevWeekLastDayIndex,\n                restTop = _objectWithoutProperties(_ref15, [\"prevWeekLastDayIndex\"]);\n\n            return _objectSpread({\n              prevWeekLastDayIndex: [...prevWeekLastDayIndex.slice(0, prevWeekLastDayIndexLength - currentWeekIndex - prevMonthLastWeekIndex)]\n            }, restTop);\n          }); //saving the max index of curr month before incrementing\n\n          this.setState((_ref16) => {\n            let currWeekIndex = _ref16.currWeekIndex,\n                currentDayIndex = _ref16.currentDayIndex,\n                restTop = _objectWithoutProperties(_ref16, [\"currWeekIndex\", \"currentDayIndex\"]);\n\n            return _objectSpread({\n              currentDayIndex: 0,\n              currWeekIndex: 0\n            }, restTop);\n          }, () => {\n            this.setState((_ref17) => {\n              let prevMonthLastWeekIndex = _ref17.prevMonthLastWeekIndex,\n                  restTop = _objectWithoutProperties(_ref17, [\"prevMonthLastWeekIndex\"]);\n\n              return _objectSpread({\n                prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)]\n              }, restTop);\n            });\n          });\n        } //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n\n\n        if (this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState((_ref18) => {\n            let monthGetter = _ref18.monthGetter,\n                restTop = _objectWithoutProperties(_ref18, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter - 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        } //if the month is december it resets the month and increments the year\n\n\n        if (this.state.monthGetter <= 0) {\n          this.setState((_ref19) => {\n            let yearGetter = _ref19.yearGetter,\n                monthGetter = _ref19.monthGetter,\n                restTop = _objectWithoutProperties(_ref19, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter - 1,\n              monthGetter: 11\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n    };\n\n    this.appNavigationHandler = modal => {\n      if (this.state.appViewMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"DayMode\") {\n        this.dayAgendaNavigationHandler(modal);\n      }\n    };\n\n    this.takeMeToToday = () => {\n      this.setState((_ref20) => {\n        let yearGetter = _ref20.yearGetter,\n            monthGetter = _ref20.monthGetter,\n            currWeekIndex = _ref20.currWeekIndex,\n            currentDayIndex = _ref20.currentDayIndex,\n            restTop = _objectWithoutProperties(_ref20, [\"yearGetter\", \"monthGetter\", \"currWeekIndex\", \"currentDayIndex\"]);\n\n        return _objectSpread({\n          yearGetter: new Date().getFullYear(),\n          monthGetter: new Date().getMonth(),\n          currWeekIndex: 'initial',\n          currentDayIndex: 'initial'\n        }, restTop);\n      }, () => {\n        this.calendarLogicHandler();\n      });\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.toString().length > 2 ? date.getDay() : date;\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.toString().length > 2 ? date.getMonth() : date;\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 11:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      if (this.state.dialogBoxData.displayDialogBox !== day) displayDialogBox = day;\n      if (this.state.dialogBoxData.displayDialogBox === day) displayDialogBox = false;\n      this.setState((_ref21) => {\n        let dialogBoxData = _ref21.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref21, [\"dialogBoxData\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          }\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref22) => {\n        let layoutWidthDimensions = _ref22.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref22, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n\n    this.goToClickedDate = clickedDate => {\n      if (this.state.appViewMode === \"WeekMode\") {\n        this.setState((_ref23) => {\n          let appViewMode = _ref23.appViewMode,\n              currentDayIndex = _ref23.currentDayIndex,\n              restTop = _objectWithoutProperties(_ref23, [\"appViewMode\", \"currentDayIndex\"]);\n\n          return _objectSpread({\n            appViewMode: \"DayMode\",\n            currentDayIndex: this.state.currentWeek.indexOf(clickedDate)\n          }, restTop);\n        }, () => this.dayModeLogicHandler());\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\") {\n        let currentDayIndex = this.state.currentMonth.filter(week => week.includes(clickedDate)).findIndex(day => day === clickedDate);\n        console.log(currentDayIndex);\n        console.log();\n        this.setState((_ref24) => {\n          let currWeekIndex = _ref24.currWeekIndex,\n              appViewMode = _ref24.appViewMode,\n              restTop = _objectWithoutProperties(_ref24, [\"currWeekIndex\", \"appViewMode\"]);\n\n          return _objectSpread({\n            appViewMode: \"DayMode\",\n            currWeekIndex: this.state.currentMonth.findIndex(week => week.includes(clickedDate))\n          }, restTop);\n        }, () => this.weekAgendaLogicHandler());\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.currentMonth !== this.state.currentMonth) {\n      const currWeekIndex = this.state.currentMonth.findIndex(week => week.includes(new Date().setHours(0, 0, 0, 0)));\n\n      if (currWeekIndex !== -1 && (prevState.currWeekIndex === 'initial' || this.state.appViewMode === \"CalendarMode\")) {\n        this.setState({\n          currWeekIndex\n        }, () => this.weekAgendaLogicHandler());\n      } else {\n        this.weekAgendaLogicHandler();\n      }\n    }\n\n    if (prevState.currentWeek !== this.state.currentWeek) {\n      //code that finds the current present day withing the current week set by the CalendarMode, initial state render or WeekMode\n      const currentDayIndex = this.state.currentWeek.findIndex(day => day === new Date().setHours(0, 0, 0, 0));\n\n      if (currentDayIndex !== -1 && (prevState.currentDayIndex === 'initial' || this.state.appViewMode === \"CalendarMode\" || this.state.appViewMode === \"WeekMode\")) {\n        this.setState({\n          currentDayIndex\n        }, () => this.dayModeLogicHandler()); //if the present day is not found within a current week, it will just execute the day mode logic handler normally.\n      } else {\n        this.dayModeLogicHandler();\n      }\n    } //only set app view mode after spreading all the state through all modes\n\n\n    if (prevState.currentDay !== this.state.currentDay && prevState.currentDay === '') {\n      const appViewMode = this.props.defaultMode;\n      this.setState({\n        appViewMode\n      }, () => this.state.appViewMode);\n    }\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  render() {\n    let viewMode = \"\";\n    const weekMode =\n    /*#__PURE__*/\n    //the min width for weekMOde in curr setup is 700px wide\n    React.createElement(WeekMode, {\n      appViewMode: this.state.appViewMode,\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      displayDialogBoxHandler: this.displayDialogBoxHandler,\n      dialogBoxData: this.state.dialogBoxData,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      layoutWidthDimensions: this.state.layoutWidthDimensions,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      currentWeek: this.state.currentWeek,\n      monthGetter: this.state.monthGetter,\n      goToClickedDate: this.goToClickedDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }\n    });\n    const calendarMode =\n    /*#__PURE__*/\n    //the min width for the calendar mode in curr setup is 590px wide\n    React.createElement(CalendarMode, {\n      appViewMode: this.state.appViewMode,\n      calendarViewType: this.props.calendarViewType,\n      monthGetter: this.state.monthGetter,\n      currentMonth: this.state.currentMonth,\n      currentWeek: this.state.currentWeek,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      goToClickedDate: this.goToClickedDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }\n    });\n    const dayMode =\n    /*#__PURE__*/\n    //day mode width is just fine\n    React.createElement(DayMode, {\n      dialogBoxData: this.state.dialogBoxData,\n      appViewMode: this.state.appViewMode,\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      currentMonth: this.state.currentMonth,\n      currentYear: this.state.yearGetter,\n      currentDay: this.state.currentDay,\n      monthGetter: this.state.monthGetter,\n      currentWeek: this.state.currentWeek,\n      appNavigationHandler: this.appNavigationHandler,\n      calendarViewType: this.props.calendarViewType,\n      takeMeToToday: this.takeMeToToday,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }\n    });\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = weekMode;\n        break;\n\n      case 'CalendarMode':\n        viewMode = calendarMode;\n        break;\n\n      case \"DayMode\":\n        viewMode = dayMode;\n        break;\n\n      default:\n        viewMode = null;\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      calendarViewType: this.props.calendarViewType,\n      defaultMode: this.props.defaultMode,\n      takeMeToToday: this.takeMeToToday,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      dayMode: () => this.viewModeHandler(\"DayMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      monthGetter: this.state.monthGetter,\n      currentYear: this.state.yearGetter,\n      currentDay: this.state.currentDay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Containers/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","DayMode","Agenda","Component","state","appViewMode","currentMonth","currentWeek","currWeekIndex","prevMonthLastWeekIndex","currentDay","currentDayIndex","prevWeekLastDayIndex","monthGetter","Date","getMonth","yearGetter","getFullYear","arrayOfDailyHoursTable","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","dayModeLogicHandler","filter","day","dayAgendaNavigationHandler","modal","filteredCurrentWeek","length","restTop","weekAgendaNavigationHandler","setHours","weekAgendaLogicHandler","calendarNavigationHandler","includes","slice","calendarLogicHandler","oneDay","lastDayOfTheMonth","getDate","valueOf","min","getDay","unshift","monthInWeeks","chunk","currentWeekIndex","map","week","prevWeekLastDayIndexLength","flat","appNavigationHandler","takeMeToToday","newDatesToVerboseHandler","date","verboseType","renderWeekDay","toString","renderMonth","displayDialogBoxHandler","callbackContainerDimensions","container","offsetWidth","viewModeHandler","goToClickedDate","clickedDate","indexOf","findIndex","console","log","componentDidMount","props","agendaInitialAvailableHour","agendaLastAvailableHour","componentDidUpdate","prevProps","prevState","snapshot","defaultMode","render","viewMode","weekMode","dataToBeRendered","calendarMode","calendarViewType","dayMode"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,eAAe,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAClDC,KADkD,GAC1C;AACNC,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,YAAY,EAAE,EAFR;AAGNC,MAAAA,WAAW,EAAE,EAHP;AAINC,MAAAA,aAAa,EAAE,SAJT;AAKNC,MAAAA,sBAAsB,EAAE,EALlB;AAMNC,MAAAA,UAAU,EAAE,EANN;AAONC,MAAAA,eAAe,EAAE,SAPX;AAQNC,MAAAA,oBAAoB,EAAE,EARhB;AASNC,MAAAA,WAAW,EAAE,IAAIC,IAAJ,GAAWC,QAAX,EATP;AAUNC,MAAAA,UAAU,EAAE,IAAIF,IAAJ,GAAWG,WAAX,EAVN;AAWNC,MAAAA,sBAAsB,EAAE,EAXlB;AAYNC,MAAAA,aAAa,EAAE;AACbC,QAAAA,gBAAgB,EAAE,KADL;AAEbC,QAAAA,wBAAwB,EAAE,EAFb;AAGbC,QAAAA,2BAA2B,EAAE;AAHhB,OAZT;AAiBNC,MAAAA,qBAAqB,EAAE;AACrBC,QAAAA,KAAK,EAAE;AADc;AAjBjB,KAD0C;;AAAA,SAuDlDC,gBAvDkD,GAuD/B,CAACC,YAAD,EAAeC,UAAf,KAA8B;AAC/C,UAAIT,sBAAsB,GAAG,CAACQ,YAAD,CAA7B;;AACA,WAAK,IAAIE,CAAC,GAAGF,YAAb,EAA2BE,CAAC,GAAGD,UAA/B,EAA2CC,CAAC,EAA5C,EAAgD;AAC9CV,QAAAA,sBAAsB,CAACW,IAAvB,CACIC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBd,sBAArB,IAA+C,CADnD;AAGD;;AACD,WAAKe,QAAL,CAAc;AAAEf,QAAAA;AAAF,OAAd;AACD,KA/DiD;;AAAA,SAiElDgB,mBAjEkD,GAiE5B,MAAM;AAE1B,YAAM3B,WAAW,GAAG,KAAKH,KAAL,CAAWG,WAAX,CAAuB4B,MAAvB,CAA8BC,GAAG,IAAI,IAAItB,IAAJ,CAASsB,GAAT,EAAcrB,QAAd,OAA6B,KAAKX,KAAL,CAAWS,WAA7E,CAApB;AACA,YAAMH,UAAU,GAAGH,WAAW,CAAC,KAAKH,KAAL,CAAWO,eAAZ,CAA9B;AACA,WAAKsB,QAAL,CAAc;AAACvB,QAAAA;AAAD,OAAd;AACD,KAtEiD;;AAAA,SAwElD2B,0BAxEkD,GAwErBC,KAAK,IAAI;AACpC,YAAMC,mBAAmB,GAAG,KAAKnC,KAAL,CAAWG,WAAX,CAAuB4B,MAAvB,CAA8BC,GAAG,IAAI,IAAItB,IAAJ,CAASsB,GAAT,EAAcrB,QAAd,OAA6B,KAAKX,KAAL,CAAWS,WAA7E,CAA5B;;AACA,UAAGyB,KAAK,KAAK,WAAb,EAA0B;AACxB,YAAG,KAAKlC,KAAL,CAAWO,eAAX,GAA6B4B,mBAAmB,CAACC,MAApB,GAA4B,CAA5D,EAA+D;AAC7D,eAAKP,QAAL,CAAc;AAAA,gBAAEtB,eAAF,QAAEA,eAAF;AAAA,gBAAsB8B,OAAtB;;AAAA;AACZ9B,cAAAA,eAAe,EAAEA,eAAe,GAAG;AADvB,eAET8B,OAFS;AAAA,WAAd,EAGI,MAAM,KAAKP,mBAAL,EAHV;AAID;;AACD,YAAG,KAAK9B,KAAL,CAAWO,eAAX,KAA+B4B,mBAAmB,CAACC,MAApB,GAA4B,CAA9D,EAAiE;AAC/D,eAAKP,QAAL,CAAc;AAAA,gBAAEtB,eAAF,SAAEA,eAAF;AAAA,gBAAsB8B,OAAtB;;AAAA;AACZ9B,cAAAA,eAAe,EAAE;AADL,eAET8B,OAFS;AAAA,WAAd,EAGI,MAAM,KAAKC,2BAAL,CAAiC,WAAjC,CAHV;AAID;AACF;;AACD,UAAGJ,KAAK,KAAK,WAAV,IAAyB,KAAKlC,KAAL,CAAWM,UAAX,KAA0B,IAAII,IAAJ,GAAW6B,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,CAAtD,EAAoF;AAClF,YAAG,KAAKvC,KAAL,CAAWO,eAAX,GAA6B,CAAhC,EAAmC;AACjC,eAAKsB,QAAL,CAAc;AAAA,gBAAEtB,eAAF,SAAEA,eAAF;AAAA,gBAAsB8B,OAAtB;;AAAA;AACZ9B,cAAAA,eAAe,EAAEA,eAAe,GAAG;AADvB,eAET8B,OAFS;AAAA,WAAd,EAGI,MAAM,KAAKP,mBAAL,EAHV;AAID;;AACD,YAAG,KAAK9B,KAAL,CAAWO,eAAX,KAA+B,CAAlC,EAAqC;AACnC,eAAK+B,2BAAL,CAAiC,WAAjC;AACD;AACF;AACF,KAnGiD;;AAAA,SAqGlDE,sBArGkD,GAqGzB,MAAM;AAC7B,YAAMrC,WAAW,GAAG,KAAKH,KAAL,CAAWE,YAAX,CAAwB,KAAKF,KAAL,CAAWI,aAAnC,CAApB;AACA,WAAKyB,QAAL,CAAc;AAAC1B,QAAAA;AAAD,OAAd;AACD,KAxGiD;;AAAA,SA0GlDmC,2BA1GkD,GA0GpBJ,KAAK,IAAI;AACrC;AACA,UAAIA,KAAK,KAAK,WAAd,EAA2B;AACzB,aAAKL,QAAL,CAAc;AAAA,cAAErB,oBAAF,SAAEA,oBAAF;AAAA,cAA2B6B,OAA3B;;AAAA;AACZ7B,YAAAA,oBAAoB,EAAE,CAAC,GAAGA,oBAAJ,EAA0B,KAAKR,KAAL,CAAWG,WAAX,CAAuB4B,MAAvB,CAA8BC,GAAG,IAC7E,IAAItB,IAAJ,CAASsB,GAAT,EAAcrB,QAAd,OAA6B,KAAKX,KAAL,CAAWS,WADI,EACS2B,MADT,GACgB,CAD1C;AADV,aAGTC,OAHS;AAAA,SAAd,EAIG,MAAM,KAAKR,QAAL,CAAc;AAACtB,UAAAA,eAAe,EAAE;AAAlB,SAAd,CAJT,EADyB,CAMzB;;AACA,YAAG,KAAKP,KAAL,CAAWI,aAAX,GAA2B,KAAKJ,KAAL,CAAWE,YAAX,CAAwBkC,MAAxB,GAAgC,CAA9D,EAAiE;AAC/D,eAAKP,QAAL,CACI;AAAA,gBAAEzB,aAAF,SAAEA,aAAF;AAAA,gBAAoBiC,OAApB;;AAAA;AACEjC,cAAAA,aAAa,EAAEA,aAAa,GAAG;AADjC,eAEKiC,OAFL;AAAA,WADJ,EAKI,MAAM,KAAKG,sBAAL,EALV;AAMD;;AACD,YAAG,KAAKxC,KAAL,CAAWI,aAAX,KAA6B,KAAKJ,KAAL,CAAWE,YAAX,CAAwBkC,MAAxB,GAAgC,CAAhE,EAAmE;AACjE,eAAKP,QAAL,CAAc;AAAA,gBAAEzB,aAAF,SAAEA,aAAF;AAAA,gBAAoBiC,OAApB;;AAAA;AACZjC,cAAAA,aAAa,EAAE;AADH,eAETiC,OAFS;AAAA,WAAd,EAGI,MAAM,KAAKI,yBAAL,CAA+B,WAA/B,CAHV;AAID;AACF;;AAED,UAAIP,KAAK,KAAK,WAAV,IAAyB,CAAC,KAAKlC,KAAL,CAAWG,WAAX,CAAuBuC,QAAvB,CAAgC,IAAIhC,IAAJ,GAAW6B,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,CAAhC,CAA9B,EAA6F;AAC3F,YAAG,KAAKvC,KAAL,CAAWC,WAAX,KAA2B,UAA9B,EAA0C;AACxC,eAAK4B,QAAL,CAAc;AAACtB,YAAAA,eAAe,EAAE;AAAlB,WAAd;AACD;;AACD,YAAG,KAAKP,KAAL,CAAWC,WAAX,KAA2B,SAA9B,EAAyC;AACvC,eAAK4B,QAAL,CAAc;AAACtB,YAAAA,eAAe,EAAE,KAAKP,KAAL,CAAWQ,oBAAX,CAAgC,KAAKR,KAAL,CAAWQ,oBAAX,CAAgC4B,MAAhC,GAAwC,CAAxE;AAAlB,WAAd,EAA6G,MAAM;AACjH,iBAAKP,QAAL,CAAc;AAAA,kBAAErB,oBAAF,SAAEA,oBAAF;AAAA,kBAA2B6B,OAA3B;;AAAA;AACZ7B,gBAAAA,oBAAoB,EAAE,CAAC,GAAGA,oBAAoB,CAACmC,KAArB,CAA2B,CAA3B,EAA8B,CAAC,CAA/B,CAAJ;AADV,iBAETN,OAFS;AAAA,aAAd;AAID,WALD;AAMD;;AACD,YAAG,KAAKrC,KAAL,CAAWI,aAAX,GAA2B,CAA9B,EAAiC;AAC/B,eAAKyB,QAAL,CACI;AAAA,gBAAEzB,aAAF,SAAEA,aAAF;AAAA,gBAAoBiC,OAApB;;AAAA;AACEjC,cAAAA,aAAa,EAAEA,aAAa,GAAG;AADjC,eAEKiC,OAFL;AAAA,WADJ,EAKI,MAAM;AACJ,iBAAKG,sBAAL;AACD,WAPL;AAOO;;AAET,YAAG,KAAKxC,KAAL,CAAWI,aAAX,KAA6B,CAAhC,EAAmC;AACjC,eAAKqC,yBAAL,CAA+B,WAA/B;AACD;AACF;AACF,KA7JiD;;AAAA,SA+JlDG,oBA/JkD,GA+J3B,MAAM;AAC3B,YAAMC,MAAM,GAAG,QAAf;AACA,YAAMC,iBAAiB,GAAG,IAAIpC,IAAJ,CAAS,KAAKV,KAAL,CAAWY,UAApB,EAAgC,KAAKZ,KAAL,CAAWS,WAAX,GAAyB,CAAzD,EAA4D,CAA5D,EAA+DsC,OAA/D,EAA1B;AACA,UAAI7C,YAAY,GAAG,CAAC,IAAIQ,IAAJ,CAAS,KAAKV,KAAL,CAAWY,UAApB,EAAgC,KAAKZ,KAAL,CAAWS,WAA3C,EAAwD,CAAxD,EAA2DuC,OAA3D,EAAD,CAAnB,CAH2B,CAGgE;;AAC3F,WAAI,IAAIxB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,iBAAnB,EAAsCtB,CAAC,EAAvC,EAA2C;AAAE;AAC3CtB,QAAAA,YAAY,CAACuB,IAAb,CAAkBC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqB1B,YAArB,IAAqC2C,MAAvD;AACD,OAN0B,CAO3B;AACA;;;AACA,WAAI,IAAIrB,CAAC,GAAG,IAAId,IAAJ,CAASgB,IAAI,CAACuB,GAAL,CAAS,GAAG/C,YAAZ,CAAT,EAAoCgD,MAApC,EAAZ,EAA0D1B,CAAC,GAAG,CAA9D,EAAiEA,CAAC,EAAlE,EAAuE;AACrEtB,QAAAA,YAAY,CAACiD,OAAb,CAAqBzB,IAAI,CAACuB,GAAL,CAASrB,KAAT,CAAe,IAAf,EAAqB1B,YAArB,IAAqC2C,MAA1D;AACD,OAX0B,CAY3B;;;AACA,WAAI,IAAIrB,CAAC,GAAG,IAAId,IAAJ,CAASgB,IAAI,CAACC,GAAL,CAAS,GAAGzB,YAAZ,CAAT,EAAoCgD,MAApC,EAAZ,EAA0D1B,CAAC,GAAG,CAA9D,EAAiEA,CAAC,EAAlE,EAAuE;AACrEtB,QAAAA,YAAY,CAACuB,IAAb,CAAkBC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqB1B,YAArB,IAAqC2C,MAAvD;AACD;;AACD,UAAIO,YAAY,GAAG,EAAnB;;AACA,WAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,YAAY,CAACkC,MAAjC,EAAyCZ,CAAC,IAAI,CAA9C,EAAkD;AAChD,YAAI6B,KAAK,GAAGnD,YAAY,CAACyC,KAAb,CAAmBnB,CAAnB,EAAsBA,CAAC,GAAC,CAAxB,CAAZ;AACA4B,QAAAA,YAAY,CAAC3B,IAAb,CAAkB4B,KAAlB;AACD;;AACDnD,MAAAA,YAAY,GAAGkD,YAAf;AACA,WAAKvB,QAAL,CAAc;AAAC3B,QAAAA;AAAD,OAAd;AACD,KAtLiD;;AAAA,SAwLlDuC,yBAxLkD,GAwLtBP,KAAK,IAAI;AACnC,UAAGA,KAAK,KAAK,WAAb,EAA0B;AACxB,YAAG,KAAKlC,KAAL,CAAWC,WAAX,KAA2B,cAA9B,EAA8C;AAC5C;AACA,gBAAMqD,gBAAgB,GAAG,KAAKtD,KAAL,CAAWI,aAApC;AACA,eAAKyB,QAAL,CAAc;AAAA,gBAAErB,oBAAF,SAAEA,oBAAF;AAAA,gBAA2B6B,OAA3B;;AAAA;AACZ7B,cAAAA,oBAAoB,EAAE,CAClB,GAAGA,oBADe,EAEpB,GAAG,KAAKR,KAAL,CAAWE,YAAX,CACAqD,GADA,CACIC,IAAI,IAAIA,IAAI,CAACzB,MAAL,CAAYC,GAAG,IAAI,IAAItB,IAAJ,CAASsB,GAAT,EAAcrB,QAAd,OAA6B,KAAKX,KAAL,CAAWS,WAA3D,EAAwE2B,MAAxE,GAAgF,CAD5F,EAEEO,KAFF,CAEQW,gBAFR,CAFiB;AADV,eAOTjB,OAPS;AAAA,WAAd;AASD,SAbuB,CAcxB;;;AACA,aAAKR,QAAL,CAAc;AAAA,cAAExB,sBAAF,UAAEA,sBAAF;AAAA,cAA6BgC,OAA7B;;AAAA;AACZhC,YAAAA,sBAAsB,EAAE,CAAC,GAAGA,sBAAJ,EAA4B,KAAKL,KAAL,CAAWE,YAAX,CAAwBkC,MAAxB,GAAgC,CAA5D;AADZ,aAETC,OAFS;AAAA,SAAd,EAGI,MACF,KAAKR,QAAL,CAAc;AAAA,cAAEzB,aAAF,UAAEA,aAAF;AAAA,cAAiBG,eAAjB,UAAiBA,eAAjB;AAAA,cAAqC8B,OAArC;;AAAA;AACZ9B,YAAAA,eAAe,EAAE,CADL;AAEZH,YAAAA,aAAa,EAAE;AAFH,aAGTiC,OAHS;AAAA,SAAd,CAJF;;AAUA,YAAG,KAAKrC,KAAL,CAAWS,WAAX,GAAyB,EAA5B,EAAgC;AAAE;AAChC,eAAKoB,QAAL,CAAc;AAAA,gBAAEpB,WAAF,UAAEA,WAAF;AAAA,gBAAkB4B,OAAlB;;AAAA;AACZ5B,cAAAA,WAAW,EAAEA,WAAW,GAAG;AADf,eAET4B,OAFS;AAAA,WAAd,EAGI,MAAM,KAAKO,oBAAL,EAHV;AAID;;AACD,YAAG,KAAK5C,KAAL,CAAWS,WAAX,IAA0B,EAA7B,EAAiC;AAAC;AAChC,eAAKoB,QAAL,CAAc;AAAA,gBAAEjB,UAAF,UAAEA,UAAF;AAAA,gBAAcH,WAAd,UAAcA,WAAd;AAAA,gBAA8B4B,OAA9B;;AAAA;AACZzB,cAAAA,UAAU,EAAEA,UAAU,GAAG,CADb;AAEZH,cAAAA,WAAW,EAAE;AAFD,eAGT4B,OAHS;AAAA,WAAd,EAII,MAAM,KAAKO,oBAAL,EAJV;AAKD;AACF;;AACD,UAAIV,KAAK,KAAK,WAAd,EAA2B;AACzB,YAAG,KAAKlC,KAAL,CAAWC,WAAX,KAA2B,UAA3B,IAAyC,KAAKD,KAAL,CAAWC,WAAX,KAA2B,SAAvE,EAAkF;AAChF;AACA,eAAK4B,QAAL,CAAc;AAACzB,YAAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWK,sBAAX,CAAkC,KAAKL,KAAL,CAAWK,sBAAX,CAAkC+B,MAAlC,GAA0C,CAA5E;AAAhB,WAAd,EAA+G,MAAM;AACnH,iBAAKP,QAAL,CAAc;AAAA,kBAAExB,sBAAF,UAAEA,sBAAF;AAAA,kBAA6BgC,OAA7B;;AAAA;AACZhC,gBAAAA,sBAAsB,EAAE,CAAC,GAAGA,sBAAsB,CAACsC,KAAvB,CAA6B,CAA7B,EAAgC,CAAC,CAAjC,CAAJ;AADZ,iBAETN,OAFS;AAAA,aAAd;AAID,WALD;AAMD;;AACD,YAAG,KAAKrC,KAAL,CAAWC,WAAX,KAA2B,cAA9B,EAA8C;AAC5C;AACA;AACA;AACA,gBAAMqD,gBAAgB,GAAG,KAAKtD,KAAL,CAAWI,aAApC;AACA,gBAAMC,sBAAsB,GAAG,KAAKL,KAAL,CAAWK,sBAAX,CAAkC,KAAKL,KAAL,CAAWK,sBAAX,CAAkC+B,MAAlC,GAA0C,CAA5E,CAA/B;AACA,gBAAMqB,0BAA0B,GAAG,KAAKzD,KAAL,CAAWQ,oBAAX,CAAgC4B,MAAhC,GAAwC,CAA3E;AACA,eAAKP,QAAL,CAAc;AAAA,gBAAErB,oBAAF,UAAEA,oBAAF;AAAA,gBAA2B6B,OAA3B;;AAAA;AACZ7B,cAAAA,oBAAoB,EAAE,CAAC,GAAGA,oBAAoB,CAACmC,KAArB,CAA2B,CAA3B,EAA8Bc,0BAA0B,GAAGH,gBAA7B,GAAgDjD,sBAA9E,CAAJ;AADV,eAETgC,OAFS;AAAA,WAAd,EAP4C,CAW5C;;AACA,eAAKR,QAAL,CAAc;AAAA,gBAAEzB,aAAF,UAAEA,aAAF;AAAA,gBAAiBG,eAAjB,UAAiBA,eAAjB;AAAA,gBAAqC8B,OAArC;;AAAA;AACZ9B,cAAAA,eAAe,EAAE,CADL;AAEZH,cAAAA,aAAa,EAAE;AAFH,eAGTiC,OAHS;AAAA,WAAd,EAII,MAAM;AACR,iBAAKR,QAAL,CAAc;AAAA,kBAAExB,sBAAF,UAAEA,sBAAF;AAAA,kBAA6BgC,OAA7B;;AAAA;AACZhC,gBAAAA,sBAAsB,EAAE,CAAC,GAAGA,sBAAsB,CAACsC,KAAvB,CAA6B,CAA7B,EAAgC,CAAC,CAAjC,CAAJ;AADZ,iBAETN,OAFS;AAAA,aAAd;AAID,WATD;AAUD,SAhCwB,CAiCzB;;;AACA,YAAG,KAAKrC,KAAL,CAAWS,WAAX,GAAyB,CAAzB,IAA8B,CAAC,KAAKT,KAAL,CAAWE,YAAX,CAAwBwD,IAAxB,GAA+BhB,QAA/B,CAAwC,IAAIhC,IAAJ,GAAW6B,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,EAA6BS,OAA7B,EAAxC,CAAlC,EAAmH;AACjH,eAAKnB,QAAL,CAAc;AAAA,gBAAEpB,WAAF,UAAEA,WAAF;AAAA,gBAAkB4B,OAAlB;;AAAA;AACZ5B,cAAAA,WAAW,EAAEA,WAAW,GAAG;AADf,eAET4B,OAFS;AAAA,WAAd,EAGI,MAAM,KAAKO,oBAAL,EAHV;AAID,SAvCwB,CAwCzB;;;AACA,YAAG,KAAK5C,KAAL,CAAWS,WAAX,IAA0B,CAA7B,EAAgC;AAC9B,eAAKoB,QAAL,CAAc;AAAA,gBAAEjB,UAAF,UAAEA,UAAF;AAAA,gBAAcH,WAAd,UAAcA,WAAd;AAAA,gBAA8B4B,OAA9B;;AAAA;AACZzB,cAAAA,UAAU,EAAEA,UAAU,GAAG,CADb;AAEZH,cAAAA,WAAW,EAAE;AAFD,eAGT4B,OAHS;AAAA,WAAd,EAII,MAAM,KAAKO,oBAAL,EAJV;AAKD;AACF;AACF,KAjRiD;;AAAA,SAoRlDe,oBApRkD,GAoR3BzB,KAAK,IAAI;AAC9B,UAAG,KAAKlC,KAAL,CAAWC,WAAX,KAA2B,UAA9B,EAA0C;AACxC,aAAKqC,2BAAL,CAAiCJ,KAAjC;AACD;;AACD,UAAG,KAAKlC,KAAL,CAAWC,WAAX,KAA2B,cAA9B,EAA8C;AAC5C,aAAKwC,yBAAL,CAA+BP,KAA/B;AACD;;AACD,UAAG,KAAKlC,KAAL,CAAWC,WAAX,KAA2B,SAA9B,EAAyC;AACvC,aAAKgC,0BAAL,CAAgCC,KAAhC;AACD;AACF,KA9RiD;;AAAA,SAgSlD0B,aAhSkD,GAgSlC,MAAM;AAClB,WAAK/B,QAAL,CAAc;AAAA,YAAEjB,UAAF,UAAEA,UAAF;AAAA,YAAcH,WAAd,UAAcA,WAAd;AAAA,YAA2BL,aAA3B,UAA2BA,aAA3B;AAAA,YAA0CG,eAA1C,UAA0CA,eAA1C;AAAA,YAA8D8B,OAA9D;;AAAA;AACZzB,UAAAA,UAAU,EAAG,IAAIF,IAAJ,GAAWG,WAAX,EADD;AAEZJ,UAAAA,WAAW,EAAE,IAAIC,IAAJ,GAAWC,QAAX,EAFD;AAGZP,UAAAA,aAAa,EAAE,SAHH;AAIZG,UAAAA,eAAe,EAAE;AAJL,WAKT8B,OALS;AAAA,OAAd,EAMI,MAAM;AACR,aAAKO,oBAAL;AACD,OARD;AASH,KA1SiD;;AAAA,SA6SlDiB,wBA7SkD,GA6SvB,CAACC,IAAD,EAAOC,WAAP,KAAuB;AAChD,UAAIC,aAAa,GAAGF,IAAI,CAACG,QAAL,GAAgB7B,MAAhB,GAAyB,CAAzB,GAChB0B,IAAI,CAACZ,MAAL,EADgB,GACAY,IADpB;;AAEA,cAAQE,aAAR;AACE,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,QAAhB;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,QAAhB;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,SAAhB;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,WAAhB;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,UAAhB;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,QAAhB;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,aAAa,GAAG,UAAhB;AACA;;AACF;AACEA,UAAAA,aAAa,GAAG,IAAhB;AAvBJ;;AAyBA,UAAIE,WAAW,GAAIJ,IAAI,CAACG,QAAL,GAAgB7B,MAAhB,GAAyB,CAAzB,GACf0B,IAAI,CAACnD,QAAL,EADe,GACGmD,IADtB;;AAEA,cAAQI,WAAR;AACE,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,SAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,UAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,OAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,OAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,KAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,MAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,MAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,QAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,WAAd;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,WAAW,GAAG,SAAd;AACA;;AACF,aAAK,EAAL;AACEA,UAAAA,WAAW,GAAG,UAAd;AACA;;AACF,aAAK,EAAL;AACEA,UAAAA,WAAW,GAAG,UAAd;AACA;;AACF;AACEA,UAAAA,WAAW,GAAG,IAAd;AAtCJ;;AAwCA,UAAIH,WAAW,KAAK,eAApB,EAAqC;AACnC,eAAOC,aAAP;AACD;;AACD,UAAID,WAAW,KAAK,aAApB,EAAmC;AACjC,eAAOG,WAAP;AACD;AACF,KAzXiD;;AAAA,SA2XlDC,uBA3XkD,GA2XxB,CACtBnC,GADsB,EAEtBf,wBAFsB,EAGtBC,2BAHsB,KAIrB;AACH,UAAIF,gBAAJ;AACA,UAAI,KAAKhB,KAAL,CAAWe,aAAX,CAAyBC,gBAAzB,KAA8CgB,GAAlD,EAAuDhB,gBAAgB,GAAGgB,GAAnB;AACvD,UAAI,KAAKhC,KAAL,CAAWe,aAAX,CAAyBC,gBAAzB,KAA8CgB,GAAlD,EAAuDhB,gBAAgB,GAAG,KAAnB;AACvD,WAAKa,QAAL,CAAc;AAAA,YAAGd,aAAH,UAAGA,aAAH;AAAA,YAAqBsB,OAArB;;AAAA;AACZtB,UAAAA,aAAa,EAAE;AACbC,YAAAA,gBADa;AAEbC,YAAAA,wBAAwB,EAAEA,wBAFb;AAGbC,YAAAA,2BAA2B,EAAEA;AAHhB;AADH,WAMTmB,OANS;AAAA,OAAd;AAQD,KA3YiD;;AAAA,SA6YlD+B,2BA7YkD,GA6YpBC,SAAS,IAAI;AACzC,WAAKxC,QAAL,CAAc;AAAA,YAAGV,qBAAH,UAAGA,qBAAH;AAAA,YAA6BkB,OAA7B;;AAAA;AACZlB,UAAAA,qBAAqB,EAAE;AACrBC,YAAAA,KAAK,EAAEiD,SAAS,CAACC;AADI;AADX,WAITjC,OAJS;AAAA,OAAd;AAMD,KApZiD;;AAAA,SAsZlDkC,eAtZkD,GAsZ/BtE,WAAD,IAAiB;AACjC,WAAK4B,QAAL,CAAc;AAAC5B,QAAAA;AAAD,OAAd;AACD,KAxZiD;;AAAA,SA0ZlDuE,eA1ZkD,GA0ZhCC,WAAW,IAAI;AAC5B,UAAG,KAAKzE,KAAL,CAAWC,WAAX,KAA2B,UAA9B,EAA0C;AACxC,aAAK4B,QAAL,CAAc;AAAA,cAAE5B,WAAF,UAAEA,WAAF;AAAA,cAAeM,eAAf,UAAeA,eAAf;AAAA,cAAmC8B,OAAnC;;AAAA;AACZpC,YAAAA,WAAW,EAAE,SADD;AAEZM,YAAAA,eAAe,EAAE,KAAKP,KAAL,CAAWG,WAAX,CAAuBuE,OAAvB,CAA+BD,WAA/B;AAFL,aAGTpC,OAHS;AAAA,SAAd,EAII,MAAM,KAAKP,mBAAL,EAJV;AAKD;;AACF,UAAG,KAAK9B,KAAL,CAAWC,WAAX,KAA2B,cAA9B,EAA8C;AAC5C,YAAIM,eAAe,GAAG,KAAKP,KAAL,CAAWE,YAAX,CAAwB6B,MAAxB,CAA+ByB,IAAI,IAAIA,IAAI,CAACd,QAAL,CAAc+B,WAAd,CAAvC,EAAmEE,SAAnE,CAA6E3C,GAAG,IAAIA,GAAG,KAAKyC,WAA5F,CAAtB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYtE,eAAZ;AACAqE,QAAAA,OAAO,CAACC,GAAR;AACA,aAAKhD,QAAL,CAAc;AAAA,cAAEzB,aAAF,UAAEA,aAAF;AAAA,cAAiBH,WAAjB,UAAiBA,WAAjB;AAAA,cAAiCoC,OAAjC;;AAAA;AACZpC,YAAAA,WAAW,EAAE,SADD;AAEZG,YAAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWE,YAAX,CAAwByE,SAAxB,CAAkCnB,IAAI,IAAIA,IAAI,CAACd,QAAL,CAAc+B,WAAd,CAA1C;AAFH,aAGTpC,OAHS;AAAA,SAAd,EAII,MAAM,KAAKG,sBAAL,EAJV;AAKD;AACJ,KA5aiD;AAAA;;AAuBlDsC,EAAAA,iBAAiB,GAAE;AACjB,SAAKlC,oBAAL;AACA,SAAKvB,gBAAL,CAAsB,KAAK0D,KAAL,CAAWC,0BAAjC,EAA6D,KAAKD,KAAL,CAAWE,uBAAxE;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AACjD,QAAGD,SAAS,CAAClF,YAAV,KAA2B,KAAKF,KAAL,CAAWE,YAAzC,EAAuD;AACrD,YAAME,aAAa,GAAI,KAAKJ,KAAL,CAAWE,YAAX,CAAwByE,SAAxB,CAAkCnB,IAAI,IAAIA,IAAI,CAACd,QAAL,CAAc,IAAIhC,IAAJ,GAAW6B,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,CAAd,CAA1C,CAAvB;;AACA,UAAGnC,aAAa,KAAK,CAAC,CAAnB,KAAyBgF,SAAS,CAAChF,aAAV,KAA4B,SAA5B,IAAyC,KAAKJ,KAAL,CAAWC,WAAX,KAA2B,cAA7F,CAAH,EAAiH;AAC/G,aAAK4B,QAAL,CAAc;AAACzB,UAAAA;AAAD,SAAd,EAA+B,MAAM,KAAKoC,sBAAL,EAArC;AACD,OAFD,MAEO;AACL,aAAKA,sBAAL;AACD;AACF;;AACD,QAAG4C,SAAS,CAACjF,WAAV,KAA0B,KAAKH,KAAL,CAAWG,WAAxC,EAAqD;AACnD;AACA,YAAMI,eAAe,GAAG,KAAKP,KAAL,CAAWG,WAAX,CAAuBwE,SAAvB,CAAiC3C,GAAG,IAAIA,GAAG,KAAK,IAAItB,IAAJ,GAAW6B,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,EAA0B,CAA1B,CAAhD,CAAxB;;AACA,UAAGhC,eAAe,KAAK,CAAC,CAArB,KAA2B6E,SAAS,CAAC7E,eAAV,KAA8B,SAA9B,IAA2C,KAAKP,KAAL,CAAWC,WAAX,KAA2B,cAAtE,IAAwF,KAAKD,KAAL,CAAWC,WAAX,KAA2B,UAA9I,CAAH,EAA8J;AAC5J,aAAK4B,QAAL,CAAc;AAACtB,UAAAA;AAAD,SAAd,EAAiC,MAAM,KAAKuB,mBAAL,EAAvC,EAD4J,CAE5J;AACD,OAHD,MAGO;AACL,aAAKA,mBAAL;AACD;AACF,KAlBgD,CAmBjD;;;AACA,QAAGsD,SAAS,CAAC9E,UAAV,KAAyB,KAAKN,KAAL,CAAWM,UAApC,IAAkD8E,SAAS,CAAC9E,UAAV,KAAyB,EAA9E,EAAkF;AAChF,YAAML,WAAW,GAAG,KAAK8E,KAAL,CAAWO,WAA/B;AACA,WAAKzD,QAAL,CAAc;AAAC5B,QAAAA;AAAD,OAAd,EAA6B,MAAM,KAAKD,KAAL,CAAWC,WAA9C;AACD;AACF,GApDiD,CAsDlD;;;AAwXAsF,EAAAA,MAAM,GAAG;AACP,QAAIC,QAAQ,GAAG,EAAf;AACA,UAAMC,QAAQ;AAAA;AACV;AACA,wBAAC,QAAD;AACI,MAAA,WAAW,EAAE,KAAKzF,KAAL,CAAWC,WAD5B;AAEI,MAAA,sBAAsB,EAAE,KAAKD,KAAL,CAAWc,sBAFvC;AAGI,MAAA,wBAAwB,EAAE,KAAK+C,wBAHnC;AAII,MAAA,uBAAuB,EAAE,KAAKM,uBAJlC;AAKI,MAAA,aAAa,EAAE,KAAKnE,KAAL,CAAWe,aAL9B;AAMI,MAAA,0BAA0B,EAAE,KAAKgE,KAAL,CAAWC,0BAN3C;AAOI,MAAA,qBAAqB,EAAE,KAAKhF,KAAL,CAAWmB,qBAPtC;AAQI,MAAA,uBAAuB,EAAE,KAAK4D,KAAL,CAAWE,uBARxC;AASI,MAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWW,gBATjC;AAUI,MAAA,WAAW,EAAE,KAAK1F,KAAL,CAAWG,WAV5B;AAWI,MAAA,WAAW,EAAE,KAAKH,KAAL,CAAWS,WAX5B;AAYI,MAAA,eAAe,EAAE,KAAK+D,eAZ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAgBA,UAAMmB,YAAY;AAAA;AACd;AACA,wBAAC,YAAD;AACI,MAAA,WAAW,EAAE,KAAK3F,KAAL,CAAWC,WAD5B;AAEI,MAAA,gBAAgB,EAAE,KAAK8E,KAAL,CAAWa,gBAFjC;AAGI,MAAA,WAAW,EAAE,KAAK5F,KAAL,CAAWS,WAH5B;AAII,MAAA,YAAY,EAAE,KAAKT,KAAL,CAAWE,YAJ7B;AAKI,MAAA,WAAW,EAAE,KAAKF,KAAL,CAAWG,WAL5B;AAMI,MAAA,wBAAwB,EAAE,KAAK0D,wBANnC;AAOI,MAAA,eAAe,EAAE,KAAKW,eAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAWA,UAAMqB,OAAO;AAAA;AACT;AACA,wBAAC,OAAD;AACI,MAAA,aAAa,EAAE,KAAK7F,KAAL,CAAWe,aAD9B;AAEI,MAAA,WAAW,EAAE,KAAKf,KAAL,CAAWC,WAF5B;AAGI,MAAA,sBAAsB,EAAE,KAAKD,KAAL,CAAWc,sBAHvC;AAII,MAAA,wBAAwB,EAAE,KAAK+C,wBAJnC;AAKI,MAAA,0BAA0B,EAAE,KAAKkB,KAAL,CAAWC,0BAL3C;AAMI,MAAA,uBAAuB,EAAE,KAAKD,KAAL,CAAWE,uBANxC;AAOI,MAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWW,gBAPjC;AAQI,MAAA,YAAY,EAAE,KAAK1F,KAAL,CAAWE,YAR7B;AASI,MAAA,WAAW,EAAE,KAAKF,KAAL,CAAWY,UAT5B;AAUI,MAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWM,UAV3B;AAWI,MAAA,WAAW,EAAE,KAAKN,KAAL,CAAWS,WAX5B;AAYI,MAAA,WAAW,EAAE,KAAKT,KAAL,CAAWG,WAZ5B;AAaI,MAAA,oBAAoB,EAAE,KAAKwD,oBAb/B;AAcI,MAAA,gBAAgB,EAAE,KAAKoB,KAAL,CAAWa,gBAdjC;AAeI,MAAA,aAAa,EAAE,KAAKhC,aAfxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;;AAmBA,YAAQ,KAAK5D,KAAL,CAAWC,WAAnB;AACE,WAAK,UAAL;AACEuF,QAAAA,QAAQ,GAAGC,QAAX;AACA;;AACF,WAAK,cAAL;AACED,QAAAA,QAAQ,GAAGG,YAAX;AACA;;AACF,WAAK,SAAL;AACEH,QAAAA,QAAQ,GAAGK,OAAX;AACA;;AACF;AACEL,QAAAA,QAAQ,GAAG,IAAX;AAXJ;;AAaA,wBACI,oBAAC,MAAD;AACI,MAAA,gBAAgB,EAAE,KAAKT,KAAL,CAAWa,gBADjC;AAEI,MAAA,WAAW,EAAE,KAAKb,KAAL,CAAWO,WAF5B;AAGI,MAAA,aAAa,EAAE,KAAK1B,aAHxB;AAII,MAAA,WAAW,EAAE,KAAK5D,KAAL,CAAWC,WAJ5B;AAKI,MAAA,QAAQ,EAAE,MAAM,KAAKsE,eAAL,CAAqB,UAArB,CALpB;AAMI,MAAA,SAAS,EAAE,MAAM,KAAKA,eAAL,CAAqB,cAArB,CANrB;AAOI,MAAA,OAAO,EAAE,MAAM,KAAKA,eAAL,CAAqB,SAArB,CAPnB;AAQI,MAAA,2BAA2B,EAAE,KAAKH,2BARtC;AASI,MAAA,oBAAoB,EAAE,KAAKT,oBAT/B;AAUI,MAAA,wBAAwB,EAAE,KAAKE,wBAVnC;AAWI,MAAA,WAAW,EAAE,KAAK7D,KAAL,CAAWG,WAX5B;AAYI,MAAA,WAAW,EAAE,KAAKH,KAAL,CAAWS,WAZ5B;AAaI,MAAA,WAAW,EAAE,KAAKT,KAAL,CAAWY,UAb5B;AAcI,MAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWM,UAd3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAeGkF,QAfH,CADJ;AAmBD;;AA9fiD","sourcesContent":["import React from \"react\";\nimport Layout from \"../../UI/Layout/Layout\";\nimport WeekMode from \"../../UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"../../UI/ViewMode/CalendarMode/CalendarMode\";\nimport DayMode from \"../../UI/ViewMode/DayMode/DayMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: '',\n    currentMonth: [],\n    currentWeek: [],\n    currWeekIndex: \"initial\",\n    prevMonthLastWeekIndex: [],\n    currentDay: '',\n    currentDayIndex: \"initial\",\n    prevWeekLastDayIndex: [],\n    monthGetter: new Date().getMonth(),\n    yearGetter: new Date().getFullYear(),\n    arrayOfDailyHoursTable: [],\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\",\n    }\n  };\n\n  componentDidMount(){\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevState.currentMonth !== this.state.currentMonth) {\n      const currWeekIndex =  this.state.currentMonth.findIndex(week => week.includes(new Date().setHours(0,0,0,0)));\n      if(currWeekIndex !== -1 && (prevState.currWeekIndex === 'initial' || this.state.appViewMode === \"CalendarMode\")) {\n        this.setState({currWeekIndex}, () => this.weekAgendaLogicHandler())\n      } else {\n        this.weekAgendaLogicHandler()\n      }\n    }\n    if(prevState.currentWeek !== this.state.currentWeek) {\n      //code that finds the current present day withing the current week set by the CalendarMode, initial state render or WeekMode\n      const currentDayIndex = this.state.currentWeek.findIndex(day => day === new Date().setHours(0,0,0,0));\n      if(currentDayIndex !== -1 && (prevState.currentDayIndex === 'initial' || this.state.appViewMode === \"CalendarMode\" || this.state.appViewMode === \"WeekMode\")) {\n        this.setState({currentDayIndex}, () => this.dayModeLogicHandler())\n        //if the present day is not found within a current week, it will just execute the day mode logic handler normally.\n      } else {\n        this.dayModeLogicHandler()\n      }\n    }\n    //only set app view mode after spreading all the state through all modes\n    if(prevState.currentDay !== this.state.currentDay && prevState.currentDay === '') {\n      const appViewMode = this.props.defaultMode;\n      this.setState({appViewMode}, () => this.state.appViewMode);\n    }\n  }\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  dayModeLogicHandler = () => {\n\n    const currentWeek = this.state.currentWeek.filter(day => new Date(day).getMonth() === this.state.monthGetter);\n    const currentDay = currentWeek[this.state.currentDayIndex];\n    this.setState({currentDay});\n  };\n\n  dayAgendaNavigationHandler = modal => {\n    const filteredCurrentWeek = this.state.currentWeek.filter(day => new Date(day).getMonth() === this.state.monthGetter);\n    if(modal === 'increment') {\n      if(this.state.currentDayIndex < filteredCurrentWeek.length -1) {\n        this.setState(({currentDayIndex, ...restTop}) => ({\n          currentDayIndex: currentDayIndex + 1,\n          ...restTop\n        }), () => this.dayModeLogicHandler())\n      }\n      if(this.state.currentDayIndex === filteredCurrentWeek.length -1) {\n        this.setState(({currentDayIndex, ...restTop}) => ({\n          currentDayIndex: 0,\n          ...restTop\n        }), () => this.weekAgendaNavigationHandler('increment'))\n      }\n    }\n    if(modal === 'decrement' && this.state.currentDay !== new Date().setHours(0,0,0,0)) {\n      if(this.state.currentDayIndex > 0) {\n        this.setState(({currentDayIndex, ...restTop}) => ({\n          currentDayIndex: currentDayIndex - 1,\n          ...restTop\n        }), () => this.dayModeLogicHandler())\n      }\n      if(this.state.currentDayIndex === 0) {\n        this.weekAgendaNavigationHandler(\"decrement\")\n      }\n    }\n  };\n\n  weekAgendaLogicHandler = () => {\n    const currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n    this.setState({currentWeek});\n  };\n\n  weekAgendaNavigationHandler = modal => {\n    //init the current week index\n    if (modal === \"increment\") {\n      this.setState(({prevWeekLastDayIndex, ...restTop}) => ({\n        prevWeekLastDayIndex: [...prevWeekLastDayIndex, this.state.currentWeek.filter(day =>\n            new Date(day).getMonth() === this.state.monthGetter).length-1],\n        ...restTop\n      }),() => this.setState({currentDayIndex: 0}));\n      //if the number of weeks incremented does not exceed the amount of weeks in the month\n      if(this.state.currWeekIndex < this.state.currentMonth.length -1) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex + 1,\n              ...restTop\n            }),\n            () => this.weekAgendaLogicHandler());\n      }\n      if(this.state.currWeekIndex === this.state.currentMonth.length -1) {\n        this.setState(({currWeekIndex, ...restTop}) => ({\n          currWeekIndex: 0,\n          ...restTop\n        }), () => this.calendarNavigationHandler(\"increment\"));\n      }\n    }\n\n    if (modal === \"decrement\" && !this.state.currentWeek.includes(new Date().setHours(0,0,0,0))) {\n      if(this.state.appViewMode === \"WeekMode\") {\n        this.setState({currentDayIndex: 0})\n      }\n      if(this.state.appViewMode === \"DayMode\") {\n        this.setState({currentDayIndex: this.state.prevWeekLastDayIndex[this.state.prevWeekLastDayIndex.length -1]}, () => {\n          this.setState(({prevWeekLastDayIndex, ...restTop}) => ({\n            prevWeekLastDayIndex: [...prevWeekLastDayIndex.slice(0, -1)],\n            ...restTop\n          }))\n        });\n      }\n      if(this.state.currWeekIndex > 0) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex - 1,\n              ...restTop\n            }),\n            () => {\n              this.weekAgendaLogicHandler();\n            })}\n\n      if(this.state.currWeekIndex === 0) {\n        this.calendarNavigationHandler(\"decrement\");\n      }\n    }\n  };\n\n  calendarLogicHandler = () => {\n    const oneDay = 86400000;\n    const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n    let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n    for(let i = 1; i < lastDayOfTheMonth; i++) { //push the entire month\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    //localize the first date of the month dates array and check what day of the week it is\n    //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    let monthInWeeks = [];\n    for (let i = 0; i < currentMonth.length; i += 7 ) {\n      let chunk = currentMonth.slice(i, i+7 );\n      monthInWeeks.push(chunk)\n    }\n    currentMonth = monthInWeeks;\n    this.setState({currentMonth});\n  };\n\n  calendarNavigationHandler = modal => {\n    if(modal === \"increment\") {\n      if(this.state.appViewMode === \"CalendarMode\") {\n        //increment all last index positions for the remaining weeks of a month to serve the DayMode index positioning\n        const currentWeekIndex = this.state.currWeekIndex;\n        this.setState(({prevWeekLastDayIndex, ...restTop}) => ({\n          prevWeekLastDayIndex: [\n              ...prevWeekLastDayIndex,\n            ...this.state.currentMonth\n              .map(week => week.filter(day => new Date(day).getMonth() === this.state.monthGetter).length -1)\n                .slice(currentWeekIndex)\n          ],\n          ...restTop\n        }));\n      }\n      //saving the max index of curr month before incrementing\n      this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n        prevMonthLastWeekIndex: [...prevMonthLastWeekIndex, this.state.currentMonth.length -1],\n        ...restTop\n      }), () =>\n        this.setState(({currWeekIndex, currentDayIndex, ...restTop}) => ({\n          currentDayIndex: 0,\n          currWeekIndex: 0,\n          ...restTop\n        }))\n      );\n      if(this.state.monthGetter < 11) { //just add months, before changing the year\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter + 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n      if(this.state.monthGetter >= 11) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter + 1,\n          monthGetter: 0,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n    if (modal === \"decrement\") {\n      if(this.state.appViewMode === \"WeekMode\" || this.state.appViewMode === \"DayMode\") {\n        //saving the max index of curr month before incrementing\n        this.setState({currWeekIndex: this.state.prevMonthLastWeekIndex[this.state.prevMonthLastWeekIndex.length -1]}, () => {\n          this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n            prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)],\n            ...restTop\n          }));\n        });\n      }\n      if(this.state.appViewMode === \"CalendarMode\") {\n        // removing all the week's indexes saved in this.state.prevMonthLastWeekIndex\n        // that will come after the first week of the month being rendered upon decrementing\n        // so If navigating backwards in DayMode, It will have the proper reference of the last week's index\n        const currentWeekIndex = this.state.currWeekIndex;\n        const prevMonthLastWeekIndex = this.state.prevMonthLastWeekIndex[this.state.prevMonthLastWeekIndex.length -1];\n        const prevWeekLastDayIndexLength = this.state.prevWeekLastDayIndex.length -1;\n        this.setState(({prevWeekLastDayIndex, ...restTop}) => ({\n          prevWeekLastDayIndex: [...prevWeekLastDayIndex.slice(0, prevWeekLastDayIndexLength - currentWeekIndex - prevMonthLastWeekIndex)],\n          ...restTop\n        }));\n        //saving the max index of curr month before incrementing\n        this.setState(({currWeekIndex, currentDayIndex, ...restTop}) => ({\n          currentDayIndex: 0,\n          currWeekIndex: 0,\n          ...restTop\n        }), () => {\n          this.setState(({prevMonthLastWeekIndex, ...restTop}) => ({\n            prevMonthLastWeekIndex: [...prevMonthLastWeekIndex.slice(0, -1)],\n            ...restTop\n          }));\n        });\n      }\n      //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n      if(this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0,0,0,0).valueOf())) {\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter - 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n      //if the month is december it resets the month and increments the year\n      if(this.state.monthGetter <= 0) {\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter - 1,\n          monthGetter: 11,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n    if(this.state.appViewMode === \"WeekMode\") {\n      this.weekAgendaNavigationHandler(modal)\n    }\n    if(this.state.appViewMode === \"CalendarMode\") {\n      this.calendarNavigationHandler(modal)\n    }\n    if(this.state.appViewMode === \"DayMode\") {\n      this.dayAgendaNavigationHandler(modal)\n    }\n  };\n\n  takeMeToToday = () => {\n      this.setState(({yearGetter, monthGetter, currWeekIndex, currentDayIndex, ...restTop}) => ({\n        yearGetter : new Date().getFullYear(),\n        monthGetter: new Date().getMonth(),\n        currWeekIndex: 'initial',\n        currentDayIndex: 'initial',\n        ...restTop\n      }), () => {\n        this.calendarLogicHandler();\n      })\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.toString().length > 2 ?\n        date.getDay() : date;\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n    let renderMonth =  date.toString().length > 2 ?\n        date.getMonth() : date;\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n      case 1:\n        renderMonth = \"February\";\n        break;\n      case 2:\n        renderMonth = \"March\";\n        break;\n      case 3:\n        renderMonth = \"April\";\n        break;\n      case 4:\n        renderMonth = \"May\";\n        break;\n      case 5:\n        renderMonth = \"June\";\n        break;\n      case 6:\n        renderMonth = \"July\";\n        break;\n      case 7:\n        renderMonth = \"August\";\n        break;\n      case 8:\n        renderMonth = \"September\";\n        break;\n      case 9:\n        renderMonth = \"October\";\n        break;\n      case 10:\n        renderMonth = \"November\";\n        break;\n      case 11:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    if (this.state.dialogBoxData.displayDialogBox !== day) displayDialogBox = day;\n    if (this.state.dialogBoxData.displayDialogBox === day) displayDialogBox = false;\n    this.setState(({ dialogBoxData, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth,\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  };\n\n  goToClickedDate = clickedDate => {\n       if(this.state.appViewMode === \"WeekMode\") {\n         this.setState(({appViewMode, currentDayIndex, ...restTop}) => ({\n           appViewMode: \"DayMode\",\n           currentDayIndex: this.state.currentWeek.indexOf(clickedDate),\n           ...restTop\n         }), () => this.dayModeLogicHandler())\n       }\n      if(this.state.appViewMode === \"CalendarMode\") {\n        let currentDayIndex = this.state.currentMonth.filter(week => week.includes(clickedDate)).findIndex(day => day === clickedDate);\n        console.log(currentDayIndex);\n        console.log();\n        this.setState(({currWeekIndex, appViewMode, ...restTop}) => ({\n          appViewMode: \"DayMode\",\n          currWeekIndex: this.state.currentMonth.findIndex(week => week.includes(clickedDate)),\n          ...restTop\n        }), () => this.weekAgendaLogicHandler())\n      }\n  }\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = (\n        //the min width for weekMOde in curr setup is 700px wide\n        <WeekMode\n            appViewMode={this.state.appViewMode}\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            displayDialogBoxHandler={this.displayDialogBoxHandler}\n            dialogBoxData={this.state.dialogBoxData}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            layoutWidthDimensions={this.state.layoutWidthDimensions}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n            currentWeek={this.state.currentWeek}\n            monthGetter={this.state.monthGetter}\n            goToClickedDate={this.goToClickedDate}/>\n    );\n    const calendarMode = (\n        //the min width for the calendar mode in curr setup is 590px wide\n        <CalendarMode\n            appViewMode={this.state.appViewMode}\n            calendarViewType={this.props.calendarViewType}\n            monthGetter={this.state.monthGetter}\n            currentMonth={this.state.currentMonth}\n            currentWeek={this.state.currentWeek}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            goToClickedDate={this.goToClickedDate}/>\n    );\n    const dayMode = (\n        //day mode width is just fine\n        <DayMode\n            dialogBoxData={this.state.dialogBoxData}\n            appViewMode={this.state.appViewMode}\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n            currentMonth={this.state.currentMonth}\n            currentYear={this.state.yearGetter}\n            currentDay={this.state.currentDay}\n            monthGetter={this.state.monthGetter}\n            currentWeek={this.state.currentWeek}\n            appNavigationHandler={this.appNavigationHandler}\n            calendarViewType={this.props.calendarViewType}\n            takeMeToToday={this.takeMeToToday}/>\n    );\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = weekMode;\n        break;\n      case('CalendarMode') :\n        viewMode = calendarMode;\n        break;\n      case(\"DayMode\") :\n        viewMode = dayMode;\n        break;\n      default:\n        viewMode = null;\n    }\n    return (\n        <Layout\n            calendarViewType={this.props.calendarViewType}\n            defaultMode={this.props.defaultMode}\n            takeMeToToday={this.takeMeToToday}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            dayMode={() => this.viewModeHandler(\"DayMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            monthGetter={this.state.monthGetter}\n            currentYear={this.state.yearGetter}\n            currentDay={this.state.currentDay}>\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}