{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: \"\",\n      currentWeek: [],\n      currWeekIndex: '',\n      testWeek: [],\n      currentMonth: [],\n      monthGetter: new Date().getMonth(),\n      yearGetter: new Date().getFullYear(),\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.weekAgendaLogicHandler = () => {\n      if (this.componentDidUpdate() && this.weekAgendaNavigationHandler(\"decrement\")) {\n        console.log(\"month decrementing\");\n      }\n\n      let currentWeek = this.state.currentMonth.filter(week => week.includes(new Date().setHours(0, 0, 0, 0)) ? week : this.state.currentMonth[0]).flat();\n      this.setState({\n        currentWeek\n      }, () => {\n        const currWeekIndex = parseInt(this.state.currentMonth.map((week, index) => week.includes(Math.min(...this.state.currentWeek)) ? index : null).filter(index => index !== null), 10);\n        this.setState({\n          currWeekIndex\n        });\n      });\n    };\n\n    this.weekAgendaNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        //if the number of weeks incremented does not exceed the amount of weeks in the month\n        if (this.state.currWeekIndex < this.state.currentMonth.length - 1) {\n          this.setState((_ref) => {\n            let currWeekIndex = _ref.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex + 1\n            }, restTop);\n          }, () => {\n            let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n            this.setState({\n              currentWeek\n            });\n          });\n        }\n\n        if (this.state.currWeekIndex === this.state.currentMonth.length - 1) {\n          this.setState((_ref2) => {\n            let currWeekIndex = _ref2.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref2, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: 0\n            }, restTop);\n          }, () => {\n            this.calendarNavigationHandler(\"increment\");\n            let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n            this.setState({\n              currentWeek\n            });\n          });\n        }\n      }\n\n      if (modal === \"decrement\") {\n        if (this.state.currWeekIndex > 0 || !this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0))) {\n          this.setState((_ref3) => {\n            let currWeekIndex = _ref3.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref3, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: currWeekIndex - 1\n            }, restTop);\n          }, () => {\n            let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n            this.setState({\n              currentWeek\n            });\n          });\n        }\n\n        ;\n\n        if (this.state.currWeekIndex === 0 || !this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0))) {\n          this.calendarNavigationHandler(\"decrement\");\n          console.log(this.state.currentMonth.length - 1);\n          this.setState((_ref4) => {\n            let currWeekIndex = _ref4.currWeekIndex,\n                restTop = _objectWithoutProperties(_ref4, [\"currWeekIndex\"]);\n\n            return _objectSpread({\n              currWeekIndex: this.state.currentMonth.length - 1\n            }, restTop);\n          }, () => {\n            let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n            this.setState({\n              currentWeek\n            });\n          });\n        }\n      }\n    };\n\n    this.calendarLogicHandler = () => {\n      const oneDay = 86400000;\n      const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n      let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n\n      for (let i = 1; i < lastDayOfTheMonth; i++) {\n        //push the entire month\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      } //localize the first date of the month dates array and check what day of the week it is\n      //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n\n\n      for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n        currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n      } //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n\n\n      for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      }\n\n      let monthInWeeks = [];\n\n      for (let i = 0; i < currentMonth.length; i += 7) {\n        let chunk = currentMonth.slice(i, i + 7);\n        monthInWeeks.push(chunk);\n      }\n\n      currentMonth = monthInWeeks;\n      this.setState({\n        currentMonth\n      });\n    };\n\n    this.calendarNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        if (this.state.monthGetter < 11) {\n          //just add months, before changing the year\n          this.setState((_ref5) => {\n            let monthGetter = _ref5.monthGetter,\n                restTop = _objectWithoutProperties(_ref5, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter >= 11) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref6) => {\n            let yearGetter = _ref6.yearGetter,\n                monthGetter = _ref6.monthGetter,\n                restTop = _objectWithoutProperties(_ref6, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter + 1,\n              monthGetter: 0\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n        if (this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState((_ref7) => {\n            let monthGetter = _ref7.monthGetter,\n                restTop = _objectWithoutProperties(_ref7, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter - 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter <= 0) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref8) => {\n            let yearGetter = _ref8.yearGetter,\n                monthGetter = _ref8.monthGetter,\n                restTop = _objectWithoutProperties(_ref8, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter - 1,\n              monthGetter: 11\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n    };\n\n    this.appNavigationHandler = modal => {\n      if (this.state.appViewMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal);\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.toString().length > 2 ? date.getDay() : date;\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.toString().length > 2 ? date.getMonth() : date;\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 11:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.backdropDisplayHandler = day => {\n      this.setState((_ref9) => {\n        let backdropIsActive = _ref9.backdropIsActive,\n            dialogBoxData = _ref9.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref9, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref10) => {\n        let dialogBoxData = _ref10.dialogBoxData,\n            backdropIsActive = _ref10.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref10, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref11) => {\n        let layoutWidthDimensions = _ref11.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref11, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    const appViewMode = this.props.defaultMode;\n    this.setState({\n      appViewMode\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.currentMonth !== this.state.currentMonth) {\n      this.weekAgendaLogicHandler();\n    }\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = /*#__PURE__*/React.createElement(WeekMode, {\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      backdropIsActive: this.state.backdropIsActive,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      displayDialogBoxHandler: this.displayDialogBoxHandler,\n      backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n      dialogBoxData: this.state.dialogBoxData,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      layoutWidthDimensions: this.state.layoutWidthDimensions,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      currentWeek: this.state.currentWeek,\n      monthGetter: this.state.monthGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }\n    });\n    let calendarMode = /*#__PURE__*/React.createElement(CalendarMode, {\n      monthGetter: this.state.monthGetter,\n      currentMonth: this.state.currentMonth,\n      currentWeek: this.state.currentWeek,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    });\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = weekMode;\n        break;\n\n      case 'CalendarMode':\n        viewMode = calendarMode;\n        break;\n\n      default:\n        switch (this.props.defaultMode) {\n          case \"CalendarMode\":\n            viewMode = calendarMode;\n            break;\n\n          case \"WeekMode\":\n            viewMode = weekMode;\n            break;\n\n          default:\n            alert(\"there is something wrong here!\");\n        }\n\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      defaultMode: this.props.defaultMode,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      currentMonth: this.state.monthGetter,\n      currentYear: this.state.yearGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","Agenda","Component","state","appViewMode","currentWeek","currWeekIndex","testWeek","currentMonth","monthGetter","Date","getMonth","yearGetter","getFullYear","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","weekAgendaLogicHandler","componentDidUpdate","weekAgendaNavigationHandler","console","log","filter","week","includes","setHours","flat","parseInt","map","index","min","modal","length","restTop","calendarNavigationHandler","calendarLogicHandler","oneDay","lastDayOfTheMonth","getDate","valueOf","getDay","unshift","monthInWeeks","chunk","slice","appNavigationHandler","newDatesToVerboseHandler","date","verboseType","renderWeekDay","toString","renderMonth","backdropDisplayHandler","day","displayDialogBoxHandler","backdropIsActiv","callbackContainerDimensions","container","offsetWidth","viewModeHandler","componentDidMount","props","agendaInitialAvailableHour","agendaLastAvailableHour","defaultMode","prevProps","prevState","snapshot","render","viewMode","weekMode","data","dataToBeRendered","calendarMode","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: \"\",\n    currentWeek: [],\n    currWeekIndex: '',\n    testWeek: [],\n    currentMonth: [],\n    monthGetter: new Date().getMonth(),\n    yearGetter: new Date().getFullYear(),\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount(){\n    this.calendarLogicHandler();\n    this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour);\n    const appViewMode = this.props.defaultMode;\n    this.setState({appViewMode});\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevState.currentMonth !== this.state.currentMonth) {\n      this.weekAgendaLogicHandler();\n    }\n  }\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  weekAgendaLogicHandler = () => {\n    if(this.componentDidUpdate() && this.weekAgendaNavigationHandler(\"decrement\")) {\n      console.log(\"month decrementing\")\n    }\n    let currentWeek = this.state.currentMonth\n        .filter(week => week.includes(new Date().setHours(0,0,0,0)) ?\n       week :\n        this.state.currentMonth[0])\n        .flat();\n    this.setState({currentWeek}, () => {\n      const currWeekIndex = parseInt(\n          this.state.currentMonth\n              .map((week, index) =>\n                  week.includes(Math.min(...this.state.currentWeek)) ? index : null\n              )\n              .filter(index => index !== null),\n          10\n      );\n      this.setState({ currWeekIndex });\n    })\n  };\n\n  weekAgendaNavigationHandler = modal => {\n    if (modal === \"increment\") {\n      //if the number of weeks incremented does not exceed the amount of weeks in the month\n      if(this.state.currWeekIndex < this.state.currentMonth.length -1) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex + 1,\n              ...restTop\n            }),\n            () => {\n              let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n              this.setState({currentWeek});\n            }\n        );\n      }\n      if(this.state.currWeekIndex === this.state.currentMonth.length -1) {\n        this.setState(({currWeekIndex, ...restTop}) => ({\n          currWeekIndex: 0,\n          ...restTop\n        }), () => {\n          this.calendarNavigationHandler(\"increment\");\n          let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n          this.setState({currentWeek});\n        });\n      }\n    }\n    if (modal === \"decrement\") {\n      if(this.state.currWeekIndex > 0 || !this.state.currentWeek.includes(new Date().setHours(0,0,0,0))) {\n        this.setState(\n            ({currWeekIndex, ...restTop}) => ({\n              currWeekIndex: currWeekIndex - 1,\n              ...restTop\n            }),\n            () => {\n              let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n              this.setState({currentWeek});\n            }\n        );\n      };\n      if(this.state.currWeekIndex === 0 || !this.state.currentWeek.includes(new Date().setHours(0,0,0,0))) {\n        this.calendarNavigationHandler(\"decrement\");\n        console.log(this.state.currentMonth.length - 1);\n        this.setState(({currWeekIndex, ...restTop}) => ({\n          currWeekIndex: this.state.currentMonth.length - 1,\n          ...restTop\n        }), () => {\n          let currentWeek = this.state.currentMonth[this.state.currWeekIndex];\n          this.setState({currentWeek});\n        });\n      }\n    }\n  };\n\n  calendarLogicHandler = () => {\n    const oneDay = 86400000;\n    const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n    let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n    for(let i = 1; i < lastDayOfTheMonth; i++) { //push the entire month\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    //localize the first date of the month dates array and check what day of the week it is\n    //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    let monthInWeeks = [];\n    for (let i = 0; i < currentMonth.length; i += 7 ) {\n      let chunk = currentMonth.slice(i, i+7 );\n      monthInWeeks.push(chunk)\n    }\n    currentMonth = monthInWeeks;\n    this.setState({currentMonth})\n  };\n\n  calendarNavigationHandler = modal => {\n    if(modal === \"increment\") {\n      if(this.state.monthGetter < 11) { //just add months, before changing the year\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter + 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter >= 11) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter + 1,\n          monthGetter: 0,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n    if (modal === \"decrement\") {\n      //just subtract months, before changing the year, if the current day is not present in the current calendar month.\n      if(this.state.monthGetter > 0 && !this.state.currentMonth.flat().includes(new Date().setHours(0,0,0,0).valueOf())) {\n        this.setState(({monthGetter, ...restTop}) => ({\n          monthGetter: monthGetter - 1,\n          ...restTop\n        }), () => this.calendarLogicHandler());\n      }\n\n      if(this.state.monthGetter <= 0) {//if the month is december it resets the month and increments the year\n        this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n          yearGetter: yearGetter - 1,\n          monthGetter: 11,\n          ...restTop\n        }), () => this.calendarLogicHandler())\n      }\n    }\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n    if(this.state.appViewMode === \"WeekMode\") {\n      this.weekAgendaNavigationHandler(modal)\n    }\n    if(this.state.appViewMode === \"CalendarMode\") {\n      this.calendarNavigationHandler(modal)\n    }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.toString().length > 2 ?\n        date.getDay() : date;\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth =  date.toString().length > 2 ?\n        date.getMonth() : date;\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 11:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler = (day) => {\n    this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n      backdropIsActive: day,\n      dialogBoxData: {\n        displayDialogBox: false\n      },\n      ...restTop\n    }));\n  };\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  };\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = (\n        <WeekMode\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            backdropIsActive={this.state.backdropIsActive}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            displayDialogBoxHandler={this.displayDialogBoxHandler}\n            backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n            dialogBoxData={this.state.dialogBoxData}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            layoutWidthDimensions={this.state.layoutWidthDimensions}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n            currentWeek={this.state.currentWeek}\n            monthGetter={this.state.monthGetter}\n        />\n    );\n    let calendarMode = (\n        <CalendarMode\n            monthGetter={this.state.monthGetter}\n            currentMonth={this.state.currentMonth}\n            currentWeek={this.state.currentWeek}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n    )\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = weekMode;\n        break;\n      case('CalendarMode') :\n        viewMode = calendarMode;\n        break;\n      default :\n        switch (this.props.defaultMode) {\n          case(\"CalendarMode\") :\n            viewMode = calendarMode;\n            break;\n          case(\"WeekMode\") :\n            viewMode = weekMode;\n            break;\n          default : alert(\"there is something wrong here!\")\n        }\n    }\n    return (\n        <Layout\n            defaultMode={this.props.defaultMode}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            currentMonth={this.state.monthGetter}\n            currentYear={this.state.yearGetter}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}