{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/DateCards.js/DateCards.js\";\nimport React, { useState } from 'react';\nimport classes from \"./DateCards.module.css\";\nimport MonthTeller from \"../../UI/MonthTeller/MonthTeller\";\nimport Transition from \"react-transition-group/cjs/Transition\";\nexport default function DateCards(props) {\n  //set the animation of the transition which displays the month of dates not related to the curr month\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        otherMonth = _useState2[0],\n        setOtherMonth = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        cursorNotAllowed = _useState4[0],\n        setCursorNotAllowed = _useState4[1]; //sets the background color of the current day of the month\n\n\n  const dayOfTheCalendarEqualsToday = new Date(props.today).getDate() === new Date().getDate() && new Date(props.today).getMonth() === new Date().getMonth();\n  const dayOfTheCalendarEqualsCurrDayOfDayMode = new Date(props.today).getDate() === new Date(props.currentDay).getDate() && new Date(props.today).getMonth() === new Date(props.currentDay).getMonth();\n  let todayStyle;\n\n  if (props.calendarViewType === \"SimpleCalendar\") {\n    if (dayOfTheCalendarEqualsCurrDayOfDayMode && !dayOfTheCalendarEqualsToday) {\n      todayStyle = {\n        backgroundColor: \"gray\",\n        color: \"white\"\n      };\n    }\n\n    if (dayOfTheCalendarEqualsCurrDayOfDayMode && dayOfTheCalendarEqualsToday) {\n      todayStyle = {\n        backgroundColor: \"#f56157\",\n        color: \"white\",\n        fontWeight: \"bold\"\n      };\n    }\n\n    if (!dayOfTheCalendarEqualsCurrDayOfDayMode && dayOfTheCalendarEqualsToday) {\n      todayStyle = {\n        backgroundColor: \"inherit\",\n        color: \"#f56157\",\n        fontWeight: \"bold\"\n      };\n    }\n  }\n\n  if (props.calendarViewType !== \"SimpleCalendar\" && dayOfTheCalendarEqualsToday) todayStyle = {\n    backgroundColor: \"#f56157\",\n    color: \"white\"\n  };\n  const currentMonthDateDifferentFromCurrentMonth = new Date(props.today).getMonth() !== props.monthGetter;\n  let borderConfig = \"1px solid black\";\n  let fullCalendarStyle = {};\n  let fullCalendarInnerStyle = {};\n  let nonMonthDates = {};\n  let mouseOverDisabledStyle = {};\n\n  const mouseOverDisabled = currentDay => {\n    if (currentDay < new Date().setHours(0, 0, 0, 0)) {\n      const mouseOverDisabledStyle = {\n        cursor: \"not-allowed\"\n      };\n    }\n  };\n\n  console.log('working out', mouseOverDisabledStyle);\n\n  if (props.appViewMode === \"CalendarMode\") {\n    if (props.today < new Date().setHours(0, 0, 0, 0)) {\n      Object.assign(fullCalendarStyle, {\n        backgroundColor: \"#f2f2f2\"\n      });\n    }\n\n    if (props.calendarViewType === \"FullCalendar\") {\n      fullCalendarInnerStyle = {\n        position: \"absolute\",\n        right: \"5px\",\n        top: \"5px\",\n        fontSize: \"17px\",\n        padding: \"5px\"\n      };\n      fullCalendarStyle = {\n        borderRight: borderConfig,\n        borderBottom: borderConfig,\n        height: \"100px\"\n      };\n\n      if (props.cardDayIndex === 0) {\n        Object.assign(fullCalendarStyle, {\n          borderLeft: borderConfig\n        });\n      }\n\n      if (props.cardDatesInnerIndex === 0) {\n        Object.assign(fullCalendarStyle, {\n          borderTop: borderConfig\n        });\n      }\n\n      if (currentMonthDateDifferentFromCurrentMonth || props.today < new Date().setHours(0, 0, 0, 0)) {\n        Object.assign(fullCalendarStyle, {\n          backgroundColor: \"#f2f2f2\"\n        });\n      }\n    }\n  }\n\n  if (currentMonthDateDifferentFromCurrentMonth) {\n    nonMonthDates = {\n      color: 'grey'\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.DateWrapper,\n    style: fullCalendarStyle,\n    onMouseEnter: () => setOtherMonth(true),\n    onMouseLeave: () => setOtherMonth(false),\n    onClick: () => props.today >= new Date().setHours(0, 0, 0, 0) ? props.goToClickedDate(props.today) : null,\n    onMouseOver: () => mouseOverDisabled(props.today),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Transition, {\n    in: otherMonth && currentMonthDateDifferentFromCurrentMonth && props.calendarViewType === \"FullCalendar\",\n    timeout: 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, state => {\n    let animation = {\n      transition: \"opacity .5s ease-out\",\n      opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0\n    };\n    let innerAnimation = {\n      transition: \"width .5s ease-out\",\n      width: state === \"entering\" ? \"100%\" : state === \"entered\" ? \"100%\" : state === \"exited\" ? 0 : 0\n    };\n    return /*#__PURE__*/React.createElement(MonthTeller, {\n      monthGetter: new Date(props.today).getMonth(),\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      style: animation,\n      innerStyle: innerAnimation,\n      calendarViewType: props.calendarViewType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Day,\n    style: Object.assign(nonMonthDates, todayStyle, fullCalendarInnerStyle, props.smallCalendarOnDayMode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, new Date(props.today).getDate()));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Components/DateCards.js/DateCards.js"],"names":["React","useState","classes","MonthTeller","Transition","DateCards","props","otherMonth","setOtherMonth","cursorNotAllowed","setCursorNotAllowed","dayOfTheCalendarEqualsToday","Date","today","getDate","getMonth","dayOfTheCalendarEqualsCurrDayOfDayMode","currentDay","todayStyle","calendarViewType","backgroundColor","color","fontWeight","currentMonthDateDifferentFromCurrentMonth","monthGetter","borderConfig","fullCalendarStyle","fullCalendarInnerStyle","nonMonthDates","mouseOverDisabledStyle","mouseOverDisabled","setHours","cursor","console","log","appViewMode","Object","assign","position","right","top","fontSize","padding","borderRight","borderBottom","height","cardDayIndex","borderLeft","cardDatesInnerIndex","borderTop","DateWrapper","goToClickedDate","state","animation","transition","opacity","innerAnimation","width","newDatesToVerboseHandler","Day","smallCalendarOnDayMode"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport classes from \"./DateCards.module.css\";\nimport MonthTeller from \"../../UI/MonthTeller/MonthTeller\";\nimport Transition from \"react-transition-group/cjs/Transition\";\n\nexport default function DateCards(props) {\n    //set the animation of the transition which displays the month of dates not related to the curr month\n    const [otherMonth, setOtherMonth] = useState(false);\n    const [cursorNotAllowed, setCursorNotAllowed] = useState({})\n    //sets the background color of the current day of the month\n    const dayOfTheCalendarEqualsToday = new Date(props.today).getDate() === new Date().getDate() &&\n        new Date(props.today).getMonth() === new Date().getMonth();\n    const dayOfTheCalendarEqualsCurrDayOfDayMode = new Date(props.today).getDate() === new Date(props.currentDay).getDate() &&\n        new Date(props.today).getMonth() === new Date(props.currentDay).getMonth();\n    let todayStyle;\n    if(props.calendarViewType === \"SimpleCalendar\") {\n        if(dayOfTheCalendarEqualsCurrDayOfDayMode && !dayOfTheCalendarEqualsToday ) {\n            todayStyle = { backgroundColor: \"gray\", color: \"white\" };\n        }\n        if(dayOfTheCalendarEqualsCurrDayOfDayMode && dayOfTheCalendarEqualsToday) {\n            todayStyle = { backgroundColor: \"#f56157\", color: \"white\", fontWeight: \"bold\" };\n        }\n        if(!dayOfTheCalendarEqualsCurrDayOfDayMode && dayOfTheCalendarEqualsToday) {\n            todayStyle = { backgroundColor: \"inherit\", color: \"#f56157\", fontWeight: \"bold\" };\n        }\n    }\n    if (props.calendarViewType !== \"SimpleCalendar\" && dayOfTheCalendarEqualsToday) todayStyle = { backgroundColor: \"#f56157\", color: \"white\" };\n    const currentMonthDateDifferentFromCurrentMonth = new Date(props.today).getMonth() !== props.monthGetter;\n    let borderConfig = \"1px solid black\";\n    let fullCalendarStyle = {};\n    let fullCalendarInnerStyle = {};\n    let nonMonthDates = {};\n    let mouseOverDisabledStyle = {};\n\n    const mouseOverDisabled = (currentDay) => {\n        if(currentDay < new Date().setHours(0,0,0,0)) {\n            const mouseOverDisabledStyle =  {cursor: \"not-allowed\"};\n        }\n    }\n    console.log('working out', mouseOverDisabledStyle)\n    if(props.appViewMode === \"CalendarMode\") {\n        if(props.today < new Date().setHours(0,0,0,0)){\n            Object.assign(fullCalendarStyle,{backgroundColor: \"#f2f2f2\"});\n        }\n        if(props.calendarViewType === \"FullCalendar\") {\n            fullCalendarInnerStyle = {position: \"absolute\", right: \"5px\", top: \"5px\", fontSize: \"17px\", padding: \"5px\"};\n            fullCalendarStyle = {borderRight: borderConfig, borderBottom: borderConfig, height: \"100px\"};\n            if(props.cardDayIndex === 0) {\n                Object.assign(fullCalendarStyle, {borderLeft: borderConfig});\n            }\n            if(props.cardDatesInnerIndex === 0) {\n                Object.assign(fullCalendarStyle, {borderTop: borderConfig})\n            }\n            if(currentMonthDateDifferentFromCurrentMonth || props.today < new Date().setHours(0,0,0,0)){\n                Object.assign(fullCalendarStyle,{backgroundColor: \"#f2f2f2\"});\n            }\n        }\n    }\n    if(currentMonthDateDifferentFromCurrentMonth){\n        nonMonthDates = {color: 'grey'};\n    }\n    return(\n        <div className={classes.DateWrapper}\n             style={fullCalendarStyle}\n             onMouseEnter={() => setOtherMonth(true)}\n             onMouseLeave={() => setOtherMonth(false)}\n             onClick={() => props.today >= new Date().setHours(0,0,0,0) ? props.goToClickedDate(props.today) : null}\n             onMouseOver={() => mouseOverDisabled(props.today)}>\n            <Transition in={otherMonth && currentMonthDateDifferentFromCurrentMonth && props.calendarViewType === \"FullCalendar\"} timeout={1000}>\n                {state => {\n                    let animation = {\n                        transition: \"opacity .5s ease-out\",\n                        opacity:\n                            state === \"entering\"\n                                ? 1\n                                : state === \"entered\"\n                                ? 1\n                                : state === \"exited\"\n                                    ? 0\n                                    : 0\n                    };\n                    let innerAnimation = {\n                        transition: \"width .5s ease-out\",\n                        width:\n                            state === \"entering\"\n                                ? \"100%\"\n                                : state === \"entered\"\n                                ? \"100%\"\n                                : state === \"exited\"\n                                    ? 0\n                                    : 0\n                    };\n                    return (\n                        <MonthTeller monthGetter={new Date(props.today).getMonth()}\n                                     newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                                     style={animation}\n                                     innerStyle={innerAnimation}\n                                     calendarViewType={props.calendarViewType}/>\n                    )\n                }}\n            </Transition>\n            <div className={classes.Day}\n                 style={Object.assign(nonMonthDates,todayStyle, fullCalendarInnerStyle, props.smallCalendarOnDayMode)}>\n                {new Date(props.today).getDate()}\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}