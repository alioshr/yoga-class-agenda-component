{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js\";\nimport React from 'react';\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport DayCard from \"../../../DayCard/DayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/Transition\";\nexport default function WeekMode(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TimeTables, {\n    style: {\n      color: \"black\",\n      border: \"none\"\n    },\n    tableOfAvailableHours: props.arrayOfDailyHoursTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  })), props.currentWeek.map(day => {\n    return /*#__PURE__*/React.createElement(DayCard, {\n      backdropIsActive: props.backdropIsActive,\n      key: day,\n      today: day,\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, props.backdropIsActive === \"cover all\" ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.displayDialogBoxHandler(day),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 29\n      }\n    }) : null, /*#__PURE__*/React.createElement(TimeTables, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(day),\n      tableOfAvailableHours: props.arrayOfDailyHoursTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }\n    }), props.backdropIsActive === day ? /*#__PURE__*/React.createElement(BackdropFilter, {\n      backdropDisplayHandler: () => props.backdropDisplayHandler(\"false\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      ButtonText: \"Create a New Class\",\n      buttonClicked: () => props.displayDialogBoxHandler(day) //will open a dialog box in the future\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 33\n      }\n    })) : null, props.dataToBeRendered.map(cl => {\n      if (cl.classDate === day) {\n        return /*#__PURE__*/React.createElement(EventCard, {\n          zIndexIFClicked: props.dialogBoxData.displayDialogBox,\n          currDay: day,\n          classDate: cl.classDate,\n          classTitle: cl.classTitle,\n          classLocation: cl.location,\n          classDuration: cl.duration,\n          classTime: cl.classTime,\n          classInitialAvailableHour: props.agendaInitialAvailableHour,\n          key: cl.id,\n          displayFullEventCard: props.displayDialogBoxHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 37\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Transition, {\n        key: new Date(day).getDay(),\n        timeout: 500,\n        in: day === props.dialogBoxData.displayDialogBox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 33\n        }\n      }, state => {\n        let animation = {\n          transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n          opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0,\n          zIndex: state === \"entering\" ? 101 : state === \"entered\" ? 101 : state === \"exiting\" ? 96 : state === \"exited\" ? -100 : -100\n        };\n        return /*#__PURE__*/React.createElement(EventDialogBox, {\n          animation: animation,\n          today: day,\n          displayDialogBox: props.dialogBoxData.displayDialogBox,\n          dimsFromLayoutWidth: props.layoutWidthDimensions.width,\n          calculateCardTopPositioning: props.dialogBoxData.topPositionFromClassCard,\n          calculateCardHeigthPositioning: props.dialogBoxData.heigthPositionFromClassCard,\n          classInitialAvailableHour: props.agendaInitialAvailableHour,\n          classLastAvailableHour: props.agendaLastAvailableHour,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(FullEventCard, {\n          fullClassData: props.dataToBeRendered,\n          currentDay: day,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 49\n          }\n        }));\n      });\n    }));\n  }), /*#__PURE__*/React.createElement(SideTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/UI/ViewMode/WeekMode/WeekMode.js"],"names":["React","SideTab","TimeTables","DayCard","BackdropFilter","Button","EventCard","EventDialogBox","FullEventCard","Transition","WeekMode","props","display","flexDirection","width","color","border","arrayOfDailyHoursTable","currentWeek","map","day","backdropIsActive","newDatesToVerboseHandler","displayDialogBoxHandler","backdropDisplayHandler","dataToBeRendered","cl","classDate","dialogBoxData","displayDialogBox","classTitle","location","duration","classTime","agendaInitialAvailableHour","id","Date","getDay","state","animation","transition","opacity","zIndex","layoutWidthDimensions","topPositionFromClassCard","heigthPositionFromClassCard","agendaLastAvailableHour"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SideTab from \"../../../SideTab/SideTab\";\nimport TimeTables from \"../../../TimeTables/TimeTables\";\nimport DayCard from \"../../../DayCard/DayCard\";\nimport BackdropFilter from \"../../BackdropFilter/BackdropFilter\";\nimport Button from \"../../Button/Button\";\nimport EventCard from \"../../../EventCard/EventCard\";\nimport EventDialogBox from \"../../EventDialogBox/EventDialogBox\";\nimport FullEventCard from \"../../../EventCard/FullEventCard/FullEventCard\";\nimport Transition from \"react-transition-group/cjs/Transition\";\n\n\nexport default function WeekMode(props) {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\", width: \"100%\"}}>\n            <SideTab>\n                <TimeTables\n                    style={{ color: \"black\", border: \"none\" }}\n                    tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                />\n            </SideTab>\n            {props.currentWeek.map(day => {\n                return (\n                    <DayCard\n                        backdropIsActive={props.backdropIsActive}\n                        key={day}\n                        today={day}\n                        newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                    >\n                        {props.backdropIsActive === \"cover all\" ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.displayDialogBoxHandler(day)}\n                            />\n                        ) : null}\n                        <TimeTables\n                            backdropDisplayHandler={() => props.backdropDisplayHandler(day)}\n                            tableOfAvailableHours={props.arrayOfDailyHoursTable}\n                        />\n                        {props.backdropIsActive === day ? (\n                            <BackdropFilter\n                                backdropDisplayHandler={() => props.backdropDisplayHandler(\"false\")}\n                            >\n                                <Button\n                                    ButtonText=\"Create a New Class\"\n                                    buttonClicked={() => props.displayDialogBoxHandler(day)} //will open a dialog box in the future\n                                />\n                            </BackdropFilter>\n                        ) : null}\n                        {props.dataToBeRendered.map(cl => {\n                            if (cl.classDate === day) {\n                                return (\n                                    <EventCard\n                                        zIndexIFClicked={props.dialogBoxData.displayDialogBox}\n                                        currDay={day}\n                                        classDate={cl.classDate}\n                                        classTitle={cl.classTitle}\n                                        classLocation={cl.location}\n                                        classDuration={cl.duration}\n                                        classTime={cl.classTime}\n                                        classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                        key={cl.id}\n                                        displayFullEventCard={props.displayDialogBoxHandler}\n                                    />\n                                );\n                            }\n                            return (\n                                <Transition key={new Date(day).getDay()} timeout={500} in={day === props.dialogBoxData.displayDialogBox}>\n                                    {state => {\n                                        let animation = {\n                                            transition: \"z-index .5s ease-out, opacity .5s ease-out\",\n                                            opacity:\n                                                state === \"entering\"\n                                                    ? 1\n                                                    : state === \"entered\"\n                                                    ? 1\n                                                    : state === \"exited\"\n                                                        ? 0\n                                                        : 0,\n                                            zIndex:\n                                                state === \"entering\"\n                                                    ? 101\n                                                    : state === \"entered\"\n                                                    ? 101\n                                                    : state === \"exiting\"\n                                                        ? 96\n                                                        : state === \"exited\"\n                                                            ? -100\n                                                            : -100\n                                        };\n                                        return (\n                                            <EventDialogBox\n                                                animation={animation}\n                                                today={day}\n                                                displayDialogBox={props.dialogBoxData.displayDialogBox}\n                                                dimsFromLayoutWidth={props.layoutWidthDimensions.width}\n                                                calculateCardTopPositioning={props.dialogBoxData.topPositionFromClassCard}\n                                                calculateCardHeigthPositioning={props.dialogBoxData.heigthPositionFromClassCard}\n                                                classInitialAvailableHour={props.agendaInitialAvailableHour}\n                                                classLastAvailableHour={props.agendaLastAvailableHour}\n                                            >\n                                                <FullEventCard\n                                                    fullClassData={props.dataToBeRendered}\n                                                    currentDay={day}/>\n                                            </EventDialogBox>\n                                        );\n                                    }}\n                                </Transition>\n\n                            );\n                        })}\n                    </DayCard>\n                );\n            })}\n            <SideTab />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}