{"ast":null,"code":"import _objectSpread from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js\";\nimport React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\nexport default class Agenda extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appViewMode: \"\",\n      currentWeek: [],\n      currentMonth: [],\n      monthGetter: new Date().getMonth(),\n      yearGetter: new Date().getFullYear(),\n      dayManipulation: new Date(),\n      arrayOfDailyHoursTable: [],\n      backdropIsActive: false,\n      dialogBoxData: {\n        displayDialogBox: false,\n        topPositionFromClassCard: \"\",\n        heigthPositionFromClassCard: \"\"\n      },\n      layoutWidthDimensions: {\n        width: \"\"\n      }\n    };\n\n    this.arrayOfTableRows = (startingHour, endingHour) => {\n      let arrayOfDailyHoursTable = [startingHour];\n\n      for (let i = startingHour; i < endingHour; i++) {\n        arrayOfDailyHoursTable.push(Math.max.apply(null, arrayOfDailyHoursTable) + 1);\n      }\n\n      this.setState({\n        arrayOfDailyHoursTable\n      });\n    };\n\n    this.calendarLogicHandler = () => {\n      const oneDay = 86400000;\n      const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n      let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n\n      for (let i = 1; i < lastDayOfTheMonth; i++) {\n        //push the entire month\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      } //localize the first date of the month dates array and check what day of the week it is\n      //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n\n\n      for (let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i--) {\n        currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay);\n      } //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n\n\n      for (let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++) {\n        currentMonth.push(Math.max.apply(null, currentMonth) + oneDay);\n      }\n\n      this.setState({\n        currentMonth\n      });\n    };\n\n    this.weekAgendaNavigationHandler = modal => {\n      const oneDay = 86400000;\n\n      if (modal === \"increment\") {\n        let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n          currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n        }\n\n        this.setState({\n          currentWeek\n        });\n      }\n\n      if (modal === \"decrement\") {\n        let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n\n        for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n          currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n        }\n\n        if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n          this.setState({\n            currentWeek\n          });\n        }\n      }\n    };\n\n    this.calendarNavigationHandler = modal => {\n      if (modal === \"increment\") {\n        if (this.state.monthGetter < 11) {\n          //just add months, before changing the year\n          this.setState((_ref) => {\n            let monthGetter = _ref.monthGetter,\n                restTop = _objectWithoutProperties(_ref, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter + 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter >= 11) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref2) => {\n            let yearGetter = _ref2.yearGetter,\n                monthGetter = _ref2.monthGetter,\n                restTop = _objectWithoutProperties(_ref2, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter + 1,\n              monthGetter: 0\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n\n      if (modal === \"decrement\") {\n        if (this.state.monthGetter > 0) {\n          //just add months, before changing the year\n          this.setState((_ref3) => {\n            let monthGetter = _ref3.monthGetter,\n                restTop = _objectWithoutProperties(_ref3, [\"monthGetter\"]);\n\n            return _objectSpread({\n              monthGetter: monthGetter - 1\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n\n        if (this.state.monthGetter <= 0) {\n          //if the month is december it resets the month and increments the year\n          this.setState((_ref4) => {\n            let yearGetter = _ref4.yearGetter,\n                monthGetter = _ref4.monthGetter,\n                restTop = _objectWithoutProperties(_ref4, [\"yearGetter\", \"monthGetter\"]);\n\n            return _objectSpread({\n              yearGetter: yearGetter - 1,\n              monthGetter: 11\n            }, restTop);\n          }, () => this.calendarLogicHandler());\n        }\n      }\n    };\n\n    this.appNavigationHandler = modal => {\n      if (this.state.appViewMode === \"WeekMode\" || this.props.defaultMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal);\n      }\n\n      if (this.state.appViewMode === \"CalendarMode\" || this.props.defaultMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal);\n      }\n    };\n\n    this.newDatesToVerboseHandler = (date, verboseType) => {\n      let renderWeekDay = date.getDay();\n\n      switch (renderWeekDay) {\n        case 0:\n          renderWeekDay = \"Sunday\";\n          break;\n\n        case 1:\n          renderWeekDay = \"Monday\";\n          break;\n\n        case 2:\n          renderWeekDay = \"Tuesday\";\n          break;\n\n        case 3:\n          renderWeekDay = \"Wednesday\";\n          break;\n\n        case 4:\n          renderWeekDay = \"Thursday\";\n          break;\n\n        case 5:\n          renderWeekDay = \"Friday\";\n          break;\n\n        case 6:\n          renderWeekDay = \"Saturday\";\n          break;\n\n        default:\n          renderWeekDay = null;\n      }\n\n      let renderMonth = date.getMonth();\n\n      switch (renderMonth) {\n        case 0:\n          renderMonth = \"January\";\n          break;\n\n        case 1:\n          renderMonth = \"February\";\n          break;\n\n        case 2:\n          renderMonth = \"March\";\n          break;\n\n        case 3:\n          renderMonth = \"April\";\n          break;\n\n        case 4:\n          renderMonth = \"May\";\n          break;\n\n        case 5:\n          renderMonth = \"June\";\n          break;\n\n        case 6:\n          renderMonth = \"July\";\n          break;\n\n        case 7:\n          renderMonth = \"August\";\n          break;\n\n        case 8:\n          renderMonth = \"September\";\n          break;\n\n        case 9:\n          renderMonth = \"October\";\n          break;\n\n        case 10:\n          renderMonth = \"November\";\n          break;\n\n        case 11:\n          renderMonth = \"December\";\n          break;\n\n        default:\n          renderMonth = null;\n      }\n\n      if (verboseType === \"renderWeekDay\") {\n        return renderWeekDay;\n      }\n\n      if (verboseType === \"renderMonth\") {\n        return renderMonth;\n      }\n    };\n\n    this.displayDialogBoxHandler = (day, topPositionFromClassCard, heigthPositionFromClassCard) => {\n      let displayDialogBox;\n      let backdropIsActiv;\n\n      if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n        displayDialogBox = day;\n        backdropIsActiv = \"cover all\";\n      }\n\n      if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n        displayDialogBox = false;\n        backdropIsActiv = \"false\";\n      }\n\n      this.setState((_ref5) => {\n        let dialogBoxData = _ref5.dialogBoxData,\n            backdropIsActive = _ref5.backdropIsActive,\n            restTop = _objectWithoutProperties(_ref5, [\"dialogBoxData\", \"backdropIsActive\"]);\n\n        return _objectSpread({\n          dialogBoxData: {\n            displayDialogBox: displayDialogBox,\n            topPositionFromClassCard: topPositionFromClassCard,\n            heigthPositionFromClassCard: heigthPositionFromClassCard\n          },\n          backdropIsActive: backdropIsActiv\n        }, restTop);\n      });\n    };\n\n    this.callbackContainerDimensions = container => {\n      this.setState((_ref6) => {\n        let layoutWidthDimensions = _ref6.layoutWidthDimensions,\n            restTop = _objectWithoutProperties(_ref6, [\"layoutWidthDimensions\"]);\n\n        return _objectSpread({\n          layoutWidthDimensions: {\n            width: container.offsetWidth\n          }\n        }, restTop);\n      });\n    };\n\n    this.viewModeHandler = appViewMode => {\n      this.setState({\n        appViewMode\n      });\n    };\n  }\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date(); //logic that fills the <Day> cards in the agenda\n\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n\n    this.setState({\n      currentWeek\n    });\n    this.calendarLogicHandler(); //I call this set state to spread the table of empty tabs for each existing hour\n\n    this.setState({\n      arrayOfHourTable: this.arrayOfTableRows(this.props.agendaInitialAvailableHour, this.props.agendaLastAvailableHour)\n    });\n  } //the function below spreads the table of existing hours for <EmptyTables/>\n\n\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState((_ref7) => {\n        let backdropIsActive = _ref7.backdropIsActive,\n            dialogBoxData = _ref7.dialogBoxData,\n            restTop = _objectWithoutProperties(_ref7, [\"backdropIsActive\", \"dialogBoxData\"]);\n\n        return _objectSpread({\n          backdropIsActive: day,\n          dialogBoxData: {\n            displayDialogBox: false\n          }\n        }, restTop);\n      });\n    }\n  } //logic to run the dialog box. This box will handle create class, edit class & view full class card\n\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = /*#__PURE__*/React.createElement(WeekMode, {\n      arrayOfDailyHoursTable: this.state.arrayOfDailyHoursTable,\n      currentWeek: this.state.currentWeek,\n      backdropIsActive: this.state.backdropIsActive,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      displayDialogBoxHandler: this.displayDialogBoxHandler,\n      backdropDisplayHandler: data => this.backdropDisplayHandler(data),\n      dialogBoxData: this.state.dialogBoxData,\n      agendaInitialAvailableHour: this.props.agendaInitialAvailableHour,\n      layoutWidthDimensions: this.state.layoutWidthDimensions,\n      agendaLastAvailableHour: this.props.agendaLastAvailableHour,\n      dataToBeRendered: this.props.dataToBeRendered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }\n    });\n    let calendarMode = /*#__PURE__*/React.createElement(CalendarMode, {\n      monthGetter: this.state.monthGetter,\n      currentMonth: this.state.currentMonth,\n      currentWeek: this.state.currentWeek,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    });\n\n    switch (this.state.appViewMode) {\n      case 'WeekMode':\n        viewMode = weekMode;\n        break;\n\n      case 'CalendarMode':\n        viewMode = calendarMode;\n        break;\n\n      default:\n        switch (this.props.defaultMode) {\n          case \"CalendarMode\":\n            viewMode = calendarMode;\n            break;\n\n          case \"WeekMode\":\n            viewMode = weekMode;\n            break;\n        }\n\n    }\n\n    return /*#__PURE__*/React.createElement(Layout, {\n      defaultMode: this.props.defaultMode,\n      appViewMode: this.state.appViewMode,\n      weekMode: () => this.viewModeHandler(\"WeekMode\"),\n      monthMode: () => this.viewModeHandler(\"CalendarMode\"),\n      callbackContainerDimensions: this.callbackContainerDimensions,\n      appNavigationHandler: this.appNavigationHandler,\n      newDatesToVerboseHandler: this.newDatesToVerboseHandler,\n      currentWeek: this.state.currentWeek,\n      currentMonth: this.state.monthGetter,\n      currentYear: this.state.yearGetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }\n    }, viewMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/Agenda.js"],"names":["React","Layout","WeekMode","CalendarMode","Agenda","Component","state","appViewMode","currentWeek","currentMonth","monthGetter","Date","getMonth","yearGetter","getFullYear","dayManipulation","arrayOfDailyHoursTable","backdropIsActive","dialogBoxData","displayDialogBox","topPositionFromClassCard","heigthPositionFromClassCard","layoutWidthDimensions","width","arrayOfTableRows","startingHour","endingHour","i","push","Math","max","apply","setState","calendarLogicHandler","oneDay","lastDayOfTheMonth","getDate","valueOf","min","getDay","unshift","weekAgendaNavigationHandler","modal","includes","setHours","calendarNavigationHandler","restTop","appNavigationHandler","props","defaultMode","newDatesToVerboseHandler","date","verboseType","renderWeekDay","renderMonth","displayDialogBoxHandler","day","backdropIsActiv","callbackContainerDimensions","container","offsetWidth","viewModeHandler","componentDidMount","today","arrayOfHourTable","agendaInitialAvailableHour","agendaLastAvailableHour","backdropDisplayHandler","render","viewMode","weekMode","data","dataToBeRendered","calendarMode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Layout from \"./UI/Layout/Layout\";\nimport WeekMode from \"./UI/ViewMode/WeekMode/WeekMode\";\nimport CalendarMode from \"./UI/ViewMode/CalendarMode/CalendarMode\";\n\nexport default class Agenda extends React.Component {\n  state = {\n    appViewMode: \"\",\n    currentWeek: [],\n    currentMonth: [],\n    monthGetter: new Date().getMonth(),\n    yearGetter: new Date().getFullYear(),\n    dayManipulation: new Date(),\n    arrayOfDailyHoursTable: [],\n    backdropIsActive: false,\n\n    dialogBoxData: {\n      displayDialogBox: false,\n      topPositionFromClassCard: \"\",\n      heigthPositionFromClassCard: \"\"\n    },\n    layoutWidthDimensions: {\n      width: \"\"\n    }\n  };\n\n  componentDidMount() {\n    //here I set oneDay to get one day in ms & today to use as ref for dates\n    const oneDay = 86400000;\n    const today = new Date();\n\n    //logic that fills the <Day> cards in the agenda\n    let currentWeek = [today.setHours(0, 0, 0, 0)];\n    for (let i = today.getDay(); i > 0; i--) {\n      currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n    }\n    for (let i = today.getDay(); i < 6; i++) {\n      currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n    }\n    this.setState({ currentWeek });\n\n    this.calendarLogicHandler();\n\n    //I call this set state to spread the table of empty tabs for each existing hour\n    this.setState({\n      arrayOfHourTable: this.arrayOfTableRows(\n          this.props.agendaInitialAvailableHour,\n          this.props.agendaLastAvailableHour\n      )\n    });\n  }\n\n  //the function below spreads the table of existing hours for <EmptyTables/>\n  arrayOfTableRows = (startingHour, endingHour) => {\n    let arrayOfDailyHoursTable = [startingHour];\n    for (let i = startingHour; i < endingHour; i++) {\n      arrayOfDailyHoursTable.push(\n          Math.max.apply(null, arrayOfDailyHoursTable) + 1\n      );\n    }\n    this.setState({ arrayOfDailyHoursTable });\n  };\n\n  calendarLogicHandler = () => {\n    const oneDay = 86400000;\n    const lastDayOfTheMonth = new Date(this.state.yearGetter, this.state.monthGetter + 1, 0).getDate();\n    let currentMonth = [new Date(this.state.yearGetter, this.state.monthGetter, 1).valueOf()]; //starts on month day 1\n    for(let i = 1; i < lastDayOfTheMonth; i++) { //push the entire month\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    //localize the first date of the month dates array and check what day of the week it is\n    //spread the days of the week, which are the remaining days of prev month to fill calendar first week\n    for(let i = new Date(Math.min(...currentMonth)).getDay(); i > 0; i-- ) {\n      currentMonth.unshift(Math.min.apply(null, currentMonth) - oneDay)\n    }\n    //spread the days of the week, which are the remaining days of prev month to fill calendar last week\n    for(let i = new Date(Math.max(...currentMonth)).getDay(); i < 6; i++ ) {\n      currentMonth.push(Math.max.apply(null, currentMonth) + oneDay)\n    }\n    this.setState({currentMonth})\n  };\n\n  weekAgendaNavigationHandler = modal => {\n    const oneDay = 86400000;\n    if (modal === \"increment\") {\n      let currentWeek = [Math.max(...this.state.currentWeek) + oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i < 6; i++) {\n        currentWeek.push(Math.max.apply(null, currentWeek) + oneDay);\n      }\n      this.setState({currentWeek});\n    }\n    if (modal === \"decrement\") {\n      let currentWeek = [Math.min(...this.state.currentWeek) - oneDay];\n      for (let i = new Date(...currentWeek).getDay(); i > 0; i--) {\n        currentWeek.unshift(Math.min.apply(null, currentWeek) - oneDay);\n      }\n      if (!this.state.currentWeek.includes(new Date().setHours(0, 0, 0, 0).valueOf())) {\n        this.setState({currentWeek});\n      }\n    }\n  }\n\n  calendarNavigationHandler = modal => {\n if(modal === \"increment\") {\n  if(this.state.monthGetter < 11) { //just add months, before changing the year\n    this.setState(({monthGetter, ...restTop}) => ({\n      monthGetter: monthGetter + 1,\n      ...restTop\n    }), () => this.calendarLogicHandler());\n  }\n\n  if(this.state.monthGetter >= 11) {//if the month is december it resets the month and increments the year\n    this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n      yearGetter: yearGetter + 1,\n      monthGetter: 0,\n      ...restTop\n    }), () => this.calendarLogicHandler())\n  }\n}\n if (modal === \"decrement\") {\n   if(this.state.monthGetter > 0) { //just add months, before changing the year\n     this.setState(({monthGetter, ...restTop}) => ({\n       monthGetter: monthGetter - 1,\n       ...restTop\n     }), () => this.calendarLogicHandler());\n   }\n\n   if(this.state.monthGetter <= 0) {//if the month is december it resets the month and increments the year\n     this.setState(({yearGetter, monthGetter, ...restTop}) => ({\n       yearGetter: yearGetter - 1,\n       monthGetter: 11,\n       ...restTop\n     }), () => this.calendarLogicHandler())\n   }\n }\n  };\n\n  //this functions navigates in between weeks\n  appNavigationHandler = modal => {\n      if(this.state.appViewMode === \"WeekMode\" || this.props.defaultMode === \"WeekMode\") {\n        this.weekAgendaNavigationHandler(modal)\n      }\n      if(this.state.appViewMode === \"CalendarMode\" || this.props.defaultMode === \"CalendarMode\") {\n        this.calendarNavigationHandler(modal)\n      }\n  };\n\n  //this function does the verbose work for my days to appear nicely\n  newDatesToVerboseHandler = (date, verboseType) => {\n    let renderWeekDay = date.getDay();\n    switch (renderWeekDay) {\n      case 0:\n        renderWeekDay = \"Sunday\";\n        break;\n\n      case 1:\n        renderWeekDay = \"Monday\";\n        break;\n\n      case 2:\n        renderWeekDay = \"Tuesday\";\n        break;\n\n      case 3:\n        renderWeekDay = \"Wednesday\";\n        break;\n\n      case 4:\n        renderWeekDay = \"Thursday\";\n        break;\n\n      case 5:\n        renderWeekDay = \"Friday\";\n        break;\n\n      case 6:\n        renderWeekDay = \"Saturday\";\n        break;\n      default:\n        renderWeekDay = null;\n    }\n\n    let renderMonth = date.getMonth();\n\n    switch (renderMonth) {\n      case 0:\n        renderMonth = \"January\";\n        break;\n\n      case 1:\n        renderMonth = \"February\";\n        break;\n\n      case 2:\n        renderMonth = \"March\";\n        break;\n\n      case 3:\n        renderMonth = \"April\";\n        break;\n\n      case 4:\n        renderMonth = \"May\";\n        break;\n\n      case 5:\n        renderMonth = \"June\";\n        break;\n\n      case 6:\n        renderMonth = \"July\";\n        break;\n\n      case 7:\n        renderMonth = \"August\";\n        break;\n\n      case 8:\n        renderMonth = \"September\";\n        break;\n\n      case 9:\n        renderMonth = \"October\";\n        break;\n\n      case 10:\n        renderMonth = \"November\";\n        break;\n\n      case 11:\n        renderMonth = \"December\";\n        break;\n      default:\n        renderMonth = null;\n    }\n\n    if (verboseType === \"renderWeekDay\") {\n      return renderWeekDay;\n    }\n    if (verboseType === \"renderMonth\") {\n      return renderMonth;\n    }\n  };\n  //by clicking inside a event day card activates the backdrop for that day so I can edit the events or ad new ones\n  backdropDisplayHandler(day) {\n    if (day) {\n      this.setState(({ backdropIsActive, dialogBoxData, ...restTop }) => ({\n        backdropIsActive: day,\n        dialogBoxData: {\n          displayDialogBox: false\n        },\n        ...restTop\n      }));\n    }\n  }\n  //logic to run the dialog box. This box will handle create class, edit class & view full class card\n  displayDialogBoxHandler = (\n      day,\n      topPositionFromClassCard,\n      heigthPositionFromClassCard\n  ) => {\n    let displayDialogBox;\n    let backdropIsActiv;\n\n    if (this.state.dialogBoxData.displayDialogBox !== day && this.state.backdropIsActive !== \"cover all\") {\n      displayDialogBox = day;\n      backdropIsActiv = \"cover all\";\n    }\n    if (this.state.dialogBoxData.displayDialogBox === day && this.state.backdropIsActive === \"cover all\") {\n      displayDialogBox = false;\n      backdropIsActiv = \"false\";\n    }\n    this.setState(({ dialogBoxData, backdropIsActive, ...restTop }) => ({\n      dialogBoxData: {\n        displayDialogBox: displayDialogBox,\n        topPositionFromClassCard: topPositionFromClassCard,\n        heigthPositionFromClassCard: heigthPositionFromClassCard\n      },\n      backdropIsActive: backdropIsActiv,\n      ...restTop\n    }));\n  };\n\n  callbackContainerDimensions = container => {\n    this.setState(({ layoutWidthDimensions, ...restTop }) => ({\n      layoutWidthDimensions: {\n        width: container.offsetWidth\n      },\n      ...restTop\n    }));\n  };\n\n  viewModeHandler = (appViewMode) => {\n    this.setState({appViewMode})\n  }\n\n  render() {\n    let viewMode = \"\";\n    const weekMode = (\n        <WeekMode\n            arrayOfDailyHoursTable={this.state.arrayOfDailyHoursTable}\n            currentWeek={this.state.currentWeek}\n            backdropIsActive={this.state.backdropIsActive}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            displayDialogBoxHandler={this.displayDialogBoxHandler}\n            backdropDisplayHandler={(data) => this.backdropDisplayHandler(data)}\n            dialogBoxData={this.state.dialogBoxData}\n            agendaInitialAvailableHour={this.props.agendaInitialAvailableHour}\n            layoutWidthDimensions={this.state.layoutWidthDimensions}\n            agendaLastAvailableHour={this.props.agendaLastAvailableHour}\n            dataToBeRendered={this.props.dataToBeRendered}\n        />\n    );\n    let calendarMode = (\n        <CalendarMode\n            monthGetter={this.state.monthGetter}\n            currentMonth={this.state.currentMonth}\n            currentWeek={this.state.currentWeek}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}/>\n    )\n    switch (this.state.appViewMode) {\n      case('WeekMode') :\n        viewMode = weekMode;\n        break;\n      case('CalendarMode') :\n        viewMode = calendarMode;\n        break;\n      default :\n        switch (this.props.defaultMode) {\n          case(\"CalendarMode\") :\n            viewMode = calendarMode;\n            break;\n          case(\"WeekMode\") :\n            viewMode = weekMode;\n            break;\n        }\n    }\n    return (\n        <Layout\n            defaultMode={this.props.defaultMode}\n            appViewMode={this.state.appViewMode}\n            weekMode={() => this.viewModeHandler(\"WeekMode\")}\n            monthMode={() => this.viewModeHandler(\"CalendarMode\")}\n            callbackContainerDimensions={this.callbackContainerDimensions}\n            appNavigationHandler={this.appNavigationHandler}\n            newDatesToVerboseHandler={this.newDatesToVerboseHandler}\n            currentWeek={this.state.currentWeek}\n            currentMonth={this.state.monthGetter}\n            currentYear={this.state.yearGetter}\n        >\n          {viewMode}\n        </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}