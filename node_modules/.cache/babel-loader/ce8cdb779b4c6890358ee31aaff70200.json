{"ast":null,"code":"import _slicedToArray from \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/AgendaCards/DateCards.js/DateCards.js\";\nimport React, { useState } from 'react';\nimport classes from \"./DateCards.module.css\";\nimport MonthTeller from \"../../UI/MonthTeller/MonthTeller\";\nimport Transition from \"react-transition-group/cjs/Transition\";\nexport default function DateCards(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        otherMonth = _useState2[0],\n        setOtherMonth = _useState2[1];\n\n  let todayStyle;\n\n  if (new Date(props.today).getDate() === new Date().getDate() && new Date(props.today).getMonth() === new Date().getMonth()) {\n    todayStyle = {\n      backgroundColor: \"#f56157\",\n      color: \"white\"\n    };\n  }\n\n  const currentMonthDateDifferentFromCurrentMonth = new Date(props.today).getMonth() !== props.monthGetter;\n  let borderConfig = \"1px solid black\";\n  let fullCalendarStyle;\n  let fullCalendarInnerStyle;\n\n  if (props.calendarViewType === \"FullCalendar\" && props.appViewMode === \"CalendarMode\") {\n    fullCalendarInnerStyle = {\n      position: \"absolute\",\n      right: 0,\n      top: 0,\n      fontSize: \"17px\",\n      padding: \"5px\"\n    };\n    fullCalendarStyle = {\n      borderRight: borderConfig,\n      borderBottom: borderConfig,\n      height: \"100px\"\n    };\n\n    if (props.cardDayIndex === 0) {\n      Object.assign(fullCalendarStyle, {\n        borderLeft: borderConfig,\n        borderRight: borderConfig\n      });\n    }\n\n    if (props.cardDatesInnerIndex === 0) {\n      Object.assign(fullCalendarStyle, {\n        borderTop: borderConfig\n      });\n    }\n  }\n\n  let nonMonthDates = {};\n\n  if (currentMonthDateDifferentFromCurrentMonth) {\n    nonMonthDates = {\n      color: 'grey'\n    };\n    Object.assign(fullCalendarStyle, {\n      backgroundColor: \"#f8f88\"\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.DateWrapper,\n    style: fullCalendarStyle,\n    onMouseEnter: () => setOtherMonth(true),\n    onMouseLeave: () => setOtherMonth(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Transition, {\n    in: otherMonth && currentMonthDateDifferentFromCurrentMonth,\n    timeout: 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, state => {\n    let animation = {\n      transition: \"opacity .5s ease-out\",\n      opacity: state === \"entering\" ? 1 : state === \"entered\" ? 1 : state === \"exited\" ? 0 : 0\n    };\n    let innerAnimation = {\n      transition: \"width .5s ease-out\",\n      width: state === \"entering\" ? \"100%\" : state === \"entered\" ? \"100%\" : state === \"exited\" ? 0 : 0\n    };\n    return /*#__PURE__*/React.createElement(MonthTeller, {\n      monthGetter: new Date(props.today).getMonth(),\n      newDatesToVerboseHandler: props.newDatesToVerboseHandler,\n      style: animation,\n      innerStyle: innerAnimation,\n      calendarViewType: props.calendarViewType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Day,\n    style: Object.assign(nonMonthDates, todayStyle, fullCalendarInnerStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, new Date(props.today).getDate()));\n}","map":{"version":3,"sources":["/Users/Dev/WebstormProjects/event-calendar/yoga-class-agenda-component/src/Agenda/AgendaCards/DateCards.js/DateCards.js"],"names":["React","useState","classes","MonthTeller","Transition","DateCards","props","otherMonth","setOtherMonth","todayStyle","Date","today","getDate","getMonth","backgroundColor","color","currentMonthDateDifferentFromCurrentMonth","monthGetter","borderConfig","fullCalendarStyle","fullCalendarInnerStyle","calendarViewType","appViewMode","position","right","top","fontSize","padding","borderRight","borderBottom","height","cardDayIndex","Object","assign","borderLeft","cardDatesInnerIndex","borderTop","nonMonthDates","DateWrapper","state","animation","transition","opacity","innerAnimation","width","newDatesToVerboseHandler","Day"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport classes from \"./DateCards.module.css\";\nimport MonthTeller from \"../../UI/MonthTeller/MonthTeller\";\nimport Transition from \"react-transition-group/cjs/Transition\";\n\nexport default function DateCards(props) {\n    const [otherMonth, setOtherMonth] = useState(false);\n    let todayStyle;\n    if (\n        new Date(props.today).getDate() === new Date().getDate() &&\n        new Date(props.today).getMonth() === new Date().getMonth()\n    ) {\n        todayStyle = { backgroundColor: \"#f56157\", color: \"white\" };\n    }\n    const currentMonthDateDifferentFromCurrentMonth = new Date(props.today).getMonth() !== props.monthGetter;\n    let borderConfig = \"1px solid black\";\n    let fullCalendarStyle;\n    let fullCalendarInnerStyle;\n    if(props.calendarViewType === \"FullCalendar\" && props.appViewMode === \"CalendarMode\") {\n        fullCalendarInnerStyle = {position: \"absolute\", right: 0, top: 0, fontSize: \"17px\", padding: \"5px\"};\n        fullCalendarStyle = {borderRight: borderConfig, borderBottom: borderConfig, height: \"100px\"};\n        if(props.cardDayIndex === 0) {\n            Object.assign(fullCalendarStyle, {borderLeft: borderConfig, borderRight: borderConfig});\n        }\n        if(props.cardDatesInnerIndex === 0) {\n            Object.assign(fullCalendarStyle, {borderTop: borderConfig})\n        }\n    }\n    let nonMonthDates = {};\n    if(currentMonthDateDifferentFromCurrentMonth) {\n        nonMonthDates = {color: 'grey'};\n        Object.assign(fullCalendarStyle, {backgroundColor: \"#f8f88\"})\n    }\n    return(\n        <div className={classes.DateWrapper}\n             style={fullCalendarStyle}\n             onMouseEnter={() => setOtherMonth(true)}\n             onMouseLeave={() => setOtherMonth(false)}>\n            <Transition in={otherMonth && currentMonthDateDifferentFromCurrentMonth} timeout={1000}>\n                {state => {\n                    let animation = {\n                        transition: \"opacity .5s ease-out\",\n                        opacity:\n                            state === \"entering\"\n                                ? 1\n                                : state === \"entered\"\n                                ? 1\n                                : state === \"exited\"\n                                    ? 0\n                                    : 0\n                    };\n                    let innerAnimation = {\n                        transition: \"width .5s ease-out\",\n                        width:\n                            state === \"entering\"\n                                ? \"100%\"\n                                : state === \"entered\"\n                                ? \"100%\"\n                                : state === \"exited\"\n                                    ? 0\n                                    : 0\n                    };\n                    return (\n                        <MonthTeller monthGetter={new Date(props.today).getMonth()}\n                                     newDatesToVerboseHandler={props.newDatesToVerboseHandler}\n                                     style={animation}\n                                     innerStyle={innerAnimation}\n                                     calendarViewType={props.calendarViewType}/>\n                    )\n                }}\n            </Transition>\n            <div className={classes.Day} style={Object.assign(nonMonthDates,todayStyle, fullCalendarInnerStyle)}>\n                {new Date(props.today).getDate()}\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}